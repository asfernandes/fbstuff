{ This file was autogenerated by cloop - Cross Language Object Oriented Programming }

unit FbApi;

interface

uses Classes, SysUtils;

type
{$IFNDEF FPC}
	QWord = UInt64;
{$ENDIF}

	Versioned = class;
	ReferenceCounted = class;
	Disposable = class;
	Status = class;
	Master = class;
	PluginBase = class;
	PluginSet = class;
	ConfigEntry = class;
	Config = class;
	FirebirdConf = class;
	PluginConfig = class;
	PluginFactory = class;
	PluginModule = class;
	PluginManager = class;
	CryptKey = class;
	ConfigManager = class;
	EventCallback = class;
	Blob = class;
	Transaction = class;
	MessageMetadata = class;
	MetadataBuilder = class;
	ResultSet = class;
	Statement = class;
	Request = class;
	Events = class;
	Attachment = class;
	Service = class;
	Provider = class;
	DtcStart = class;
	Dtc = class;
	Auth = class;
	Writer = class;
	ServerBlock = class;
	ClientBlock = class;
	Server = class;
	Client = class;
	UserField = class;
	CharUserField = class;
	IntUserField = class;
	User = class;
	ListUsers = class;
	LogonInfo = class;
	Management = class;
	WireCryptPlugin = class;
	CryptKeyCallback = class;
	KeyHolderPlugin = class;
	DbCryptPlugin = class;
	ExternalContext = class;
	ExternalResultSet = class;
	ExternalFunction = class;
	ExternalProcedure = class;
	ExternalTrigger = class;
	RoutineMetadata = class;
	ExternalEngine = class;
	Timer = class;
	TimerControl = class;
	VersionCallback = class;
	Util = class;
	XpbBuilder = class;
	TraceConnection = class;
	TraceDatabaseConnection = class;
	TraceTransaction = class;
	TraceParams = class;
	TraceStatement = class;
	TraceSQLStatement = class;
	TraceBLRStatement = class;
	TraceDYNRequest = class;
	TraceContextVariable = class;
	TraceProcedure = class;
	TraceFunction = class;
	TraceTrigger = class;
	TraceServiceConnection = class;
	TraceStatusVector = class;
	TraceSweepInfo = class;
	TraceLogWriter = class;
	TraceInitInfo = class;
	TracePlugin = class;
	TraceFactory = class;
	UdrFunctionFactory = class;
	UdrProcedureFactory = class;
	UdrTriggerFactory = class;
	UdrPlugin = class;

	FbException = class(Exception)
	public
		constructor create(status: Status);
		destructor Destroy; override;

		function getStatus: Status;

		class procedure checkException(status: Status);
		class procedure catchException(status: Status; e: Exception);

	private
		status: Status;
	end;

ISC_DATE = Integer;
ISC_TIME = Integer;

ISC_QUAD = record
	high: Integer;
	low: Cardinal;
end;

{ FIXME: }

PerformanceInfo = record
end;

dsc = record
end;

	BooleanPtr = ^Boolean;
	BytePtr = ^Byte;
	CardinalPtr = ^Cardinal;
	ISC_QUADPtr = ^ISC_QUAD;
	Int64Ptr = ^Int64;
	KeyHolderPluginPtr = ^KeyHolderPlugin;
	NativeIntPtr = ^NativeInt;
	PerformanceInfoPtr = ^PerformanceInfo;
	dscPtr = ^dsc;

	ReferenceCounted_addRefPtr = procedure(this: ReferenceCounted); cdecl;
	ReferenceCounted_releasePtr = function(this: ReferenceCounted): Integer; cdecl;
	Disposable_disposePtr = procedure(this: Disposable); cdecl;
	Status_initPtr = procedure(this: Status); cdecl;
	Status_getStatePtr = function(this: Status): Cardinal; cdecl;
	Status_setErrors2Ptr = procedure(this: Status; length: Cardinal; value: NativeIntPtr); cdecl;
	Status_setWarnings2Ptr = procedure(this: Status; length: Cardinal; value: NativeIntPtr); cdecl;
	Status_setErrorsPtr = procedure(this: Status; value: NativeIntPtr); cdecl;
	Status_setWarningsPtr = procedure(this: Status; value: NativeIntPtr); cdecl;
	Status_getErrorsPtr = function(this: Status): NativeIntPtr; cdecl;
	Status_getWarningsPtr = function(this: Status): NativeIntPtr; cdecl;
	Status_clonePtr = function(this: Status): Status; cdecl;
	Master_getStatusPtr = function(this: Master): Status; cdecl;
	Master_getDispatcherPtr = function(this: Master): Provider; cdecl;
	Master_getPluginManagerPtr = function(this: Master): PluginManager; cdecl;
	Master_getTimerControlPtr = function(this: Master): TimerControl; cdecl;
	Master_getDtcPtr = function(this: Master): Dtc; cdecl;
	Master_registerAttachmentPtr = function(this: Master; provider: Provider; attachment: Attachment): Attachment; cdecl;
	Master_registerTransactionPtr = function(this: Master; attachment: Attachment; transaction: Transaction): Transaction; cdecl;
	Master_getMetadataBuilderPtr = function(this: Master; status: Status; fieldCount: Cardinal): MetadataBuilder; cdecl;
	Master_serverModePtr = function(this: Master; mode: Integer): Integer; cdecl;
	Master_getUtilInterfacePtr = function(this: Master): Util; cdecl;
	Master_getConfigManagerPtr = function(this: Master): ConfigManager; cdecl;
	Master_getProcessExitingPtr = function(this: Master): Boolean; cdecl;
	PluginBase_setOwnerPtr = procedure(this: PluginBase; r: ReferenceCounted); cdecl;
	PluginBase_getOwnerPtr = function(this: PluginBase): ReferenceCounted; cdecl;
	PluginSet_getNamePtr = function(this: PluginSet): PAnsiChar; cdecl;
	PluginSet_getModuleNamePtr = function(this: PluginSet): PAnsiChar; cdecl;
	PluginSet_getPluginPtr = function(this: PluginSet; status: Status): PluginBase; cdecl;
	PluginSet_nextPtr = procedure(this: PluginSet; status: Status); cdecl;
	PluginSet_set_Ptr = procedure(this: PluginSet; status: Status; s: PAnsiChar); cdecl;
	ConfigEntry_getNamePtr = function(this: ConfigEntry): PAnsiChar; cdecl;
	ConfigEntry_getValuePtr = function(this: ConfigEntry): PAnsiChar; cdecl;
	ConfigEntry_getIntValuePtr = function(this: ConfigEntry): Int64; cdecl;
	ConfigEntry_getBoolValuePtr = function(this: ConfigEntry): Boolean; cdecl;
	ConfigEntry_getSubConfigPtr = function(this: ConfigEntry; status: Status): Config; cdecl;
	Config_findPtr = function(this: Config; status: Status; name: PAnsiChar): ConfigEntry; cdecl;
	Config_findValuePtr = function(this: Config; status: Status; name: PAnsiChar; value: PAnsiChar): ConfigEntry; cdecl;
	Config_findPosPtr = function(this: Config; status: Status; name: PAnsiChar; pos: Cardinal): ConfigEntry; cdecl;
	FirebirdConf_getKeyPtr = function(this: FirebirdConf; name: PAnsiChar): Cardinal; cdecl;
	FirebirdConf_asIntegerPtr = function(this: FirebirdConf; key: Cardinal): Int64; cdecl;
	FirebirdConf_asStringPtr = function(this: FirebirdConf; key: Cardinal): PAnsiChar; cdecl;
	FirebirdConf_asBooleanPtr = function(this: FirebirdConf; key: Cardinal): Boolean; cdecl;
	PluginConfig_getConfigFileNamePtr = function(this: PluginConfig): PAnsiChar; cdecl;
	PluginConfig_getDefaultConfigPtr = function(this: PluginConfig; status: Status): Config; cdecl;
	PluginConfig_getFirebirdConfPtr = function(this: PluginConfig; status: Status): FirebirdConf; cdecl;
	PluginConfig_setReleaseDelayPtr = procedure(this: PluginConfig; status: Status; microSeconds: QWord); cdecl;
	PluginFactory_createPluginPtr = function(this: PluginFactory; status: Status; factoryParameter: PluginConfig): PluginBase; cdecl;
	PluginModule_doCleanPtr = procedure(this: PluginModule); cdecl;
	PluginManager_registerPluginFactoryPtr = procedure(this: PluginManager; pluginType: Cardinal; defaultName: PAnsiChar; factory: PluginFactory); cdecl;
	PluginManager_registerModulePtr = procedure(this: PluginManager; cleanup: PluginModule); cdecl;
	PluginManager_unregisterModulePtr = procedure(this: PluginManager; cleanup: PluginModule); cdecl;
	PluginManager_getPluginsPtr = function(this: PluginManager; status: Status; pluginType: Cardinal; namesList: PAnsiChar; firebirdConf: FirebirdConf): PluginSet; cdecl;
	PluginManager_getConfigPtr = function(this: PluginManager; status: Status; filename: PAnsiChar): Config; cdecl;
	PluginManager_releasePluginPtr = procedure(this: PluginManager; plugin: PluginBase); cdecl;
	CryptKey_setSymmetricPtr = procedure(this: CryptKey; status: Status; type_: PAnsiChar; keyLength: Cardinal; key: Pointer); cdecl;
	CryptKey_setAsymmetricPtr = procedure(this: CryptKey; status: Status; type_: PAnsiChar; encryptKeyLength: Cardinal; encryptKey: Pointer; decryptKeyLength: Cardinal; decryptKey: Pointer); cdecl;
	CryptKey_getEncryptKeyPtr = function(this: CryptKey; length: CardinalPtr): Pointer; cdecl;
	CryptKey_getDecryptKeyPtr = function(this: CryptKey; length: CardinalPtr): Pointer; cdecl;
	ConfigManager_getDirectoryPtr = function(this: ConfigManager; code: Cardinal): PAnsiChar; cdecl;
	ConfigManager_getFirebirdConfPtr = function(this: ConfigManager): FirebirdConf; cdecl;
	ConfigManager_getDatabaseConfPtr = function(this: ConfigManager; dbName: PAnsiChar): FirebirdConf; cdecl;
	ConfigManager_getPluginConfigPtr = function(this: ConfigManager; configuredPlugin: PAnsiChar): Config; cdecl;
	ConfigManager_getInstallDirectoryPtr = function(this: ConfigManager): PAnsiChar; cdecl;
	ConfigManager_getRootDirectoryPtr = function(this: ConfigManager): PAnsiChar; cdecl;
	EventCallback_eventCallbackFunctionPtr = procedure(this: EventCallback; length: Cardinal; events: BytePtr); cdecl;
	Blob_getInfoPtr = procedure(this: Blob; status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr); cdecl;
	Blob_getSegmentPtr = function(this: Blob; status: Status; bufferLength: Cardinal; buffer: Pointer; segmentLength: CardinalPtr): Integer; cdecl;
	Blob_putSegmentPtr = procedure(this: Blob; status: Status; length: Cardinal; buffer: Pointer); cdecl;
	Blob_cancelPtr = procedure(this: Blob; status: Status); cdecl;
	Blob_closePtr = procedure(this: Blob; status: Status); cdecl;
	Blob_seekPtr = function(this: Blob; status: Status; mode: Integer; offset: Integer): Integer; cdecl;
	Transaction_getInfoPtr = procedure(this: Transaction; status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr); cdecl;
	Transaction_preparePtr = procedure(this: Transaction; status: Status; msgLength: Cardinal; message: BytePtr); cdecl;
	Transaction_commitPtr = procedure(this: Transaction; status: Status); cdecl;
	Transaction_commitRetainingPtr = procedure(this: Transaction; status: Status); cdecl;
	Transaction_rollbackPtr = procedure(this: Transaction; status: Status); cdecl;
	Transaction_rollbackRetainingPtr = procedure(this: Transaction; status: Status); cdecl;
	Transaction_disconnectPtr = procedure(this: Transaction; status: Status); cdecl;
	Transaction_joinPtr = function(this: Transaction; status: Status; transaction: Transaction): Transaction; cdecl;
	Transaction_validatePtr = function(this: Transaction; status: Status; attachment: Attachment): Transaction; cdecl;
	Transaction_enterDtcPtr = function(this: Transaction; status: Status): Transaction; cdecl;
	MessageMetadata_getCountPtr = function(this: MessageMetadata; status: Status): Cardinal; cdecl;
	MessageMetadata_getFieldPtr = function(this: MessageMetadata; status: Status; index: Cardinal): PAnsiChar; cdecl;
	MessageMetadata_getRelationPtr = function(this: MessageMetadata; status: Status; index: Cardinal): PAnsiChar; cdecl;
	MessageMetadata_getOwnerPtr = function(this: MessageMetadata; status: Status; index: Cardinal): PAnsiChar; cdecl;
	MessageMetadata_getAliasPtr = function(this: MessageMetadata; status: Status; index: Cardinal): PAnsiChar; cdecl;
	MessageMetadata_getTypePtr = function(this: MessageMetadata; status: Status; index: Cardinal): Cardinal; cdecl;
	MessageMetadata_isNullablePtr = function(this: MessageMetadata; status: Status; index: Cardinal): Boolean; cdecl;
	MessageMetadata_getSubTypePtr = function(this: MessageMetadata; status: Status; index: Cardinal): Integer; cdecl;
	MessageMetadata_getLengthPtr = function(this: MessageMetadata; status: Status; index: Cardinal): Cardinal; cdecl;
	MessageMetadata_getScalePtr = function(this: MessageMetadata; status: Status; index: Cardinal): Integer; cdecl;
	MessageMetadata_getCharSetPtr = function(this: MessageMetadata; status: Status; index: Cardinal): Cardinal; cdecl;
	MessageMetadata_getOffsetPtr = function(this: MessageMetadata; status: Status; index: Cardinal): Cardinal; cdecl;
	MessageMetadata_getNullOffsetPtr = function(this: MessageMetadata; status: Status; index: Cardinal): Cardinal; cdecl;
	MessageMetadata_getBuilderPtr = function(this: MessageMetadata; status: Status): MetadataBuilder; cdecl;
	MessageMetadata_getMessageLengthPtr = function(this: MessageMetadata; status: Status): Cardinal; cdecl;
	MetadataBuilder_setTypePtr = procedure(this: MetadataBuilder; status: Status; index: Cardinal; type_: Cardinal); cdecl;
	MetadataBuilder_setSubTypePtr = procedure(this: MetadataBuilder; status: Status; index: Cardinal; subType: Integer); cdecl;
	MetadataBuilder_setLengthPtr = procedure(this: MetadataBuilder; status: Status; index: Cardinal; length: Cardinal); cdecl;
	MetadataBuilder_setCharSetPtr = procedure(this: MetadataBuilder; status: Status; index: Cardinal; charSet: Cardinal); cdecl;
	MetadataBuilder_setScalePtr = procedure(this: MetadataBuilder; status: Status; index: Cardinal; scale: Cardinal); cdecl;
	MetadataBuilder_truncatePtr = procedure(this: MetadataBuilder; status: Status; count: Cardinal); cdecl;
	MetadataBuilder_moveNameToIndexPtr = procedure(this: MetadataBuilder; status: Status; name: PAnsiChar; index: Cardinal); cdecl;
	MetadataBuilder_removePtr = procedure(this: MetadataBuilder; status: Status; index: Cardinal); cdecl;
	MetadataBuilder_addFieldPtr = function(this: MetadataBuilder; status: Status): Cardinal; cdecl;
	MetadataBuilder_getMetadataPtr = function(this: MetadataBuilder; status: Status): MessageMetadata; cdecl;
	ResultSet_fetchNextPtr = function(this: ResultSet; status: Status; message: Pointer): Integer; cdecl;
	ResultSet_fetchPriorPtr = function(this: ResultSet; status: Status; message: Pointer): Integer; cdecl;
	ResultSet_fetchFirstPtr = function(this: ResultSet; status: Status; message: Pointer): Integer; cdecl;
	ResultSet_fetchLastPtr = function(this: ResultSet; status: Status; message: Pointer): Integer; cdecl;
	ResultSet_fetchAbsolutePtr = function(this: ResultSet; status: Status; position: Integer; message: Pointer): Integer; cdecl;
	ResultSet_fetchRelativePtr = function(this: ResultSet; status: Status; offset: Integer; message: Pointer): Integer; cdecl;
	ResultSet_isEofPtr = function(this: ResultSet; status: Status): Boolean; cdecl;
	ResultSet_isBofPtr = function(this: ResultSet; status: Status): Boolean; cdecl;
	ResultSet_getMetadataPtr = function(this: ResultSet; status: Status): MessageMetadata; cdecl;
	ResultSet_closePtr = procedure(this: ResultSet; status: Status); cdecl;
	ResultSet_setDelayedOutputFormatPtr = procedure(this: ResultSet; status: Status; format: MessageMetadata); cdecl;
	Statement_getInfoPtr = procedure(this: Statement; status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr); cdecl;
	Statement_getTypePtr = function(this: Statement; status: Status): Cardinal; cdecl;
	Statement_getPlanPtr = function(this: Statement; status: Status; detailed: Boolean): PAnsiChar; cdecl;
	Statement_getAffectedRecordsPtr = function(this: Statement; status: Status): QWord; cdecl;
	Statement_getInputMetadataPtr = function(this: Statement; status: Status): MessageMetadata; cdecl;
	Statement_getOutputMetadataPtr = function(this: Statement; status: Status): MessageMetadata; cdecl;
	Statement_executePtr = function(this: Statement; status: Status; transaction: Transaction; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; outBuffer: Pointer): Transaction; cdecl;
	Statement_openCursorPtr = function(this: Statement; status: Status; transaction: Transaction; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; flags: Cardinal): ResultSet; cdecl;
	Statement_setCursorNamePtr = procedure(this: Statement; status: Status; name: PAnsiChar); cdecl;
	Statement_freePtr = procedure(this: Statement; status: Status); cdecl;
	Statement_getFlagsPtr = function(this: Statement; status: Status): Cardinal; cdecl;
	Request_receivePtr = procedure(this: Request; status: Status; level: Integer; msgType: Cardinal; length: Cardinal; message: BytePtr); cdecl;
	Request_sendPtr = procedure(this: Request; status: Status; level: Integer; msgType: Cardinal; length: Cardinal; message: BytePtr); cdecl;
	Request_getInfoPtr = procedure(this: Request; status: Status; level: Integer; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr); cdecl;
	Request_startPtr = procedure(this: Request; status: Status; tra: Transaction; level: Integer); cdecl;
	Request_startAndSendPtr = procedure(this: Request; status: Status; tra: Transaction; level: Integer; msgType: Cardinal; length: Cardinal; message: BytePtr); cdecl;
	Request_unwindPtr = procedure(this: Request; status: Status; level: Integer); cdecl;
	Request_freePtr = procedure(this: Request; status: Status); cdecl;
	Events_cancelPtr = procedure(this: Events; status: Status); cdecl;
	Attachment_getInfoPtr = procedure(this: Attachment; status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr); cdecl;
	Attachment_startTransactionPtr = function(this: Attachment; status: Status; tpbLength: Cardinal; tpb: BytePtr): Transaction; cdecl;
	Attachment_reconnectTransactionPtr = function(this: Attachment; status: Status; length: Cardinal; id: BytePtr): Transaction; cdecl;
	Attachment_compileRequestPtr = function(this: Attachment; status: Status; blrLength: Cardinal; blr: BytePtr): Request; cdecl;
	Attachment_transactRequestPtr = procedure(this: Attachment; status: Status; transaction: Transaction; blrLength: Cardinal; blr: BytePtr; inMsgLength: Cardinal; inMsg: BytePtr; outMsgLength: Cardinal; outMsg: BytePtr); cdecl;
	Attachment_createBlobPtr = function(this: Attachment; status: Status; transaction: Transaction; id: ISC_QUADPtr; bpbLength: Cardinal; bpb: BytePtr): Blob; cdecl;
	Attachment_openBlobPtr = function(this: Attachment; status: Status; transaction: Transaction; id: ISC_QUADPtr; bpbLength: Cardinal; bpb: BytePtr): Blob; cdecl;
	Attachment_getSlicePtr = function(this: Attachment; status: Status; transaction: Transaction; id: ISC_QUADPtr; sdlLength: Cardinal; sdl: BytePtr; paramLength: Cardinal; param: BytePtr; sliceLength: Integer; slice: BytePtr): Integer; cdecl;
	Attachment_putSlicePtr = procedure(this: Attachment; status: Status; transaction: Transaction; id: ISC_QUADPtr; sdlLength: Cardinal; sdl: BytePtr; paramLength: Cardinal; param: BytePtr; sliceLength: Integer; slice: BytePtr); cdecl;
	Attachment_executeDynPtr = procedure(this: Attachment; status: Status; transaction: Transaction; length: Cardinal; dyn: BytePtr); cdecl;
	Attachment_preparePtr = function(this: Attachment; status: Status; tra: Transaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; flags: Cardinal): Statement; cdecl;
	Attachment_executePtr = function(this: Attachment; status: Status; transaction: Transaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; outBuffer: Pointer): Transaction; cdecl;
	Attachment_openCursorPtr = function(this: Attachment; status: Status; transaction: Transaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; cursorName: PAnsiChar; cursorFlags: Cardinal): ResultSet; cdecl;
	Attachment_queEventsPtr = function(this: Attachment; status: Status; callback: EventCallback; length: Cardinal; events: BytePtr): Events; cdecl;
	Attachment_cancelOperationPtr = procedure(this: Attachment; status: Status; option: Integer); cdecl;
	Attachment_pingPtr = procedure(this: Attachment; status: Status); cdecl;
	Attachment_detachPtr = procedure(this: Attachment; status: Status); cdecl;
	Attachment_dropDatabasePtr = procedure(this: Attachment; status: Status); cdecl;
	Service_detachPtr = procedure(this: Service; status: Status); cdecl;
	Service_queryPtr = procedure(this: Service; status: Status; sendLength: Cardinal; sendItems: BytePtr; receiveLength: Cardinal; receiveItems: BytePtr; bufferLength: Cardinal; buffer: BytePtr); cdecl;
	Service_startPtr = procedure(this: Service; status: Status; spbLength: Cardinal; spb: BytePtr); cdecl;
	Provider_attachDatabasePtr = function(this: Provider; status: Status; fileName: PAnsiChar; dpbLength: Cardinal; dpb: BytePtr): Attachment; cdecl;
	Provider_createDatabasePtr = function(this: Provider; status: Status; fileName: PAnsiChar; dpbLength: Cardinal; dpb: BytePtr): Attachment; cdecl;
	Provider_attachServiceManagerPtr = function(this: Provider; status: Status; service: PAnsiChar; spbLength: Cardinal; spb: BytePtr): Service; cdecl;
	Provider_shutdownPtr = procedure(this: Provider; status: Status; timeout: Cardinal; reason: Integer); cdecl;
	Provider_setDbCryptCallbackPtr = procedure(this: Provider; status: Status; cryptCallback: CryptKeyCallback); cdecl;
	DtcStart_addAttachmentPtr = procedure(this: DtcStart; status: Status; att: Attachment); cdecl;
	DtcStart_addWithTpbPtr = procedure(this: DtcStart; status: Status; att: Attachment; length: Cardinal; tpb: BytePtr); cdecl;
	DtcStart_startPtr = function(this: DtcStart; status: Status): Transaction; cdecl;
	Dtc_joinPtr = function(this: Dtc; status: Status; one: Transaction; two: Transaction): Transaction; cdecl;
	Dtc_startBuilderPtr = function(this: Dtc; status: Status): DtcStart; cdecl;
	Writer_resetPtr = procedure(this: Writer); cdecl;
	Writer_addPtr = procedure(this: Writer; status: Status; name: PAnsiChar); cdecl;
	Writer_setTypePtr = procedure(this: Writer; status: Status; value: PAnsiChar); cdecl;
	Writer_setDbPtr = procedure(this: Writer; status: Status; value: PAnsiChar); cdecl;
	ServerBlock_getLoginPtr = function(this: ServerBlock): PAnsiChar; cdecl;
	ServerBlock_getDataPtr = function(this: ServerBlock; length: CardinalPtr): BytePtr; cdecl;
	ServerBlock_putDataPtr = procedure(this: ServerBlock; status: Status; length: Cardinal; data: Pointer); cdecl;
	ServerBlock_newKeyPtr = function(this: ServerBlock; status: Status): CryptKey; cdecl;
	ClientBlock_getLoginPtr = function(this: ClientBlock): PAnsiChar; cdecl;
	ClientBlock_getPasswordPtr = function(this: ClientBlock): PAnsiChar; cdecl;
	ClientBlock_getDataPtr = function(this: ClientBlock; length: CardinalPtr): BytePtr; cdecl;
	ClientBlock_putDataPtr = procedure(this: ClientBlock; status: Status; length: Cardinal; data: Pointer); cdecl;
	ClientBlock_newKeyPtr = function(this: ClientBlock; status: Status): CryptKey; cdecl;
	Server_authenticatePtr = function(this: Server; status: Status; sBlock: ServerBlock; writerInterface: Writer): Integer; cdecl;
	Client_authenticatePtr = function(this: Client; status: Status; cBlock: ClientBlock): Integer; cdecl;
	UserField_enteredPtr = function(this: UserField): Integer; cdecl;
	UserField_specifiedPtr = function(this: UserField): Integer; cdecl;
	UserField_setEnteredPtr = procedure(this: UserField; status: Status; newValue: Integer); cdecl;
	CharUserField_getPtr = function(this: CharUserField): PAnsiChar; cdecl;
	CharUserField_set_Ptr = procedure(this: CharUserField; status: Status; newValue: PAnsiChar); cdecl;
	IntUserField_getPtr = function(this: IntUserField): Integer; cdecl;
	IntUserField_set_Ptr = procedure(this: IntUserField; status: Status; newValue: Integer); cdecl;
	User_operationPtr = function(this: User): Integer; cdecl;
	User_userNamePtr = function(this: User): CharUserField; cdecl;
	User_passwordPtr = function(this: User): CharUserField; cdecl;
	User_firstNamePtr = function(this: User): CharUserField; cdecl;
	User_lastNamePtr = function(this: User): CharUserField; cdecl;
	User_middleNamePtr = function(this: User): CharUserField; cdecl;
	User_commentPtr = function(this: User): CharUserField; cdecl;
	User_attributesPtr = function(this: User): CharUserField; cdecl;
	User_activePtr = function(this: User): IntUserField; cdecl;
	User_adminPtr = function(this: User): IntUserField; cdecl;
	User_clearPtr = procedure(this: User; status: Status); cdecl;
	ListUsers_listPtr = procedure(this: ListUsers; status: Status; user: User); cdecl;
	LogonInfo_namePtr = function(this: LogonInfo): PAnsiChar; cdecl;
	LogonInfo_rolePtr = function(this: LogonInfo): PAnsiChar; cdecl;
	LogonInfo_networkProtocolPtr = function(this: LogonInfo): PAnsiChar; cdecl;
	LogonInfo_remoteAddressPtr = function(this: LogonInfo): PAnsiChar; cdecl;
	LogonInfo_authBlockPtr = function(this: LogonInfo; length: CardinalPtr): BytePtr; cdecl;
	Management_startPtr = procedure(this: Management; status: Status; logonInfo: LogonInfo); cdecl;
	Management_executePtr = function(this: Management; status: Status; user: User; callback: ListUsers): Integer; cdecl;
	Management_commitPtr = procedure(this: Management; status: Status); cdecl;
	Management_rollbackPtr = procedure(this: Management; status: Status); cdecl;
	WireCryptPlugin_getKnownTypesPtr = function(this: WireCryptPlugin; status: Status): PAnsiChar; cdecl;
	WireCryptPlugin_setKeyPtr = procedure(this: WireCryptPlugin; status: Status; key: CryptKey); cdecl;
	WireCryptPlugin_encryptPtr = procedure(this: WireCryptPlugin; status: Status; length: Cardinal; from: Pointer; to_: Pointer); cdecl;
	WireCryptPlugin_decryptPtr = procedure(this: WireCryptPlugin; status: Status; length: Cardinal; from: Pointer; to_: Pointer); cdecl;
	CryptKeyCallback_callbackPtr = function(this: CryptKeyCallback; dataLength: Cardinal; data: Pointer; bufferLength: Cardinal; buffer: Pointer): Cardinal; cdecl;
	KeyHolderPlugin_keyCallbackPtr = function(this: KeyHolderPlugin; status: Status; callback: CryptKeyCallback): Integer; cdecl;
	KeyHolderPlugin_keyHandlePtr = function(this: KeyHolderPlugin; status: Status; keyName: PAnsiChar): CryptKeyCallback; cdecl;
	DbCryptPlugin_setKeyPtr = procedure(this: DbCryptPlugin; status: Status; length: Cardinal; sources: KeyHolderPluginPtr); cdecl;
	DbCryptPlugin_encryptPtr = procedure(this: DbCryptPlugin; status: Status; length: Cardinal; from: Pointer; to_: Pointer); cdecl;
	DbCryptPlugin_decryptPtr = procedure(this: DbCryptPlugin; status: Status; length: Cardinal; from: Pointer; to_: Pointer); cdecl;
	ExternalContext_getMasterPtr = function(this: ExternalContext): Master; cdecl;
	ExternalContext_getEnginePtr = function(this: ExternalContext; status: Status): ExternalEngine; cdecl;
	ExternalContext_getAttachmentPtr = function(this: ExternalContext; status: Status): Attachment; cdecl;
	ExternalContext_getTransactionPtr = function(this: ExternalContext; status: Status): Transaction; cdecl;
	ExternalContext_getUserNamePtr = function(this: ExternalContext): PAnsiChar; cdecl;
	ExternalContext_getDatabaseNamePtr = function(this: ExternalContext): PAnsiChar; cdecl;
	ExternalContext_getClientCharSetPtr = function(this: ExternalContext): PAnsiChar; cdecl;
	ExternalContext_obtainInfoCodePtr = function(this: ExternalContext): Integer; cdecl;
	ExternalContext_getInfoPtr = function(this: ExternalContext; code: Integer): Pointer; cdecl;
	ExternalContext_setInfoPtr = function(this: ExternalContext; code: Integer; value: Pointer): Pointer; cdecl;
	ExternalResultSet_fetchPtr = function(this: ExternalResultSet; status: Status): Boolean; cdecl;
	ExternalFunction_getCharSetPtr = procedure(this: ExternalFunction; status: Status; context: ExternalContext; name: PAnsiChar; nameSize: Cardinal); cdecl;
	ExternalFunction_executePtr = procedure(this: ExternalFunction; status: Status; context: ExternalContext; inMsg: Pointer; outMsg: Pointer); cdecl;
	ExternalProcedure_getCharSetPtr = procedure(this: ExternalProcedure; status: Status; context: ExternalContext; name: PAnsiChar; nameSize: Cardinal); cdecl;
	ExternalProcedure_openPtr = function(this: ExternalProcedure; status: Status; context: ExternalContext; inMsg: Pointer; outMsg: Pointer): ExternalResultSet; cdecl;
	ExternalTrigger_getCharSetPtr = procedure(this: ExternalTrigger; status: Status; context: ExternalContext; name: PAnsiChar; nameSize: Cardinal); cdecl;
	ExternalTrigger_executePtr = procedure(this: ExternalTrigger; status: Status; context: ExternalContext; action: Cardinal; oldMsg: Pointer; newMsg: Pointer); cdecl;
	RoutineMetadata_getPackagePtr = function(this: RoutineMetadata; status: Status): PAnsiChar; cdecl;
	RoutineMetadata_getNamePtr = function(this: RoutineMetadata; status: Status): PAnsiChar; cdecl;
	RoutineMetadata_getEntryPointPtr = function(this: RoutineMetadata; status: Status): PAnsiChar; cdecl;
	RoutineMetadata_getBodyPtr = function(this: RoutineMetadata; status: Status): PAnsiChar; cdecl;
	RoutineMetadata_getInputMetadataPtr = function(this: RoutineMetadata; status: Status): MessageMetadata; cdecl;
	RoutineMetadata_getOutputMetadataPtr = function(this: RoutineMetadata; status: Status): MessageMetadata; cdecl;
	RoutineMetadata_getTriggerMetadataPtr = function(this: RoutineMetadata; status: Status): MessageMetadata; cdecl;
	RoutineMetadata_getTriggerTablePtr = function(this: RoutineMetadata; status: Status): PAnsiChar; cdecl;
	RoutineMetadata_getTriggerTypePtr = function(this: RoutineMetadata; status: Status): Cardinal; cdecl;
	ExternalEngine_openPtr = procedure(this: ExternalEngine; status: Status; context: ExternalContext; charSet: PAnsiChar; charSetSize: Cardinal); cdecl;
	ExternalEngine_openAttachmentPtr = procedure(this: ExternalEngine; status: Status; context: ExternalContext); cdecl;
	ExternalEngine_closeAttachmentPtr = procedure(this: ExternalEngine; status: Status; context: ExternalContext); cdecl;
	ExternalEngine_makeFunctionPtr = function(this: ExternalEngine; status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder): ExternalFunction; cdecl;
	ExternalEngine_makeProcedurePtr = function(this: ExternalEngine; status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder): ExternalProcedure; cdecl;
	ExternalEngine_makeTriggerPtr = function(this: ExternalEngine; status: Status; context: ExternalContext; metadata: RoutineMetadata; fieldsBuilder: MetadataBuilder): ExternalTrigger; cdecl;
	Timer_handlerPtr = procedure(this: Timer); cdecl;
	TimerControl_startPtr = procedure(this: TimerControl; status: Status; timer: Timer; microSeconds: QWord); cdecl;
	TimerControl_stopPtr = procedure(this: TimerControl; status: Status; timer: Timer); cdecl;
	VersionCallback_callbackPtr = procedure(this: VersionCallback; status: Status; text: PAnsiChar); cdecl;
	Util_getFbVersionPtr = procedure(this: Util; status: Status; att: Attachment; callback: VersionCallback); cdecl;
	Util_loadBlobPtr = procedure(this: Util; status: Status; blobId: ISC_QUADPtr; att: Attachment; tra: Transaction; file_: PAnsiChar; txt: Boolean); cdecl;
	Util_dumpBlobPtr = procedure(this: Util; status: Status; blobId: ISC_QUADPtr; att: Attachment; tra: Transaction; file_: PAnsiChar; txt: Boolean); cdecl;
	Util_getPerfCountersPtr = procedure(this: Util; status: Status; att: Attachment; countersSet: PAnsiChar; counters: Int64Ptr); cdecl;
	Util_executeCreateDatabasePtr = function(this: Util; status: Status; stmtLength: Cardinal; creatDBstatement: PAnsiChar; dialect: Cardinal; stmtIsCreateDb: BooleanPtr): Attachment; cdecl;
	Util_decodeDatePtr = procedure(this: Util; date: ISC_DATE; year: CardinalPtr; month: CardinalPtr; day: CardinalPtr); cdecl;
	Util_decodeTimePtr = procedure(this: Util; time: ISC_TIME; hours: CardinalPtr; minutes: CardinalPtr; seconds: CardinalPtr; fractions: CardinalPtr); cdecl;
	Util_encodeDatePtr = function(this: Util; year: Cardinal; month: Cardinal; day: Cardinal): ISC_DATE; cdecl;
	Util_encodeTimePtr = function(this: Util; hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal): ISC_TIME; cdecl;
	Util_formatStatusPtr = function(this: Util; buffer: PAnsiChar; bufferSize: Cardinal; status: Status): Cardinal; cdecl;
	Util_getClientVersionPtr = function(this: Util): Cardinal; cdecl;
	Util_getXpbBuilderPtr = function(this: Util; status: Status; kind: Cardinal; buf: BytePtr; len: Cardinal): XpbBuilder; cdecl;
	XpbBuilder_clearPtr = procedure(this: XpbBuilder; status: Status); cdecl;
	XpbBuilder_removeCurrentPtr = procedure(this: XpbBuilder; status: Status); cdecl;
	XpbBuilder_insertIntPtr = procedure(this: XpbBuilder; status: Status; tag: Byte; value: Integer); cdecl;
	XpbBuilder_insertBigIntPtr = procedure(this: XpbBuilder; status: Status; tag: Byte; value: Int64); cdecl;
	XpbBuilder_insertBytesPtr = procedure(this: XpbBuilder; status: Status; tag: Byte; bytes: Pointer; length: Cardinal); cdecl;
	XpbBuilder_insertStringPtr = procedure(this: XpbBuilder; status: Status; tag: Byte; str: PAnsiChar); cdecl;
	XpbBuilder_insertTagPtr = procedure(this: XpbBuilder; status: Status; tag: Byte); cdecl;
	XpbBuilder_isEofPtr = function(this: XpbBuilder; status: Status): Boolean; cdecl;
	XpbBuilder_moveNextPtr = procedure(this: XpbBuilder; status: Status); cdecl;
	XpbBuilder_rewindPtr = procedure(this: XpbBuilder; status: Status); cdecl;
	XpbBuilder_findFirstPtr = function(this: XpbBuilder; status: Status; tag: Byte): Boolean; cdecl;
	XpbBuilder_findNextPtr = function(this: XpbBuilder; status: Status): Boolean; cdecl;
	XpbBuilder_getTagPtr = function(this: XpbBuilder; status: Status): Byte; cdecl;
	XpbBuilder_getLengthPtr = function(this: XpbBuilder; status: Status): Cardinal; cdecl;
	XpbBuilder_getIntPtr = function(this: XpbBuilder; status: Status): Integer; cdecl;
	XpbBuilder_getBigIntPtr = function(this: XpbBuilder; status: Status): Int64; cdecl;
	XpbBuilder_getStringPtr = function(this: XpbBuilder; status: Status): PAnsiChar; cdecl;
	XpbBuilder_getBytesPtr = function(this: XpbBuilder; status: Status): BytePtr; cdecl;
	XpbBuilder_getBufferLengthPtr = function(this: XpbBuilder; status: Status): Cardinal; cdecl;
	XpbBuilder_getBufferPtr = function(this: XpbBuilder; status: Status): BytePtr; cdecl;
	TraceConnection_getKindPtr = function(this: TraceConnection): Cardinal; cdecl;
	TraceConnection_getProcessIDPtr = function(this: TraceConnection): Integer; cdecl;
	TraceConnection_getUserNamePtr = function(this: TraceConnection): PAnsiChar; cdecl;
	TraceConnection_getRoleNamePtr = function(this: TraceConnection): PAnsiChar; cdecl;
	TraceConnection_getCharSetPtr = function(this: TraceConnection): PAnsiChar; cdecl;
	TraceConnection_getRemoteProtocolPtr = function(this: TraceConnection): PAnsiChar; cdecl;
	TraceConnection_getRemoteAddressPtr = function(this: TraceConnection): PAnsiChar; cdecl;
	TraceConnection_getRemoteProcessIDPtr = function(this: TraceConnection): Integer; cdecl;
	TraceConnection_getRemoteProcessNamePtr = function(this: TraceConnection): PAnsiChar; cdecl;
	TraceDatabaseConnection_getConnectionIDPtr = function(this: TraceDatabaseConnection): Integer; cdecl;
	TraceDatabaseConnection_getDatabaseNamePtr = function(this: TraceDatabaseConnection): PAnsiChar; cdecl;
	TraceTransaction_getTransactionIDPtr = function(this: TraceTransaction): Cardinal; cdecl;
	TraceTransaction_getReadOnlyPtr = function(this: TraceTransaction): Boolean; cdecl;
	TraceTransaction_getWaitPtr = function(this: TraceTransaction): Integer; cdecl;
	TraceTransaction_getIsolationPtr = function(this: TraceTransaction): Cardinal; cdecl;
	TraceTransaction_getPerfPtr = function(this: TraceTransaction): PerformanceInfoPtr; cdecl;
	TraceParams_getCountPtr = function(this: TraceParams): Cardinal; cdecl;
	TraceParams_getParamPtr = function(this: TraceParams; idx: Cardinal): dscPtr; cdecl;
	TraceStatement_getStmtIDPtr = function(this: TraceStatement): Integer; cdecl;
	TraceStatement_getPerfPtr = function(this: TraceStatement): PerformanceInfoPtr; cdecl;
	TraceSQLStatement_getTextPtr = function(this: TraceSQLStatement): PAnsiChar; cdecl;
	TraceSQLStatement_getPlanPtr = function(this: TraceSQLStatement): PAnsiChar; cdecl;
	TraceSQLStatement_getInputsPtr = function(this: TraceSQLStatement): TraceParams; cdecl;
	TraceSQLStatement_getTextUTF8Ptr = function(this: TraceSQLStatement): PAnsiChar; cdecl;
	TraceSQLStatement_getExplainedPlanPtr = function(this: TraceSQLStatement): PAnsiChar; cdecl;
	TraceBLRStatement_getDataPtr = function(this: TraceBLRStatement): BytePtr; cdecl;
	TraceBLRStatement_getDataLengthPtr = function(this: TraceBLRStatement): Cardinal; cdecl;
	TraceBLRStatement_getTextPtr = function(this: TraceBLRStatement): PAnsiChar; cdecl;
	TraceDYNRequest_getDataPtr = function(this: TraceDYNRequest): BytePtr; cdecl;
	TraceDYNRequest_getDataLengthPtr = function(this: TraceDYNRequest): Cardinal; cdecl;
	TraceDYNRequest_getTextPtr = function(this: TraceDYNRequest): PAnsiChar; cdecl;
	TraceContextVariable_getNameSpacePtr = function(this: TraceContextVariable): PAnsiChar; cdecl;
	TraceContextVariable_getVarNamePtr = function(this: TraceContextVariable): PAnsiChar; cdecl;
	TraceContextVariable_getVarValuePtr = function(this: TraceContextVariable): PAnsiChar; cdecl;
	TraceProcedure_getProcNamePtr = function(this: TraceProcedure): PAnsiChar; cdecl;
	TraceProcedure_getInputsPtr = function(this: TraceProcedure): TraceParams; cdecl;
	TraceProcedure_getPerfPtr = function(this: TraceProcedure): PerformanceInfoPtr; cdecl;
	TraceFunction_getFuncNamePtr = function(this: TraceFunction): PAnsiChar; cdecl;
	TraceFunction_getInputsPtr = function(this: TraceFunction): TraceParams; cdecl;
	TraceFunction_getResultPtr = function(this: TraceFunction): TraceParams; cdecl;
	TraceFunction_getPerfPtr = function(this: TraceFunction): PerformanceInfoPtr; cdecl;
	TraceTrigger_getTriggerNamePtr = function(this: TraceTrigger): PAnsiChar; cdecl;
	TraceTrigger_getRelationNamePtr = function(this: TraceTrigger): PAnsiChar; cdecl;
	TraceTrigger_getActionPtr = function(this: TraceTrigger): Integer; cdecl;
	TraceTrigger_getWhichPtr = function(this: TraceTrigger): Integer; cdecl;
	TraceTrigger_getPerfPtr = function(this: TraceTrigger): PerformanceInfoPtr; cdecl;
	TraceServiceConnection_getServiceIDPtr = function(this: TraceServiceConnection): Pointer; cdecl;
	TraceServiceConnection_getServiceMgrPtr = function(this: TraceServiceConnection): PAnsiChar; cdecl;
	TraceServiceConnection_getServiceNamePtr = function(this: TraceServiceConnection): PAnsiChar; cdecl;
	TraceStatusVector_hasErrorPtr = function(this: TraceStatusVector): Boolean; cdecl;
	TraceStatusVector_hasWarningPtr = function(this: TraceStatusVector): Boolean; cdecl;
	TraceStatusVector_getStatusPtr = function(this: TraceStatusVector): Status; cdecl;
	TraceStatusVector_getTextPtr = function(this: TraceStatusVector): PAnsiChar; cdecl;
	TraceSweepInfo_getOITPtr = function(this: TraceSweepInfo): QWord; cdecl;
	TraceSweepInfo_getOSTPtr = function(this: TraceSweepInfo): QWord; cdecl;
	TraceSweepInfo_getOATPtr = function(this: TraceSweepInfo): QWord; cdecl;
	TraceSweepInfo_getNextPtr = function(this: TraceSweepInfo): QWord; cdecl;
	TraceSweepInfo_getPerfPtr = function(this: TraceSweepInfo): PerformanceInfoPtr; cdecl;
	TraceLogWriter_writePtr = function(this: TraceLogWriter; buf: Pointer; size: Cardinal): Cardinal; cdecl;
	TraceInitInfo_getConfigTextPtr = function(this: TraceInitInfo): PAnsiChar; cdecl;
	TraceInitInfo_getTraceSessionIDPtr = function(this: TraceInitInfo): Integer; cdecl;
	TraceInitInfo_getTraceSessionNamePtr = function(this: TraceInitInfo): PAnsiChar; cdecl;
	TraceInitInfo_getFirebirdRootDirectoryPtr = function(this: TraceInitInfo): PAnsiChar; cdecl;
	TraceInitInfo_getDatabaseNamePtr = function(this: TraceInitInfo): PAnsiChar; cdecl;
	TraceInitInfo_getConnectionPtr = function(this: TraceInitInfo): TraceDatabaseConnection; cdecl;
	TraceInitInfo_getLogWriterPtr = function(this: TraceInitInfo): TraceLogWriter; cdecl;
	TracePlugin_trace_get_errorPtr = function(this: TracePlugin): PAnsiChar; cdecl;
	TracePlugin_trace_attachPtr = function(this: TracePlugin; connection: TraceDatabaseConnection; create_db: Boolean; att_result: Cardinal): Boolean; cdecl;
	TracePlugin_trace_detachPtr = function(this: TracePlugin; connection: TraceDatabaseConnection; drop_db: Boolean): Boolean; cdecl;
	TracePlugin_trace_transaction_startPtr = function(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; tpb_length: Cardinal; tpb: BytePtr; tra_result: Cardinal): Boolean; cdecl;
	TracePlugin_trace_transaction_endPtr = function(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; commit: Boolean; retain_context: Boolean; tra_result: Cardinal): Boolean; cdecl;
	TracePlugin_trace_proc_executePtr = function(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; procedure_: TraceProcedure; started: Boolean; proc_result: Cardinal): Boolean; cdecl;
	TracePlugin_trace_trigger_executePtr = function(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; trigger: TraceTrigger; started: Boolean; trig_result: Cardinal): Boolean; cdecl;
	TracePlugin_trace_set_contextPtr = function(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; variable: TraceContextVariable): Boolean; cdecl;
	TracePlugin_trace_dsql_preparePtr = function(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceSQLStatement; time_millis: Int64; req_result: Cardinal): Boolean; cdecl;
	TracePlugin_trace_dsql_freePtr = function(this: TracePlugin; connection: TraceDatabaseConnection; statement: TraceSQLStatement; option: Cardinal): Boolean; cdecl;
	TracePlugin_trace_dsql_executePtr = function(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceSQLStatement; started: Boolean; req_result: Cardinal): Boolean; cdecl;
	TracePlugin_trace_blr_compilePtr = function(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceBLRStatement; time_millis: Int64; req_result: Cardinal): Boolean; cdecl;
	TracePlugin_trace_blr_executePtr = function(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceBLRStatement; req_result: Cardinal): Boolean; cdecl;
	TracePlugin_trace_dyn_executePtr = function(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; request: TraceDYNRequest; time_millis: Int64; req_result: Cardinal): Boolean; cdecl;
	TracePlugin_trace_service_attachPtr = function(this: TracePlugin; service: TraceServiceConnection; att_result: Cardinal): Boolean; cdecl;
	TracePlugin_trace_service_startPtr = function(this: TracePlugin; service: TraceServiceConnection; switches_length: Cardinal; switches: PAnsiChar; start_result: Cardinal): Boolean; cdecl;
	TracePlugin_trace_service_queryPtr = function(this: TracePlugin; service: TraceServiceConnection; send_item_length: Cardinal; send_items: BytePtr; recv_item_length: Cardinal; recv_items: BytePtr; query_result: Cardinal): Boolean; cdecl;
	TracePlugin_trace_service_detachPtr = function(this: TracePlugin; service: TraceServiceConnection; detach_result: Cardinal): Boolean; cdecl;
	TracePlugin_trace_event_errorPtr = function(this: TracePlugin; connection: TraceConnection; status: TraceStatusVector; function_: PAnsiChar): Boolean; cdecl;
	TracePlugin_trace_event_sweepPtr = function(this: TracePlugin; connection: TraceDatabaseConnection; sweep: TraceSweepInfo; sweep_state: Cardinal): Boolean; cdecl;
	TracePlugin_trace_func_executePtr = function(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; function_: TraceFunction; started: Boolean; func_result: Cardinal): Boolean; cdecl;
	TraceFactory_trace_needsPtr = function(this: TraceFactory): QWord; cdecl;
	TraceFactory_trace_createPtr = function(this: TraceFactory; status: Status; init_info: TraceInitInfo): TracePlugin; cdecl;
	UdrFunctionFactory_setupPtr = procedure(this: UdrFunctionFactory; status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder); cdecl;
	UdrFunctionFactory_newItemPtr = function(this: UdrFunctionFactory; status: Status; context: ExternalContext; metadata: RoutineMetadata): ExternalFunction; cdecl;
	UdrProcedureFactory_setupPtr = procedure(this: UdrProcedureFactory; status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder); cdecl;
	UdrProcedureFactory_newItemPtr = function(this: UdrProcedureFactory; status: Status; context: ExternalContext; metadata: RoutineMetadata): ExternalProcedure; cdecl;
	UdrTriggerFactory_setupPtr = procedure(this: UdrTriggerFactory; status: Status; context: ExternalContext; metadata: RoutineMetadata; fieldsBuilder: MetadataBuilder); cdecl;
	UdrTriggerFactory_newItemPtr = function(this: UdrTriggerFactory; status: Status; context: ExternalContext; metadata: RoutineMetadata): ExternalTrigger; cdecl;
	UdrPlugin_getMasterPtr = function(this: UdrPlugin): Master; cdecl;
	UdrPlugin_registerFunctionPtr = procedure(this: UdrPlugin; status: Status; name: PAnsiChar; factory: UdrFunctionFactory); cdecl;
	UdrPlugin_registerProcedurePtr = procedure(this: UdrPlugin; status: Status; name: PAnsiChar; factory: UdrProcedureFactory); cdecl;
	UdrPlugin_registerTriggerPtr = procedure(this: UdrPlugin; status: Status; name: PAnsiChar; factory: UdrTriggerFactory); cdecl;

	VersionedVTable = class
		version: NativeInt;
	end;

	Versioned = class
		vTable: VersionedVTable;

		const VERSION = 0;

	end;

	VersionedImpl = class(Versioned)
		constructor create;

	end;

	ReferenceCountedVTable = class(VersionedVTable)
		addRef: ReferenceCounted_addRefPtr;
		release: ReferenceCounted_releasePtr;
	end;

	ReferenceCounted = class(Versioned)
		const VERSION = 2;

		procedure addRef();
		function release(): Integer;
	end;

	ReferenceCountedImpl = class(ReferenceCounted)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
	end;

	DisposableVTable = class(VersionedVTable)
		dispose: Disposable_disposePtr;
	end;

	Disposable = class(Versioned)
		const VERSION = 1;

		procedure dispose();
	end;

	DisposableImpl = class(Disposable)
		constructor create;

		procedure dispose(); virtual; abstract;
	end;

	StatusVTable = class(DisposableVTable)
		init: Status_initPtr;
		getState: Status_getStatePtr;
		setErrors2: Status_setErrors2Ptr;
		setWarnings2: Status_setWarnings2Ptr;
		setErrors: Status_setErrorsPtr;
		setWarnings: Status_setWarningsPtr;
		getErrors: Status_getErrorsPtr;
		getWarnings: Status_getWarningsPtr;
		clone: Status_clonePtr;
	end;

	Status = class(Disposable)
		const VERSION = 10;
		const STATE_WARNINGS = Cardinal(1);
		const STATE_ERRORS = Cardinal(2);
		const RESULT_ERROR = Integer(-1);
		const RESULT_OK = Integer(0);
		const RESULT_NO_DATA = Integer(1);
		const RESULT_SEGMENT = Integer(2);

		procedure init();
		function getState(): Cardinal;
		procedure setErrors2(length: Cardinal; value: NativeIntPtr);
		procedure setWarnings2(length: Cardinal; value: NativeIntPtr);
		procedure setErrors(value: NativeIntPtr);
		procedure setWarnings(value: NativeIntPtr);
		function getErrors(): NativeIntPtr;
		function getWarnings(): NativeIntPtr;
		function clone(): Status;
	end;

	StatusImpl = class(Status)
		constructor create;

		procedure dispose(); virtual; abstract;
		procedure init(); virtual; abstract;
		function getState(): Cardinal; virtual; abstract;
		procedure setErrors2(length: Cardinal; value: NativeIntPtr); virtual; abstract;
		procedure setWarnings2(length: Cardinal; value: NativeIntPtr); virtual; abstract;
		procedure setErrors(value: NativeIntPtr); virtual; abstract;
		procedure setWarnings(value: NativeIntPtr); virtual; abstract;
		function getErrors(): NativeIntPtr; virtual; abstract;
		function getWarnings(): NativeIntPtr; virtual; abstract;
		function clone(): Status; virtual; abstract;
	end;

	MasterVTable = class(VersionedVTable)
		getStatus: Master_getStatusPtr;
		getDispatcher: Master_getDispatcherPtr;
		getPluginManager: Master_getPluginManagerPtr;
		getTimerControl: Master_getTimerControlPtr;
		getDtc: Master_getDtcPtr;
		registerAttachment: Master_registerAttachmentPtr;
		registerTransaction: Master_registerTransactionPtr;
		getMetadataBuilder: Master_getMetadataBuilderPtr;
		serverMode: Master_serverModePtr;
		getUtilInterface: Master_getUtilInterfacePtr;
		getConfigManager: Master_getConfigManagerPtr;
		getProcessExiting: Master_getProcessExitingPtr;
	end;

	Master = class(Versioned)
		const VERSION = 12;

		function getStatus(): Status;
		function getDispatcher(): Provider;
		function getPluginManager(): PluginManager;
		function getTimerControl(): TimerControl;
		function getDtc(): Dtc;
		function registerAttachment(provider: Provider; attachment: Attachment): Attachment;
		function registerTransaction(attachment: Attachment; transaction: Transaction): Transaction;
		function getMetadataBuilder(status: Status; fieldCount: Cardinal): MetadataBuilder;
		function serverMode(mode: Integer): Integer;
		function getUtilInterface(): Util;
		function getConfigManager(): ConfigManager;
		function getProcessExiting(): Boolean;
	end;

	MasterImpl = class(Master)
		constructor create;

		function getStatus(): Status; virtual; abstract;
		function getDispatcher(): Provider; virtual; abstract;
		function getPluginManager(): PluginManager; virtual; abstract;
		function getTimerControl(): TimerControl; virtual; abstract;
		function getDtc(): Dtc; virtual; abstract;
		function registerAttachment(provider: Provider; attachment: Attachment): Attachment; virtual; abstract;
		function registerTransaction(attachment: Attachment; transaction: Transaction): Transaction; virtual; abstract;
		function getMetadataBuilder(status: Status; fieldCount: Cardinal): MetadataBuilder; virtual; abstract;
		function serverMode(mode: Integer): Integer; virtual; abstract;
		function getUtilInterface(): Util; virtual; abstract;
		function getConfigManager(): ConfigManager; virtual; abstract;
		function getProcessExiting(): Boolean; virtual; abstract;
	end;

	PluginBaseVTable = class(ReferenceCountedVTable)
		setOwner: PluginBase_setOwnerPtr;
		getOwner: PluginBase_getOwnerPtr;
	end;

	PluginBase = class(ReferenceCounted)
		const VERSION = 4;

		procedure setOwner(r: ReferenceCounted);
		function getOwner(): ReferenceCounted;
	end;

	PluginBaseImpl = class(PluginBase)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure setOwner(r: ReferenceCounted); virtual; abstract;
		function getOwner(): ReferenceCounted; virtual; abstract;
	end;

	PluginSetVTable = class(ReferenceCountedVTable)
		getName: PluginSet_getNamePtr;
		getModuleName: PluginSet_getModuleNamePtr;
		getPlugin: PluginSet_getPluginPtr;
		next: PluginSet_nextPtr;
		set_: PluginSet_set_Ptr;
	end;

	PluginSet = class(ReferenceCounted)
		const VERSION = 7;

		function getName(): PAnsiChar;
		function getModuleName(): PAnsiChar;
		function getPlugin(status: Status): PluginBase;
		procedure next(status: Status);
		procedure set_(status: Status; s: PAnsiChar);
	end;

	PluginSetImpl = class(PluginSet)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		function getName(): PAnsiChar; virtual; abstract;
		function getModuleName(): PAnsiChar; virtual; abstract;
		function getPlugin(status: Status): PluginBase; virtual; abstract;
		procedure next(status: Status); virtual; abstract;
		procedure set_(status: Status; s: PAnsiChar); virtual; abstract;
	end;

	ConfigEntryVTable = class(ReferenceCountedVTable)
		getName: ConfigEntry_getNamePtr;
		getValue: ConfigEntry_getValuePtr;
		getIntValue: ConfigEntry_getIntValuePtr;
		getBoolValue: ConfigEntry_getBoolValuePtr;
		getSubConfig: ConfigEntry_getSubConfigPtr;
	end;

	ConfigEntry = class(ReferenceCounted)
		const VERSION = 7;

		function getName(): PAnsiChar;
		function getValue(): PAnsiChar;
		function getIntValue(): Int64;
		function getBoolValue(): Boolean;
		function getSubConfig(status: Status): Config;
	end;

	ConfigEntryImpl = class(ConfigEntry)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		function getName(): PAnsiChar; virtual; abstract;
		function getValue(): PAnsiChar; virtual; abstract;
		function getIntValue(): Int64; virtual; abstract;
		function getBoolValue(): Boolean; virtual; abstract;
		function getSubConfig(status: Status): Config; virtual; abstract;
	end;

	ConfigVTable = class(ReferenceCountedVTable)
		find: Config_findPtr;
		findValue: Config_findValuePtr;
		findPos: Config_findPosPtr;
	end;

	Config = class(ReferenceCounted)
		const VERSION = 5;

		function find(status: Status; name: PAnsiChar): ConfigEntry;
		function findValue(status: Status; name: PAnsiChar; value: PAnsiChar): ConfigEntry;
		function findPos(status: Status; name: PAnsiChar; pos: Cardinal): ConfigEntry;
	end;

	ConfigImpl = class(Config)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		function find(status: Status; name: PAnsiChar): ConfigEntry; virtual; abstract;
		function findValue(status: Status; name: PAnsiChar; value: PAnsiChar): ConfigEntry; virtual; abstract;
		function findPos(status: Status; name: PAnsiChar; pos: Cardinal): ConfigEntry; virtual; abstract;
	end;

	FirebirdConfVTable = class(ReferenceCountedVTable)
		getKey: FirebirdConf_getKeyPtr;
		asInteger: FirebirdConf_asIntegerPtr;
		asString: FirebirdConf_asStringPtr;
		asBoolean: FirebirdConf_asBooleanPtr;
	end;

	FirebirdConf = class(ReferenceCounted)
		const VERSION = 6;

		function getKey(name: PAnsiChar): Cardinal;
		function asInteger(key: Cardinal): Int64;
		function asString(key: Cardinal): PAnsiChar;
		function asBoolean(key: Cardinal): Boolean;
	end;

	FirebirdConfImpl = class(FirebirdConf)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		function getKey(name: PAnsiChar): Cardinal; virtual; abstract;
		function asInteger(key: Cardinal): Int64; virtual; abstract;
		function asString(key: Cardinal): PAnsiChar; virtual; abstract;
		function asBoolean(key: Cardinal): Boolean; virtual; abstract;
	end;

	PluginConfigVTable = class(ReferenceCountedVTable)
		getConfigFileName: PluginConfig_getConfigFileNamePtr;
		getDefaultConfig: PluginConfig_getDefaultConfigPtr;
		getFirebirdConf: PluginConfig_getFirebirdConfPtr;
		setReleaseDelay: PluginConfig_setReleaseDelayPtr;
	end;

	PluginConfig = class(ReferenceCounted)
		const VERSION = 6;

		function getConfigFileName(): PAnsiChar;
		function getDefaultConfig(status: Status): Config;
		function getFirebirdConf(status: Status): FirebirdConf;
		procedure setReleaseDelay(status: Status; microSeconds: QWord);
	end;

	PluginConfigImpl = class(PluginConfig)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		function getConfigFileName(): PAnsiChar; virtual; abstract;
		function getDefaultConfig(status: Status): Config; virtual; abstract;
		function getFirebirdConf(status: Status): FirebirdConf; virtual; abstract;
		procedure setReleaseDelay(status: Status; microSeconds: QWord); virtual; abstract;
	end;

	PluginFactoryVTable = class(VersionedVTable)
		createPlugin: PluginFactory_createPluginPtr;
	end;

	PluginFactory = class(Versioned)
		const VERSION = 1;

		function createPlugin(status: Status; factoryParameter: PluginConfig): PluginBase;
	end;

	PluginFactoryImpl = class(PluginFactory)
		constructor create;

		function createPlugin(status: Status; factoryParameter: PluginConfig): PluginBase; virtual; abstract;
	end;

	PluginModuleVTable = class(VersionedVTable)
		doClean: PluginModule_doCleanPtr;
	end;

	PluginModule = class(Versioned)
		const VERSION = 1;

		procedure doClean();
	end;

	PluginModuleImpl = class(PluginModule)
		constructor create;

		procedure doClean(); virtual; abstract;
	end;

	PluginManagerVTable = class(VersionedVTable)
		registerPluginFactory: PluginManager_registerPluginFactoryPtr;
		registerModule: PluginManager_registerModulePtr;
		unregisterModule: PluginManager_unregisterModulePtr;
		getPlugins: PluginManager_getPluginsPtr;
		getConfig: PluginManager_getConfigPtr;
		releasePlugin: PluginManager_releasePluginPtr;
	end;

	PluginManager = class(Versioned)
		const VERSION = 6;
		const TYPE_PROVIDER = Cardinal(1);
		const TYPE_FIRST_NON_LIB = Cardinal(2);
		const TYPE_AUTH_SERVER = Cardinal(3);
		const TYPE_AUTH_CLIENT = Cardinal(4);
		const TYPE_AUTH_USER_MANAGEMENT = Cardinal(5);
		const TYPE_EXTERNAL_ENGINE = Cardinal(6);
		const TYPE_TRACE = Cardinal(7);
		const TYPE_WIRE_CRYPT = Cardinal(8);
		const TYPE_DB_CRYPT = Cardinal(9);
		const TYPE_KEY_HOLDER = Cardinal(10);
		const TYPE_COUNT = Cardinal(11);

		procedure registerPluginFactory(pluginType: Cardinal; defaultName: PAnsiChar; factory: PluginFactory);
		procedure registerModule(cleanup: PluginModule);
		procedure unregisterModule(cleanup: PluginModule);
		function getPlugins(status: Status; pluginType: Cardinal; namesList: PAnsiChar; firebirdConf: FirebirdConf): PluginSet;
		function getConfig(status: Status; filename: PAnsiChar): Config;
		procedure releasePlugin(plugin: PluginBase);
	end;

	PluginManagerImpl = class(PluginManager)
		constructor create;

		procedure registerPluginFactory(pluginType: Cardinal; defaultName: PAnsiChar; factory: PluginFactory); virtual; abstract;
		procedure registerModule(cleanup: PluginModule); virtual; abstract;
		procedure unregisterModule(cleanup: PluginModule); virtual; abstract;
		function getPlugins(status: Status; pluginType: Cardinal; namesList: PAnsiChar; firebirdConf: FirebirdConf): PluginSet; virtual; abstract;
		function getConfig(status: Status; filename: PAnsiChar): Config; virtual; abstract;
		procedure releasePlugin(plugin: PluginBase); virtual; abstract;
	end;

	CryptKeyVTable = class(VersionedVTable)
		setSymmetric: CryptKey_setSymmetricPtr;
		setAsymmetric: CryptKey_setAsymmetricPtr;
		getEncryptKey: CryptKey_getEncryptKeyPtr;
		getDecryptKey: CryptKey_getDecryptKeyPtr;
	end;

	CryptKey = class(Versioned)
		const VERSION = 4;

		procedure setSymmetric(status: Status; type_: PAnsiChar; keyLength: Cardinal; key: Pointer);
		procedure setAsymmetric(status: Status; type_: PAnsiChar; encryptKeyLength: Cardinal; encryptKey: Pointer; decryptKeyLength: Cardinal; decryptKey: Pointer);
		function getEncryptKey(length: CardinalPtr): Pointer;
		function getDecryptKey(length: CardinalPtr): Pointer;
	end;

	CryptKeyImpl = class(CryptKey)
		constructor create;

		procedure setSymmetric(status: Status; type_: PAnsiChar; keyLength: Cardinal; key: Pointer); virtual; abstract;
		procedure setAsymmetric(status: Status; type_: PAnsiChar; encryptKeyLength: Cardinal; encryptKey: Pointer; decryptKeyLength: Cardinal; decryptKey: Pointer); virtual; abstract;
		function getEncryptKey(length: CardinalPtr): Pointer; virtual; abstract;
		function getDecryptKey(length: CardinalPtr): Pointer; virtual; abstract;
	end;

	ConfigManagerVTable = class(VersionedVTable)
		getDirectory: ConfigManager_getDirectoryPtr;
		getFirebirdConf: ConfigManager_getFirebirdConfPtr;
		getDatabaseConf: ConfigManager_getDatabaseConfPtr;
		getPluginConfig: ConfigManager_getPluginConfigPtr;
		getInstallDirectory: ConfigManager_getInstallDirectoryPtr;
		getRootDirectory: ConfigManager_getRootDirectoryPtr;
	end;

	ConfigManager = class(Versioned)
		const VERSION = 6;
		const DIR_BIN = Cardinal(0);
		const DIR_SBIN = Cardinal(1);
		const DIR_CONF = Cardinal(2);
		const DIR_LIB = Cardinal(3);
		const DIR_INC = Cardinal(4);
		const DIR_DOC = Cardinal(5);
		const DIR_UDF = Cardinal(6);
		const DIR_SAMPLE = Cardinal(7);
		const DIR_SAMPLEDB = Cardinal(8);
		const DIR_HELP = Cardinal(9);
		const DIR_INTL = Cardinal(10);
		const DIR_MISC = Cardinal(11);
		const DIR_SECDB = Cardinal(12);
		const DIR_MSG = Cardinal(13);
		const DIR_LOG = Cardinal(14);
		const DIR_GUARD = Cardinal(15);
		const DIR_PLUGINS = Cardinal(16);
		const DIR_COUNT = Cardinal(17);

		function getDirectory(code: Cardinal): PAnsiChar;
		function getFirebirdConf(): FirebirdConf;
		function getDatabaseConf(dbName: PAnsiChar): FirebirdConf;
		function getPluginConfig(configuredPlugin: PAnsiChar): Config;
		function getInstallDirectory(): PAnsiChar;
		function getRootDirectory(): PAnsiChar;
	end;

	ConfigManagerImpl = class(ConfigManager)
		constructor create;

		function getDirectory(code: Cardinal): PAnsiChar; virtual; abstract;
		function getFirebirdConf(): FirebirdConf; virtual; abstract;
		function getDatabaseConf(dbName: PAnsiChar): FirebirdConf; virtual; abstract;
		function getPluginConfig(configuredPlugin: PAnsiChar): Config; virtual; abstract;
		function getInstallDirectory(): PAnsiChar; virtual; abstract;
		function getRootDirectory(): PAnsiChar; virtual; abstract;
	end;

	EventCallbackVTable = class(ReferenceCountedVTable)
		eventCallbackFunction: EventCallback_eventCallbackFunctionPtr;
	end;

	EventCallback = class(ReferenceCounted)
		const VERSION = 3;

		procedure eventCallbackFunction(length: Cardinal; events: BytePtr);
	end;

	EventCallbackImpl = class(EventCallback)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure eventCallbackFunction(length: Cardinal; events: BytePtr); virtual; abstract;
	end;

	BlobVTable = class(ReferenceCountedVTable)
		getInfo: Blob_getInfoPtr;
		getSegment: Blob_getSegmentPtr;
		putSegment: Blob_putSegmentPtr;
		cancel: Blob_cancelPtr;
		close: Blob_closePtr;
		seek: Blob_seekPtr;
	end;

	Blob = class(ReferenceCounted)
		const VERSION = 8;

		procedure getInfo(status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr);
		function getSegment(status: Status; bufferLength: Cardinal; buffer: Pointer; segmentLength: CardinalPtr): Integer;
		procedure putSegment(status: Status; length: Cardinal; buffer: Pointer);
		procedure cancel(status: Status);
		procedure close(status: Status);
		function seek(status: Status; mode: Integer; offset: Integer): Integer;
	end;

	BlobImpl = class(Blob)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure getInfo(status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr); virtual; abstract;
		function getSegment(status: Status; bufferLength: Cardinal; buffer: Pointer; segmentLength: CardinalPtr): Integer; virtual; abstract;
		procedure putSegment(status: Status; length: Cardinal; buffer: Pointer); virtual; abstract;
		procedure cancel(status: Status); virtual; abstract;
		procedure close(status: Status); virtual; abstract;
		function seek(status: Status; mode: Integer; offset: Integer): Integer; virtual; abstract;
	end;

	TransactionVTable = class(ReferenceCountedVTable)
		getInfo: Transaction_getInfoPtr;
		prepare: Transaction_preparePtr;
		commit: Transaction_commitPtr;
		commitRetaining: Transaction_commitRetainingPtr;
		rollback: Transaction_rollbackPtr;
		rollbackRetaining: Transaction_rollbackRetainingPtr;
		disconnect: Transaction_disconnectPtr;
		join: Transaction_joinPtr;
		validate: Transaction_validatePtr;
		enterDtc: Transaction_enterDtcPtr;
	end;

	Transaction = class(ReferenceCounted)
		const VERSION = 12;

		procedure getInfo(status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr);
		procedure prepare(status: Status; msgLength: Cardinal; message: BytePtr);
		procedure commit(status: Status);
		procedure commitRetaining(status: Status);
		procedure rollback(status: Status);
		procedure rollbackRetaining(status: Status);
		procedure disconnect(status: Status);
		function join(status: Status; transaction: Transaction): Transaction;
		function validate(status: Status; attachment: Attachment): Transaction;
		function enterDtc(status: Status): Transaction;
	end;

	TransactionImpl = class(Transaction)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure getInfo(status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr); virtual; abstract;
		procedure prepare(status: Status; msgLength: Cardinal; message: BytePtr); virtual; abstract;
		procedure commit(status: Status); virtual; abstract;
		procedure commitRetaining(status: Status); virtual; abstract;
		procedure rollback(status: Status); virtual; abstract;
		procedure rollbackRetaining(status: Status); virtual; abstract;
		procedure disconnect(status: Status); virtual; abstract;
		function join(status: Status; transaction: Transaction): Transaction; virtual; abstract;
		function validate(status: Status; attachment: Attachment): Transaction; virtual; abstract;
		function enterDtc(status: Status): Transaction; virtual; abstract;
	end;

	MessageMetadataVTable = class(ReferenceCountedVTable)
		getCount: MessageMetadata_getCountPtr;
		getField: MessageMetadata_getFieldPtr;
		getRelation: MessageMetadata_getRelationPtr;
		getOwner: MessageMetadata_getOwnerPtr;
		getAlias: MessageMetadata_getAliasPtr;
		getType: MessageMetadata_getTypePtr;
		isNullable: MessageMetadata_isNullablePtr;
		getSubType: MessageMetadata_getSubTypePtr;
		getLength: MessageMetadata_getLengthPtr;
		getScale: MessageMetadata_getScalePtr;
		getCharSet: MessageMetadata_getCharSetPtr;
		getOffset: MessageMetadata_getOffsetPtr;
		getNullOffset: MessageMetadata_getNullOffsetPtr;
		getBuilder: MessageMetadata_getBuilderPtr;
		getMessageLength: MessageMetadata_getMessageLengthPtr;
	end;

	MessageMetadata = class(ReferenceCounted)
		const VERSION = 17;

		function getCount(status: Status): Cardinal;
		function getField(status: Status; index: Cardinal): PAnsiChar;
		function getRelation(status: Status; index: Cardinal): PAnsiChar;
		function getOwner(status: Status; index: Cardinal): PAnsiChar;
		function getAlias(status: Status; index: Cardinal): PAnsiChar;
		function getType(status: Status; index: Cardinal): Cardinal;
		function isNullable(status: Status; index: Cardinal): Boolean;
		function getSubType(status: Status; index: Cardinal): Integer;
		function getLength(status: Status; index: Cardinal): Cardinal;
		function getScale(status: Status; index: Cardinal): Integer;
		function getCharSet(status: Status; index: Cardinal): Cardinal;
		function getOffset(status: Status; index: Cardinal): Cardinal;
		function getNullOffset(status: Status; index: Cardinal): Cardinal;
		function getBuilder(status: Status): MetadataBuilder;
		function getMessageLength(status: Status): Cardinal;
	end;

	MessageMetadataImpl = class(MessageMetadata)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		function getCount(status: Status): Cardinal; virtual; abstract;
		function getField(status: Status; index: Cardinal): PAnsiChar; virtual; abstract;
		function getRelation(status: Status; index: Cardinal): PAnsiChar; virtual; abstract;
		function getOwner(status: Status; index: Cardinal): PAnsiChar; virtual; abstract;
		function getAlias(status: Status; index: Cardinal): PAnsiChar; virtual; abstract;
		function getType(status: Status; index: Cardinal): Cardinal; virtual; abstract;
		function isNullable(status: Status; index: Cardinal): Boolean; virtual; abstract;
		function getSubType(status: Status; index: Cardinal): Integer; virtual; abstract;
		function getLength(status: Status; index: Cardinal): Cardinal; virtual; abstract;
		function getScale(status: Status; index: Cardinal): Integer; virtual; abstract;
		function getCharSet(status: Status; index: Cardinal): Cardinal; virtual; abstract;
		function getOffset(status: Status; index: Cardinal): Cardinal; virtual; abstract;
		function getNullOffset(status: Status; index: Cardinal): Cardinal; virtual; abstract;
		function getBuilder(status: Status): MetadataBuilder; virtual; abstract;
		function getMessageLength(status: Status): Cardinal; virtual; abstract;
	end;

	MetadataBuilderVTable = class(ReferenceCountedVTable)
		setType: MetadataBuilder_setTypePtr;
		setSubType: MetadataBuilder_setSubTypePtr;
		setLength: MetadataBuilder_setLengthPtr;
		setCharSet: MetadataBuilder_setCharSetPtr;
		setScale: MetadataBuilder_setScalePtr;
		truncate: MetadataBuilder_truncatePtr;
		moveNameToIndex: MetadataBuilder_moveNameToIndexPtr;
		remove: MetadataBuilder_removePtr;
		addField: MetadataBuilder_addFieldPtr;
		getMetadata: MetadataBuilder_getMetadataPtr;
	end;

	MetadataBuilder = class(ReferenceCounted)
		const VERSION = 12;

		procedure setType(status: Status; index: Cardinal; type_: Cardinal);
		procedure setSubType(status: Status; index: Cardinal; subType: Integer);
		procedure setLength(status: Status; index: Cardinal; length: Cardinal);
		procedure setCharSet(status: Status; index: Cardinal; charSet: Cardinal);
		procedure setScale(status: Status; index: Cardinal; scale: Cardinal);
		procedure truncate(status: Status; count: Cardinal);
		procedure moveNameToIndex(status: Status; name: PAnsiChar; index: Cardinal);
		procedure remove(status: Status; index: Cardinal);
		function addField(status: Status): Cardinal;
		function getMetadata(status: Status): MessageMetadata;
	end;

	MetadataBuilderImpl = class(MetadataBuilder)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure setType(status: Status; index: Cardinal; type_: Cardinal); virtual; abstract;
		procedure setSubType(status: Status; index: Cardinal; subType: Integer); virtual; abstract;
		procedure setLength(status: Status; index: Cardinal; length: Cardinal); virtual; abstract;
		procedure setCharSet(status: Status; index: Cardinal; charSet: Cardinal); virtual; abstract;
		procedure setScale(status: Status; index: Cardinal; scale: Cardinal); virtual; abstract;
		procedure truncate(status: Status; count: Cardinal); virtual; abstract;
		procedure moveNameToIndex(status: Status; name: PAnsiChar; index: Cardinal); virtual; abstract;
		procedure remove(status: Status; index: Cardinal); virtual; abstract;
		function addField(status: Status): Cardinal; virtual; abstract;
		function getMetadata(status: Status): MessageMetadata; virtual; abstract;
	end;

	ResultSetVTable = class(ReferenceCountedVTable)
		fetchNext: ResultSet_fetchNextPtr;
		fetchPrior: ResultSet_fetchPriorPtr;
		fetchFirst: ResultSet_fetchFirstPtr;
		fetchLast: ResultSet_fetchLastPtr;
		fetchAbsolute: ResultSet_fetchAbsolutePtr;
		fetchRelative: ResultSet_fetchRelativePtr;
		isEof: ResultSet_isEofPtr;
		isBof: ResultSet_isBofPtr;
		getMetadata: ResultSet_getMetadataPtr;
		close: ResultSet_closePtr;
		setDelayedOutputFormat: ResultSet_setDelayedOutputFormatPtr;
	end;

	ResultSet = class(ReferenceCounted)
		const VERSION = 13;

		function fetchNext(status: Status; message: Pointer): Integer;
		function fetchPrior(status: Status; message: Pointer): Integer;
		function fetchFirst(status: Status; message: Pointer): Integer;
		function fetchLast(status: Status; message: Pointer): Integer;
		function fetchAbsolute(status: Status; position: Integer; message: Pointer): Integer;
		function fetchRelative(status: Status; offset: Integer; message: Pointer): Integer;
		function isEof(status: Status): Boolean;
		function isBof(status: Status): Boolean;
		function getMetadata(status: Status): MessageMetadata;
		procedure close(status: Status);
		procedure setDelayedOutputFormat(status: Status; format: MessageMetadata);
	end;

	ResultSetImpl = class(ResultSet)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		function fetchNext(status: Status; message: Pointer): Integer; virtual; abstract;
		function fetchPrior(status: Status; message: Pointer): Integer; virtual; abstract;
		function fetchFirst(status: Status; message: Pointer): Integer; virtual; abstract;
		function fetchLast(status: Status; message: Pointer): Integer; virtual; abstract;
		function fetchAbsolute(status: Status; position: Integer; message: Pointer): Integer; virtual; abstract;
		function fetchRelative(status: Status; offset: Integer; message: Pointer): Integer; virtual; abstract;
		function isEof(status: Status): Boolean; virtual; abstract;
		function isBof(status: Status): Boolean; virtual; abstract;
		function getMetadata(status: Status): MessageMetadata; virtual; abstract;
		procedure close(status: Status); virtual; abstract;
		procedure setDelayedOutputFormat(status: Status; format: MessageMetadata); virtual; abstract;
	end;

	StatementVTable = class(ReferenceCountedVTable)
		getInfo: Statement_getInfoPtr;
		getType: Statement_getTypePtr;
		getPlan: Statement_getPlanPtr;
		getAffectedRecords: Statement_getAffectedRecordsPtr;
		getInputMetadata: Statement_getInputMetadataPtr;
		getOutputMetadata: Statement_getOutputMetadataPtr;
		execute: Statement_executePtr;
		openCursor: Statement_openCursorPtr;
		setCursorName: Statement_setCursorNamePtr;
		free: Statement_freePtr;
		getFlags: Statement_getFlagsPtr;
	end;

	Statement = class(ReferenceCounted)
		const VERSION = 13;
		const PREPARE_PREFETCH_NONE = Cardinal(0);
		const PREPARE_PREFETCH_TYPE = Cardinal(1);
		const PREPARE_PREFETCH_INPUT_PARAMETERS = Cardinal(2);
		const PREPARE_PREFETCH_OUTPUT_PARAMETERS = Cardinal(4);
		const PREPARE_PREFETCH_LEGACY_PLAN = Cardinal(8);
		const PREPARE_PREFETCH_DETAILED_PLAN = Cardinal(16);
		const PREPARE_PREFETCH_AFFECTED_RECORDS = Cardinal(32);
		const PREPARE_PREFETCH_FLAGS = Cardinal(64);
		const PREPARE_PREFETCH_METADATA = Cardinal(Statement.PREPARE_PREFETCH_TYPE or Statement.PREPARE_PREFETCH_FLAGS or Statement.PREPARE_PREFETCH_INPUT_PARAMETERS or Statement.PREPARE_PREFETCH_OUTPUT_PARAMETERS);
		const PREPARE_PREFETCH_ALL = Cardinal(Statement.PREPARE_PREFETCH_METADATA or Statement.PREPARE_PREFETCH_LEGACY_PLAN or Statement.PREPARE_PREFETCH_DETAILED_PLAN or Statement.PREPARE_PREFETCH_AFFECTED_RECORDS);
		const FLAG_HAS_CURSOR = Cardinal(1);
		const FLAG_REPEAT_EXECUTE = Cardinal(2);
		const CURSOR_TYPE_SCROLLABLE = Cardinal(1);

		procedure getInfo(status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr);
		function getType(status: Status): Cardinal;
		function getPlan(status: Status; detailed: Boolean): PAnsiChar;
		function getAffectedRecords(status: Status): QWord;
		function getInputMetadata(status: Status): MessageMetadata;
		function getOutputMetadata(status: Status): MessageMetadata;
		function execute(status: Status; transaction: Transaction; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; outBuffer: Pointer): Transaction;
		function openCursor(status: Status; transaction: Transaction; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; flags: Cardinal): ResultSet;
		procedure setCursorName(status: Status; name: PAnsiChar);
		procedure free(status: Status);
		function getFlags(status: Status): Cardinal;
	end;

	StatementImpl = class(Statement)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure getInfo(status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr); virtual; abstract;
		function getType(status: Status): Cardinal; virtual; abstract;
		function getPlan(status: Status; detailed: Boolean): PAnsiChar; virtual; abstract;
		function getAffectedRecords(status: Status): QWord; virtual; abstract;
		function getInputMetadata(status: Status): MessageMetadata; virtual; abstract;
		function getOutputMetadata(status: Status): MessageMetadata; virtual; abstract;
		function execute(status: Status; transaction: Transaction; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; outBuffer: Pointer): Transaction; virtual; abstract;
		function openCursor(status: Status; transaction: Transaction; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; flags: Cardinal): ResultSet; virtual; abstract;
		procedure setCursorName(status: Status; name: PAnsiChar); virtual; abstract;
		procedure free(status: Status); virtual; abstract;
		function getFlags(status: Status): Cardinal; virtual; abstract;
	end;

	RequestVTable = class(ReferenceCountedVTable)
		receive: Request_receivePtr;
		send: Request_sendPtr;
		getInfo: Request_getInfoPtr;
		start: Request_startPtr;
		startAndSend: Request_startAndSendPtr;
		unwind: Request_unwindPtr;
		free: Request_freePtr;
	end;

	Request = class(ReferenceCounted)
		const VERSION = 9;

		procedure receive(status: Status; level: Integer; msgType: Cardinal; length: Cardinal; message: BytePtr);
		procedure send(status: Status; level: Integer; msgType: Cardinal; length: Cardinal; message: BytePtr);
		procedure getInfo(status: Status; level: Integer; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr);
		procedure start(status: Status; tra: Transaction; level: Integer);
		procedure startAndSend(status: Status; tra: Transaction; level: Integer; msgType: Cardinal; length: Cardinal; message: BytePtr);
		procedure unwind(status: Status; level: Integer);
		procedure free(status: Status);
	end;

	RequestImpl = class(Request)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure receive(status: Status; level: Integer; msgType: Cardinal; length: Cardinal; message: BytePtr); virtual; abstract;
		procedure send(status: Status; level: Integer; msgType: Cardinal; length: Cardinal; message: BytePtr); virtual; abstract;
		procedure getInfo(status: Status; level: Integer; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr); virtual; abstract;
		procedure start(status: Status; tra: Transaction; level: Integer); virtual; abstract;
		procedure startAndSend(status: Status; tra: Transaction; level: Integer; msgType: Cardinal; length: Cardinal; message: BytePtr); virtual; abstract;
		procedure unwind(status: Status; level: Integer); virtual; abstract;
		procedure free(status: Status); virtual; abstract;
	end;

	EventsVTable = class(ReferenceCountedVTable)
		cancel: Events_cancelPtr;
	end;

	Events = class(ReferenceCounted)
		const VERSION = 3;

		procedure cancel(status: Status);
	end;

	EventsImpl = class(Events)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure cancel(status: Status); virtual; abstract;
	end;

	AttachmentVTable = class(ReferenceCountedVTable)
		getInfo: Attachment_getInfoPtr;
		startTransaction: Attachment_startTransactionPtr;
		reconnectTransaction: Attachment_reconnectTransactionPtr;
		compileRequest: Attachment_compileRequestPtr;
		transactRequest: Attachment_transactRequestPtr;
		createBlob: Attachment_createBlobPtr;
		openBlob: Attachment_openBlobPtr;
		getSlice: Attachment_getSlicePtr;
		putSlice: Attachment_putSlicePtr;
		executeDyn: Attachment_executeDynPtr;
		prepare: Attachment_preparePtr;
		execute: Attachment_executePtr;
		openCursor: Attachment_openCursorPtr;
		queEvents: Attachment_queEventsPtr;
		cancelOperation: Attachment_cancelOperationPtr;
		ping: Attachment_pingPtr;
		detach: Attachment_detachPtr;
		dropDatabase: Attachment_dropDatabasePtr;
	end;

	Attachment = class(ReferenceCounted)
		const VERSION = 20;

		procedure getInfo(status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr);
		function startTransaction(status: Status; tpbLength: Cardinal; tpb: BytePtr): Transaction;
		function reconnectTransaction(status: Status; length: Cardinal; id: BytePtr): Transaction;
		function compileRequest(status: Status; blrLength: Cardinal; blr: BytePtr): Request;
		procedure transactRequest(status: Status; transaction: Transaction; blrLength: Cardinal; blr: BytePtr; inMsgLength: Cardinal; inMsg: BytePtr; outMsgLength: Cardinal; outMsg: BytePtr);
		function createBlob(status: Status; transaction: Transaction; id: ISC_QUADPtr; bpbLength: Cardinal; bpb: BytePtr): Blob;
		function openBlob(status: Status; transaction: Transaction; id: ISC_QUADPtr; bpbLength: Cardinal; bpb: BytePtr): Blob;
		function getSlice(status: Status; transaction: Transaction; id: ISC_QUADPtr; sdlLength: Cardinal; sdl: BytePtr; paramLength: Cardinal; param: BytePtr; sliceLength: Integer; slice: BytePtr): Integer;
		procedure putSlice(status: Status; transaction: Transaction; id: ISC_QUADPtr; sdlLength: Cardinal; sdl: BytePtr; paramLength: Cardinal; param: BytePtr; sliceLength: Integer; slice: BytePtr);
		procedure executeDyn(status: Status; transaction: Transaction; length: Cardinal; dyn: BytePtr);
		function prepare(status: Status; tra: Transaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; flags: Cardinal): Statement;
		function execute(status: Status; transaction: Transaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; outBuffer: Pointer): Transaction;
		function openCursor(status: Status; transaction: Transaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; cursorName: PAnsiChar; cursorFlags: Cardinal): ResultSet;
		function queEvents(status: Status; callback: EventCallback; length: Cardinal; events: BytePtr): Events;
		procedure cancelOperation(status: Status; option: Integer);
		procedure ping(status: Status);
		procedure detach(status: Status);
		procedure dropDatabase(status: Status);
	end;

	AttachmentImpl = class(Attachment)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure getInfo(status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr); virtual; abstract;
		function startTransaction(status: Status; tpbLength: Cardinal; tpb: BytePtr): Transaction; virtual; abstract;
		function reconnectTransaction(status: Status; length: Cardinal; id: BytePtr): Transaction; virtual; abstract;
		function compileRequest(status: Status; blrLength: Cardinal; blr: BytePtr): Request; virtual; abstract;
		procedure transactRequest(status: Status; transaction: Transaction; blrLength: Cardinal; blr: BytePtr; inMsgLength: Cardinal; inMsg: BytePtr; outMsgLength: Cardinal; outMsg: BytePtr); virtual; abstract;
		function createBlob(status: Status; transaction: Transaction; id: ISC_QUADPtr; bpbLength: Cardinal; bpb: BytePtr): Blob; virtual; abstract;
		function openBlob(status: Status; transaction: Transaction; id: ISC_QUADPtr; bpbLength: Cardinal; bpb: BytePtr): Blob; virtual; abstract;
		function getSlice(status: Status; transaction: Transaction; id: ISC_QUADPtr; sdlLength: Cardinal; sdl: BytePtr; paramLength: Cardinal; param: BytePtr; sliceLength: Integer; slice: BytePtr): Integer; virtual; abstract;
		procedure putSlice(status: Status; transaction: Transaction; id: ISC_QUADPtr; sdlLength: Cardinal; sdl: BytePtr; paramLength: Cardinal; param: BytePtr; sliceLength: Integer; slice: BytePtr); virtual; abstract;
		procedure executeDyn(status: Status; transaction: Transaction; length: Cardinal; dyn: BytePtr); virtual; abstract;
		function prepare(status: Status; tra: Transaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; flags: Cardinal): Statement; virtual; abstract;
		function execute(status: Status; transaction: Transaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; outBuffer: Pointer): Transaction; virtual; abstract;
		function openCursor(status: Status; transaction: Transaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; cursorName: PAnsiChar; cursorFlags: Cardinal): ResultSet; virtual; abstract;
		function queEvents(status: Status; callback: EventCallback; length: Cardinal; events: BytePtr): Events; virtual; abstract;
		procedure cancelOperation(status: Status; option: Integer); virtual; abstract;
		procedure ping(status: Status); virtual; abstract;
		procedure detach(status: Status); virtual; abstract;
		procedure dropDatabase(status: Status); virtual; abstract;
	end;

	ServiceVTable = class(ReferenceCountedVTable)
		detach: Service_detachPtr;
		query: Service_queryPtr;
		start: Service_startPtr;
	end;

	Service = class(ReferenceCounted)
		const VERSION = 5;

		procedure detach(status: Status);
		procedure query(status: Status; sendLength: Cardinal; sendItems: BytePtr; receiveLength: Cardinal; receiveItems: BytePtr; bufferLength: Cardinal; buffer: BytePtr);
		procedure start(status: Status; spbLength: Cardinal; spb: BytePtr);
	end;

	ServiceImpl = class(Service)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure detach(status: Status); virtual; abstract;
		procedure query(status: Status; sendLength: Cardinal; sendItems: BytePtr; receiveLength: Cardinal; receiveItems: BytePtr; bufferLength: Cardinal; buffer: BytePtr); virtual; abstract;
		procedure start(status: Status; spbLength: Cardinal; spb: BytePtr); virtual; abstract;
	end;

	ProviderVTable = class(PluginBaseVTable)
		attachDatabase: Provider_attachDatabasePtr;
		createDatabase: Provider_createDatabasePtr;
		attachServiceManager: Provider_attachServiceManagerPtr;
		shutdown: Provider_shutdownPtr;
		setDbCryptCallback: Provider_setDbCryptCallbackPtr;
	end;

	Provider = class(PluginBase)
		const VERSION = 9;

		function attachDatabase(status: Status; fileName: PAnsiChar; dpbLength: Cardinal; dpb: BytePtr): Attachment;
		function createDatabase(status: Status; fileName: PAnsiChar; dpbLength: Cardinal; dpb: BytePtr): Attachment;
		function attachServiceManager(status: Status; service: PAnsiChar; spbLength: Cardinal; spb: BytePtr): Service;
		procedure shutdown(status: Status; timeout: Cardinal; reason: Integer);
		procedure setDbCryptCallback(status: Status; cryptCallback: CryptKeyCallback);
	end;

	ProviderImpl = class(Provider)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure setOwner(r: ReferenceCounted); virtual; abstract;
		function getOwner(): ReferenceCounted; virtual; abstract;
		function attachDatabase(status: Status; fileName: PAnsiChar; dpbLength: Cardinal; dpb: BytePtr): Attachment; virtual; abstract;
		function createDatabase(status: Status; fileName: PAnsiChar; dpbLength: Cardinal; dpb: BytePtr): Attachment; virtual; abstract;
		function attachServiceManager(status: Status; service: PAnsiChar; spbLength: Cardinal; spb: BytePtr): Service; virtual; abstract;
		procedure shutdown(status: Status; timeout: Cardinal; reason: Integer); virtual; abstract;
		procedure setDbCryptCallback(status: Status; cryptCallback: CryptKeyCallback); virtual; abstract;
	end;

	DtcStartVTable = class(DisposableVTable)
		addAttachment: DtcStart_addAttachmentPtr;
		addWithTpb: DtcStart_addWithTpbPtr;
		start: DtcStart_startPtr;
	end;

	DtcStart = class(Disposable)
		const VERSION = 4;

		procedure addAttachment(status: Status; att: Attachment);
		procedure addWithTpb(status: Status; att: Attachment; length: Cardinal; tpb: BytePtr);
		function start(status: Status): Transaction;
	end;

	DtcStartImpl = class(DtcStart)
		constructor create;

		procedure dispose(); virtual; abstract;
		procedure addAttachment(status: Status; att: Attachment); virtual; abstract;
		procedure addWithTpb(status: Status; att: Attachment; length: Cardinal; tpb: BytePtr); virtual; abstract;
		function start(status: Status): Transaction; virtual; abstract;
	end;

	DtcVTable = class(VersionedVTable)
		join: Dtc_joinPtr;
		startBuilder: Dtc_startBuilderPtr;
	end;

	Dtc = class(Versioned)
		const VERSION = 2;

		function join(status: Status; one: Transaction; two: Transaction): Transaction;
		function startBuilder(status: Status): DtcStart;
	end;

	DtcImpl = class(Dtc)
		constructor create;

		function join(status: Status; one: Transaction; two: Transaction): Transaction; virtual; abstract;
		function startBuilder(status: Status): DtcStart; virtual; abstract;
	end;

	AuthVTable = class(PluginBaseVTable)
	end;

	Auth = class(PluginBase)
		const VERSION = 4;
		const AUTH_FAILED = Integer(-1);
		const AUTH_SUCCESS = Integer(0);
		const AUTH_MORE_DATA = Integer(1);
		const AUTH_CONTINUE = Integer(2);

	end;

	AuthImpl = class(Auth)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure setOwner(r: ReferenceCounted); virtual; abstract;
		function getOwner(): ReferenceCounted; virtual; abstract;
	end;

	WriterVTable = class(VersionedVTable)
		reset: Writer_resetPtr;
		add: Writer_addPtr;
		setType: Writer_setTypePtr;
		setDb: Writer_setDbPtr;
	end;

	Writer = class(Versioned)
		const VERSION = 4;

		procedure reset();
		procedure add(status: Status; name: PAnsiChar);
		procedure setType(status: Status; value: PAnsiChar);
		procedure setDb(status: Status; value: PAnsiChar);
	end;

	WriterImpl = class(Writer)
		constructor create;

		procedure reset(); virtual; abstract;
		procedure add(status: Status; name: PAnsiChar); virtual; abstract;
		procedure setType(status: Status; value: PAnsiChar); virtual; abstract;
		procedure setDb(status: Status; value: PAnsiChar); virtual; abstract;
	end;

	ServerBlockVTable = class(VersionedVTable)
		getLogin: ServerBlock_getLoginPtr;
		getData: ServerBlock_getDataPtr;
		putData: ServerBlock_putDataPtr;
		newKey: ServerBlock_newKeyPtr;
	end;

	ServerBlock = class(Versioned)
		const VERSION = 4;

		function getLogin(): PAnsiChar;
		function getData(length: CardinalPtr): BytePtr;
		procedure putData(status: Status; length: Cardinal; data: Pointer);
		function newKey(status: Status): CryptKey;
	end;

	ServerBlockImpl = class(ServerBlock)
		constructor create;

		function getLogin(): PAnsiChar; virtual; abstract;
		function getData(length: CardinalPtr): BytePtr; virtual; abstract;
		procedure putData(status: Status; length: Cardinal; data: Pointer); virtual; abstract;
		function newKey(status: Status): CryptKey; virtual; abstract;
	end;

	ClientBlockVTable = class(ReferenceCountedVTable)
		getLogin: ClientBlock_getLoginPtr;
		getPassword: ClientBlock_getPasswordPtr;
		getData: ClientBlock_getDataPtr;
		putData: ClientBlock_putDataPtr;
		newKey: ClientBlock_newKeyPtr;
	end;

	ClientBlock = class(ReferenceCounted)
		const VERSION = 7;

		function getLogin(): PAnsiChar;
		function getPassword(): PAnsiChar;
		function getData(length: CardinalPtr): BytePtr;
		procedure putData(status: Status; length: Cardinal; data: Pointer);
		function newKey(status: Status): CryptKey;
	end;

	ClientBlockImpl = class(ClientBlock)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		function getLogin(): PAnsiChar; virtual; abstract;
		function getPassword(): PAnsiChar; virtual; abstract;
		function getData(length: CardinalPtr): BytePtr; virtual; abstract;
		procedure putData(status: Status; length: Cardinal; data: Pointer); virtual; abstract;
		function newKey(status: Status): CryptKey; virtual; abstract;
	end;

	ServerVTable = class(AuthVTable)
		authenticate: Server_authenticatePtr;
	end;

	Server = class(Auth)
		const VERSION = 5;

		function authenticate(status: Status; sBlock: ServerBlock; writerInterface: Writer): Integer;
	end;

	ServerImpl = class(Server)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure setOwner(r: ReferenceCounted); virtual; abstract;
		function getOwner(): ReferenceCounted; virtual; abstract;
		function authenticate(status: Status; sBlock: ServerBlock; writerInterface: Writer): Integer; virtual; abstract;
	end;

	ClientVTable = class(AuthVTable)
		authenticate: Client_authenticatePtr;
	end;

	Client = class(Auth)
		const VERSION = 5;

		function authenticate(status: Status; cBlock: ClientBlock): Integer;
	end;

	ClientImpl = class(Client)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure setOwner(r: ReferenceCounted); virtual; abstract;
		function getOwner(): ReferenceCounted; virtual; abstract;
		function authenticate(status: Status; cBlock: ClientBlock): Integer; virtual; abstract;
	end;

	UserFieldVTable = class(VersionedVTable)
		entered: UserField_enteredPtr;
		specified: UserField_specifiedPtr;
		setEntered: UserField_setEnteredPtr;
	end;

	UserField = class(Versioned)
		const VERSION = 3;

		function entered(): Integer;
		function specified(): Integer;
		procedure setEntered(status: Status; newValue: Integer);
	end;

	UserFieldImpl = class(UserField)
		constructor create;

		function entered(): Integer; virtual; abstract;
		function specified(): Integer; virtual; abstract;
		procedure setEntered(status: Status; newValue: Integer); virtual; abstract;
	end;

	CharUserFieldVTable = class(UserFieldVTable)
		get: CharUserField_getPtr;
		set_: CharUserField_set_Ptr;
	end;

	CharUserField = class(UserField)
		const VERSION = 5;

		function get(): PAnsiChar;
		procedure set_(status: Status; newValue: PAnsiChar);
	end;

	CharUserFieldImpl = class(CharUserField)
		constructor create;

		function entered(): Integer; virtual; abstract;
		function specified(): Integer; virtual; abstract;
		procedure setEntered(status: Status; newValue: Integer); virtual; abstract;
		function get(): PAnsiChar; virtual; abstract;
		procedure set_(status: Status; newValue: PAnsiChar); virtual; abstract;
	end;

	IntUserFieldVTable = class(UserFieldVTable)
		get: IntUserField_getPtr;
		set_: IntUserField_set_Ptr;
	end;

	IntUserField = class(UserField)
		const VERSION = 5;

		function get(): Integer;
		procedure set_(status: Status; newValue: Integer);
	end;

	IntUserFieldImpl = class(IntUserField)
		constructor create;

		function entered(): Integer; virtual; abstract;
		function specified(): Integer; virtual; abstract;
		procedure setEntered(status: Status; newValue: Integer); virtual; abstract;
		function get(): Integer; virtual; abstract;
		procedure set_(status: Status; newValue: Integer); virtual; abstract;
	end;

	UserVTable = class(VersionedVTable)
		operation: User_operationPtr;
		userName: User_userNamePtr;
		password: User_passwordPtr;
		firstName: User_firstNamePtr;
		lastName: User_lastNamePtr;
		middleName: User_middleNamePtr;
		comment: User_commentPtr;
		attributes: User_attributesPtr;
		active: User_activePtr;
		admin: User_adminPtr;
		clear: User_clearPtr;
	end;

	User = class(Versioned)
		const VERSION = 11;

		function operation(): Integer;
		function userName(): CharUserField;
		function password(): CharUserField;
		function firstName(): CharUserField;
		function lastName(): CharUserField;
		function middleName(): CharUserField;
		function comment(): CharUserField;
		function attributes(): CharUserField;
		function active(): IntUserField;
		function admin(): IntUserField;
		procedure clear(status: Status);
	end;

	UserImpl = class(User)
		constructor create;

		function operation(): Integer; virtual; abstract;
		function userName(): CharUserField; virtual; abstract;
		function password(): CharUserField; virtual; abstract;
		function firstName(): CharUserField; virtual; abstract;
		function lastName(): CharUserField; virtual; abstract;
		function middleName(): CharUserField; virtual; abstract;
		function comment(): CharUserField; virtual; abstract;
		function attributes(): CharUserField; virtual; abstract;
		function active(): IntUserField; virtual; abstract;
		function admin(): IntUserField; virtual; abstract;
		procedure clear(status: Status); virtual; abstract;
	end;

	ListUsersVTable = class(VersionedVTable)
		list: ListUsers_listPtr;
	end;

	ListUsers = class(Versioned)
		const VERSION = 1;

		procedure list(status: Status; user: User);
	end;

	ListUsersImpl = class(ListUsers)
		constructor create;

		procedure list(status: Status; user: User); virtual; abstract;
	end;

	LogonInfoVTable = class(VersionedVTable)
		name: LogonInfo_namePtr;
		role: LogonInfo_rolePtr;
		networkProtocol: LogonInfo_networkProtocolPtr;
		remoteAddress: LogonInfo_remoteAddressPtr;
		authBlock: LogonInfo_authBlockPtr;
	end;

	LogonInfo = class(Versioned)
		const VERSION = 5;

		function name(): PAnsiChar;
		function role(): PAnsiChar;
		function networkProtocol(): PAnsiChar;
		function remoteAddress(): PAnsiChar;
		function authBlock(length: CardinalPtr): BytePtr;
	end;

	LogonInfoImpl = class(LogonInfo)
		constructor create;

		function name(): PAnsiChar; virtual; abstract;
		function role(): PAnsiChar; virtual; abstract;
		function networkProtocol(): PAnsiChar; virtual; abstract;
		function remoteAddress(): PAnsiChar; virtual; abstract;
		function authBlock(length: CardinalPtr): BytePtr; virtual; abstract;
	end;

	ManagementVTable = class(PluginBaseVTable)
		start: Management_startPtr;
		execute: Management_executePtr;
		commit: Management_commitPtr;
		rollback: Management_rollbackPtr;
	end;

	Management = class(PluginBase)
		const VERSION = 8;

		procedure start(status: Status; logonInfo: LogonInfo);
		function execute(status: Status; user: User; callback: ListUsers): Integer;
		procedure commit(status: Status);
		procedure rollback(status: Status);
	end;

	ManagementImpl = class(Management)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure setOwner(r: ReferenceCounted); virtual; abstract;
		function getOwner(): ReferenceCounted; virtual; abstract;
		procedure start(status: Status; logonInfo: LogonInfo); virtual; abstract;
		function execute(status: Status; user: User; callback: ListUsers): Integer; virtual; abstract;
		procedure commit(status: Status); virtual; abstract;
		procedure rollback(status: Status); virtual; abstract;
	end;

	WireCryptPluginVTable = class(PluginBaseVTable)
		getKnownTypes: WireCryptPlugin_getKnownTypesPtr;
		setKey: WireCryptPlugin_setKeyPtr;
		encrypt: WireCryptPlugin_encryptPtr;
		decrypt: WireCryptPlugin_decryptPtr;
	end;

	WireCryptPlugin = class(PluginBase)
		const VERSION = 8;

		function getKnownTypes(status: Status): PAnsiChar;
		procedure setKey(status: Status; key: CryptKey);
		procedure encrypt(status: Status; length: Cardinal; from: Pointer; to_: Pointer);
		procedure decrypt(status: Status; length: Cardinal; from: Pointer; to_: Pointer);
	end;

	WireCryptPluginImpl = class(WireCryptPlugin)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure setOwner(r: ReferenceCounted); virtual; abstract;
		function getOwner(): ReferenceCounted; virtual; abstract;
		function getKnownTypes(status: Status): PAnsiChar; virtual; abstract;
		procedure setKey(status: Status; key: CryptKey); virtual; abstract;
		procedure encrypt(status: Status; length: Cardinal; from: Pointer; to_: Pointer); virtual; abstract;
		procedure decrypt(status: Status; length: Cardinal; from: Pointer; to_: Pointer); virtual; abstract;
	end;

	CryptKeyCallbackVTable = class(VersionedVTable)
		callback: CryptKeyCallback_callbackPtr;
	end;

	CryptKeyCallback = class(Versioned)
		const VERSION = 1;

		function callback(dataLength: Cardinal; data: Pointer; bufferLength: Cardinal; buffer: Pointer): Cardinal;
	end;

	CryptKeyCallbackImpl = class(CryptKeyCallback)
		constructor create;

		function callback(dataLength: Cardinal; data: Pointer; bufferLength: Cardinal; buffer: Pointer): Cardinal; virtual; abstract;
	end;

	KeyHolderPluginVTable = class(PluginBaseVTable)
		keyCallback: KeyHolderPlugin_keyCallbackPtr;
		keyHandle: KeyHolderPlugin_keyHandlePtr;
	end;

	KeyHolderPlugin = class(PluginBase)
		const VERSION = 6;

		function keyCallback(status: Status; callback: CryptKeyCallback): Integer;
		function keyHandle(status: Status; keyName: PAnsiChar): CryptKeyCallback;
	end;

	KeyHolderPluginImpl = class(KeyHolderPlugin)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure setOwner(r: ReferenceCounted); virtual; abstract;
		function getOwner(): ReferenceCounted; virtual; abstract;
		function keyCallback(status: Status; callback: CryptKeyCallback): Integer; virtual; abstract;
		function keyHandle(status: Status; keyName: PAnsiChar): CryptKeyCallback; virtual; abstract;
	end;

	DbCryptPluginVTable = class(PluginBaseVTable)
		setKey: DbCryptPlugin_setKeyPtr;
		encrypt: DbCryptPlugin_encryptPtr;
		decrypt: DbCryptPlugin_decryptPtr;
	end;

	DbCryptPlugin = class(PluginBase)
		const VERSION = 7;

		procedure setKey(status: Status; length: Cardinal; sources: KeyHolderPluginPtr);
		procedure encrypt(status: Status; length: Cardinal; from: Pointer; to_: Pointer);
		procedure decrypt(status: Status; length: Cardinal; from: Pointer; to_: Pointer);
	end;

	DbCryptPluginImpl = class(DbCryptPlugin)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure setOwner(r: ReferenceCounted); virtual; abstract;
		function getOwner(): ReferenceCounted; virtual; abstract;
		procedure setKey(status: Status; length: Cardinal; sources: KeyHolderPluginPtr); virtual; abstract;
		procedure encrypt(status: Status; length: Cardinal; from: Pointer; to_: Pointer); virtual; abstract;
		procedure decrypt(status: Status; length: Cardinal; from: Pointer; to_: Pointer); virtual; abstract;
	end;

	ExternalContextVTable = class(VersionedVTable)
		getMaster: ExternalContext_getMasterPtr;
		getEngine: ExternalContext_getEnginePtr;
		getAttachment: ExternalContext_getAttachmentPtr;
		getTransaction: ExternalContext_getTransactionPtr;
		getUserName: ExternalContext_getUserNamePtr;
		getDatabaseName: ExternalContext_getDatabaseNamePtr;
		getClientCharSet: ExternalContext_getClientCharSetPtr;
		obtainInfoCode: ExternalContext_obtainInfoCodePtr;
		getInfo: ExternalContext_getInfoPtr;
		setInfo: ExternalContext_setInfoPtr;
	end;

	ExternalContext = class(Versioned)
		const VERSION = 10;

		function getMaster(): Master;
		function getEngine(status: Status): ExternalEngine;
		function getAttachment(status: Status): Attachment;
		function getTransaction(status: Status): Transaction;
		function getUserName(): PAnsiChar;
		function getDatabaseName(): PAnsiChar;
		function getClientCharSet(): PAnsiChar;
		function obtainInfoCode(): Integer;
		function getInfo(code: Integer): Pointer;
		function setInfo(code: Integer; value: Pointer): Pointer;
	end;

	ExternalContextImpl = class(ExternalContext)
		constructor create;

		function getMaster(): Master; virtual; abstract;
		function getEngine(status: Status): ExternalEngine; virtual; abstract;
		function getAttachment(status: Status): Attachment; virtual; abstract;
		function getTransaction(status: Status): Transaction; virtual; abstract;
		function getUserName(): PAnsiChar; virtual; abstract;
		function getDatabaseName(): PAnsiChar; virtual; abstract;
		function getClientCharSet(): PAnsiChar; virtual; abstract;
		function obtainInfoCode(): Integer; virtual; abstract;
		function getInfo(code: Integer): Pointer; virtual; abstract;
		function setInfo(code: Integer; value: Pointer): Pointer; virtual; abstract;
	end;

	ExternalResultSetVTable = class(DisposableVTable)
		fetch: ExternalResultSet_fetchPtr;
	end;

	ExternalResultSet = class(Disposable)
		const VERSION = 2;

		function fetch(status: Status): Boolean;
	end;

	ExternalResultSetImpl = class(ExternalResultSet)
		constructor create;

		procedure dispose(); virtual; abstract;
		function fetch(status: Status): Boolean; virtual; abstract;
	end;

	ExternalFunctionVTable = class(DisposableVTable)
		getCharSet: ExternalFunction_getCharSetPtr;
		execute: ExternalFunction_executePtr;
	end;

	ExternalFunction = class(Disposable)
		const VERSION = 3;

		procedure getCharSet(status: Status; context: ExternalContext; name: PAnsiChar; nameSize: Cardinal);
		procedure execute(status: Status; context: ExternalContext; inMsg: Pointer; outMsg: Pointer);
	end;

	ExternalFunctionImpl = class(ExternalFunction)
		constructor create;

		procedure dispose(); virtual; abstract;
		procedure getCharSet(status: Status; context: ExternalContext; name: PAnsiChar; nameSize: Cardinal); virtual; abstract;
		procedure execute(status: Status; context: ExternalContext; inMsg: Pointer; outMsg: Pointer); virtual; abstract;
	end;

	ExternalProcedureVTable = class(DisposableVTable)
		getCharSet: ExternalProcedure_getCharSetPtr;
		open: ExternalProcedure_openPtr;
	end;

	ExternalProcedure = class(Disposable)
		const VERSION = 3;

		procedure getCharSet(status: Status; context: ExternalContext; name: PAnsiChar; nameSize: Cardinal);
		function open(status: Status; context: ExternalContext; inMsg: Pointer; outMsg: Pointer): ExternalResultSet;
	end;

	ExternalProcedureImpl = class(ExternalProcedure)
		constructor create;

		procedure dispose(); virtual; abstract;
		procedure getCharSet(status: Status; context: ExternalContext; name: PAnsiChar; nameSize: Cardinal); virtual; abstract;
		function open(status: Status; context: ExternalContext; inMsg: Pointer; outMsg: Pointer): ExternalResultSet; virtual; abstract;
	end;

	ExternalTriggerVTable = class(DisposableVTable)
		getCharSet: ExternalTrigger_getCharSetPtr;
		execute: ExternalTrigger_executePtr;
	end;

	ExternalTrigger = class(Disposable)
		const VERSION = 3;
		const TYPE_BEFORE = Cardinal(1);
		const TYPE_AFTER = Cardinal(2);
		const TYPE_DATABASE = Cardinal(3);
		const ACTION_INSERT = Cardinal(1);
		const ACTION_UPDATE = Cardinal(2);
		const ACTION_DELETE = Cardinal(3);
		const ACTION_CONNECT = Cardinal(4);
		const ACTION_DISCONNECT = Cardinal(5);
		const ACTION_TRANS_START = Cardinal(6);
		const ACTION_TRANS_COMMIT = Cardinal(7);
		const ACTION_TRANS_ROLLBACK = Cardinal(8);
		const ACTION_DDL = Cardinal(9);

		procedure getCharSet(status: Status; context: ExternalContext; name: PAnsiChar; nameSize: Cardinal);
		procedure execute(status: Status; context: ExternalContext; action: Cardinal; oldMsg: Pointer; newMsg: Pointer);
	end;

	ExternalTriggerImpl = class(ExternalTrigger)
		constructor create;

		procedure dispose(); virtual; abstract;
		procedure getCharSet(status: Status; context: ExternalContext; name: PAnsiChar; nameSize: Cardinal); virtual; abstract;
		procedure execute(status: Status; context: ExternalContext; action: Cardinal; oldMsg: Pointer; newMsg: Pointer); virtual; abstract;
	end;

	RoutineMetadataVTable = class(VersionedVTable)
		getPackage: RoutineMetadata_getPackagePtr;
		getName: RoutineMetadata_getNamePtr;
		getEntryPoint: RoutineMetadata_getEntryPointPtr;
		getBody: RoutineMetadata_getBodyPtr;
		getInputMetadata: RoutineMetadata_getInputMetadataPtr;
		getOutputMetadata: RoutineMetadata_getOutputMetadataPtr;
		getTriggerMetadata: RoutineMetadata_getTriggerMetadataPtr;
		getTriggerTable: RoutineMetadata_getTriggerTablePtr;
		getTriggerType: RoutineMetadata_getTriggerTypePtr;
	end;

	RoutineMetadata = class(Versioned)
		const VERSION = 9;

		function getPackage(status: Status): PAnsiChar;
		function getName(status: Status): PAnsiChar;
		function getEntryPoint(status: Status): PAnsiChar;
		function getBody(status: Status): PAnsiChar;
		function getInputMetadata(status: Status): MessageMetadata;
		function getOutputMetadata(status: Status): MessageMetadata;
		function getTriggerMetadata(status: Status): MessageMetadata;
		function getTriggerTable(status: Status): PAnsiChar;
		function getTriggerType(status: Status): Cardinal;
	end;

	RoutineMetadataImpl = class(RoutineMetadata)
		constructor create;

		function getPackage(status: Status): PAnsiChar; virtual; abstract;
		function getName(status: Status): PAnsiChar; virtual; abstract;
		function getEntryPoint(status: Status): PAnsiChar; virtual; abstract;
		function getBody(status: Status): PAnsiChar; virtual; abstract;
		function getInputMetadata(status: Status): MessageMetadata; virtual; abstract;
		function getOutputMetadata(status: Status): MessageMetadata; virtual; abstract;
		function getTriggerMetadata(status: Status): MessageMetadata; virtual; abstract;
		function getTriggerTable(status: Status): PAnsiChar; virtual; abstract;
		function getTriggerType(status: Status): Cardinal; virtual; abstract;
	end;

	ExternalEngineVTable = class(PluginBaseVTable)
		open: ExternalEngine_openPtr;
		openAttachment: ExternalEngine_openAttachmentPtr;
		closeAttachment: ExternalEngine_closeAttachmentPtr;
		makeFunction: ExternalEngine_makeFunctionPtr;
		makeProcedure: ExternalEngine_makeProcedurePtr;
		makeTrigger: ExternalEngine_makeTriggerPtr;
	end;

	ExternalEngine = class(PluginBase)
		const VERSION = 10;

		procedure open(status: Status; context: ExternalContext; charSet: PAnsiChar; charSetSize: Cardinal);
		procedure openAttachment(status: Status; context: ExternalContext);
		procedure closeAttachment(status: Status; context: ExternalContext);
		function makeFunction(status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder): ExternalFunction;
		function makeProcedure(status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder): ExternalProcedure;
		function makeTrigger(status: Status; context: ExternalContext; metadata: RoutineMetadata; fieldsBuilder: MetadataBuilder): ExternalTrigger;
	end;

	ExternalEngineImpl = class(ExternalEngine)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure setOwner(r: ReferenceCounted); virtual; abstract;
		function getOwner(): ReferenceCounted; virtual; abstract;
		procedure open(status: Status; context: ExternalContext; charSet: PAnsiChar; charSetSize: Cardinal); virtual; abstract;
		procedure openAttachment(status: Status; context: ExternalContext); virtual; abstract;
		procedure closeAttachment(status: Status; context: ExternalContext); virtual; abstract;
		function makeFunction(status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder): ExternalFunction; virtual; abstract;
		function makeProcedure(status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder): ExternalProcedure; virtual; abstract;
		function makeTrigger(status: Status; context: ExternalContext; metadata: RoutineMetadata; fieldsBuilder: MetadataBuilder): ExternalTrigger; virtual; abstract;
	end;

	TimerVTable = class(ReferenceCountedVTable)
		handler: Timer_handlerPtr;
	end;

	Timer = class(ReferenceCounted)
		const VERSION = 3;

		procedure handler();
	end;

	TimerImpl = class(Timer)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure handler(); virtual; abstract;
	end;

	TimerControlVTable = class(VersionedVTable)
		start: TimerControl_startPtr;
		stop: TimerControl_stopPtr;
	end;

	TimerControl = class(Versioned)
		const VERSION = 2;

		procedure start(status: Status; timer: Timer; microSeconds: QWord);
		procedure stop(status: Status; timer: Timer);
	end;

	TimerControlImpl = class(TimerControl)
		constructor create;

		procedure start(status: Status; timer: Timer; microSeconds: QWord); virtual; abstract;
		procedure stop(status: Status; timer: Timer); virtual; abstract;
	end;

	VersionCallbackVTable = class(VersionedVTable)
		callback: VersionCallback_callbackPtr;
	end;

	VersionCallback = class(Versioned)
		const VERSION = 1;

		procedure callback(status: Status; text: PAnsiChar);
	end;

	VersionCallbackImpl = class(VersionCallback)
		constructor create;

		procedure callback(status: Status; text: PAnsiChar); virtual; abstract;
	end;

	UtilVTable = class(VersionedVTable)
		getFbVersion: Util_getFbVersionPtr;
		loadBlob: Util_loadBlobPtr;
		dumpBlob: Util_dumpBlobPtr;
		getPerfCounters: Util_getPerfCountersPtr;
		executeCreateDatabase: Util_executeCreateDatabasePtr;
		decodeDate: Util_decodeDatePtr;
		decodeTime: Util_decodeTimePtr;
		encodeDate: Util_encodeDatePtr;
		encodeTime: Util_encodeTimePtr;
		formatStatus: Util_formatStatusPtr;
		getClientVersion: Util_getClientVersionPtr;
		getXpbBuilder: Util_getXpbBuilderPtr;
	end;

	Util = class(Versioned)
		const VERSION = 12;

		procedure getFbVersion(status: Status; att: Attachment; callback: VersionCallback);
		procedure loadBlob(status: Status; blobId: ISC_QUADPtr; att: Attachment; tra: Transaction; file_: PAnsiChar; txt: Boolean);
		procedure dumpBlob(status: Status; blobId: ISC_QUADPtr; att: Attachment; tra: Transaction; file_: PAnsiChar; txt: Boolean);
		procedure getPerfCounters(status: Status; att: Attachment; countersSet: PAnsiChar; counters: Int64Ptr);
		function executeCreateDatabase(status: Status; stmtLength: Cardinal; creatDBstatement: PAnsiChar; dialect: Cardinal; stmtIsCreateDb: BooleanPtr): Attachment;
		procedure decodeDate(date: ISC_DATE; year: CardinalPtr; month: CardinalPtr; day: CardinalPtr);
		procedure decodeTime(time: ISC_TIME; hours: CardinalPtr; minutes: CardinalPtr; seconds: CardinalPtr; fractions: CardinalPtr);
		function encodeDate(year: Cardinal; month: Cardinal; day: Cardinal): ISC_DATE;
		function encodeTime(hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal): ISC_TIME;
		function formatStatus(buffer: PAnsiChar; bufferSize: Cardinal; status: Status): Cardinal;
		function getClientVersion(): Cardinal;
		function getXpbBuilder(status: Status; kind: Cardinal; buf: BytePtr; len: Cardinal): XpbBuilder;
	end;

	UtilImpl = class(Util)
		constructor create;

		procedure getFbVersion(status: Status; att: Attachment; callback: VersionCallback); virtual; abstract;
		procedure loadBlob(status: Status; blobId: ISC_QUADPtr; att: Attachment; tra: Transaction; file_: PAnsiChar; txt: Boolean); virtual; abstract;
		procedure dumpBlob(status: Status; blobId: ISC_QUADPtr; att: Attachment; tra: Transaction; file_: PAnsiChar; txt: Boolean); virtual; abstract;
		procedure getPerfCounters(status: Status; att: Attachment; countersSet: PAnsiChar; counters: Int64Ptr); virtual; abstract;
		function executeCreateDatabase(status: Status; stmtLength: Cardinal; creatDBstatement: PAnsiChar; dialect: Cardinal; stmtIsCreateDb: BooleanPtr): Attachment; virtual; abstract;
		procedure decodeDate(date: ISC_DATE; year: CardinalPtr; month: CardinalPtr; day: CardinalPtr); virtual; abstract;
		procedure decodeTime(time: ISC_TIME; hours: CardinalPtr; minutes: CardinalPtr; seconds: CardinalPtr; fractions: CardinalPtr); virtual; abstract;
		function encodeDate(year: Cardinal; month: Cardinal; day: Cardinal): ISC_DATE; virtual; abstract;
		function encodeTime(hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal): ISC_TIME; virtual; abstract;
		function formatStatus(buffer: PAnsiChar; bufferSize: Cardinal; status: Status): Cardinal; virtual; abstract;
		function getClientVersion(): Cardinal; virtual; abstract;
		function getXpbBuilder(status: Status; kind: Cardinal; buf: BytePtr; len: Cardinal): XpbBuilder; virtual; abstract;
	end;

	XpbBuilderVTable = class(DisposableVTable)
		clear: XpbBuilder_clearPtr;
		removeCurrent: XpbBuilder_removeCurrentPtr;
		insertInt: XpbBuilder_insertIntPtr;
		insertBigInt: XpbBuilder_insertBigIntPtr;
		insertBytes: XpbBuilder_insertBytesPtr;
		insertString: XpbBuilder_insertStringPtr;
		insertTag: XpbBuilder_insertTagPtr;
		isEof: XpbBuilder_isEofPtr;
		moveNext: XpbBuilder_moveNextPtr;
		rewind: XpbBuilder_rewindPtr;
		findFirst: XpbBuilder_findFirstPtr;
		findNext: XpbBuilder_findNextPtr;
		getTag: XpbBuilder_getTagPtr;
		getLength: XpbBuilder_getLengthPtr;
		getInt: XpbBuilder_getIntPtr;
		getBigInt: XpbBuilder_getBigIntPtr;
		getString: XpbBuilder_getStringPtr;
		getBytes: XpbBuilder_getBytesPtr;
		getBufferLength: XpbBuilder_getBufferLengthPtr;
		getBuffer: XpbBuilder_getBufferPtr;
	end;

	XpbBuilder = class(Disposable)
		const VERSION = 21;
		const DPB = Cardinal(1);
		const SPB_ATTACH = Cardinal(2);
		const SPB_START = Cardinal(3);
		const TPB = Cardinal(4);

		procedure clear(status: Status);
		procedure removeCurrent(status: Status);
		procedure insertInt(status: Status; tag: Byte; value: Integer);
		procedure insertBigInt(status: Status; tag: Byte; value: Int64);
		procedure insertBytes(status: Status; tag: Byte; bytes: Pointer; length: Cardinal);
		procedure insertString(status: Status; tag: Byte; str: PAnsiChar);
		procedure insertTag(status: Status; tag: Byte);
		function isEof(status: Status): Boolean;
		procedure moveNext(status: Status);
		procedure rewind(status: Status);
		function findFirst(status: Status; tag: Byte): Boolean;
		function findNext(status: Status): Boolean;
		function getTag(status: Status): Byte;
		function getLength(status: Status): Cardinal;
		function getInt(status: Status): Integer;
		function getBigInt(status: Status): Int64;
		function getString(status: Status): PAnsiChar;
		function getBytes(status: Status): BytePtr;
		function getBufferLength(status: Status): Cardinal;
		function getBuffer(status: Status): BytePtr;
	end;

	XpbBuilderImpl = class(XpbBuilder)
		constructor create;

		procedure dispose(); virtual; abstract;
		procedure clear(status: Status); virtual; abstract;
		procedure removeCurrent(status: Status); virtual; abstract;
		procedure insertInt(status: Status; tag: Byte; value: Integer); virtual; abstract;
		procedure insertBigInt(status: Status; tag: Byte; value: Int64); virtual; abstract;
		procedure insertBytes(status: Status; tag: Byte; bytes: Pointer; length: Cardinal); virtual; abstract;
		procedure insertString(status: Status; tag: Byte; str: PAnsiChar); virtual; abstract;
		procedure insertTag(status: Status; tag: Byte); virtual; abstract;
		function isEof(status: Status): Boolean; virtual; abstract;
		procedure moveNext(status: Status); virtual; abstract;
		procedure rewind(status: Status); virtual; abstract;
		function findFirst(status: Status; tag: Byte): Boolean; virtual; abstract;
		function findNext(status: Status): Boolean; virtual; abstract;
		function getTag(status: Status): Byte; virtual; abstract;
		function getLength(status: Status): Cardinal; virtual; abstract;
		function getInt(status: Status): Integer; virtual; abstract;
		function getBigInt(status: Status): Int64; virtual; abstract;
		function getString(status: Status): PAnsiChar; virtual; abstract;
		function getBytes(status: Status): BytePtr; virtual; abstract;
		function getBufferLength(status: Status): Cardinal; virtual; abstract;
		function getBuffer(status: Status): BytePtr; virtual; abstract;
	end;

	TraceConnectionVTable = class(VersionedVTable)
		getKind: TraceConnection_getKindPtr;
		getProcessID: TraceConnection_getProcessIDPtr;
		getUserName: TraceConnection_getUserNamePtr;
		getRoleName: TraceConnection_getRoleNamePtr;
		getCharSet: TraceConnection_getCharSetPtr;
		getRemoteProtocol: TraceConnection_getRemoteProtocolPtr;
		getRemoteAddress: TraceConnection_getRemoteAddressPtr;
		getRemoteProcessID: TraceConnection_getRemoteProcessIDPtr;
		getRemoteProcessName: TraceConnection_getRemoteProcessNamePtr;
	end;

	TraceConnection = class(Versioned)
		const VERSION = 9;
		const KIND_DATABASE = Cardinal(1);
		const KIND_SERVICE = Cardinal(2);

		function getKind(): Cardinal;
		function getProcessID(): Integer;
		function getUserName(): PAnsiChar;
		function getRoleName(): PAnsiChar;
		function getCharSet(): PAnsiChar;
		function getRemoteProtocol(): PAnsiChar;
		function getRemoteAddress(): PAnsiChar;
		function getRemoteProcessID(): Integer;
		function getRemoteProcessName(): PAnsiChar;
	end;

	TraceConnectionImpl = class(TraceConnection)
		constructor create;

		function getKind(): Cardinal; virtual; abstract;
		function getProcessID(): Integer; virtual; abstract;
		function getUserName(): PAnsiChar; virtual; abstract;
		function getRoleName(): PAnsiChar; virtual; abstract;
		function getCharSet(): PAnsiChar; virtual; abstract;
		function getRemoteProtocol(): PAnsiChar; virtual; abstract;
		function getRemoteAddress(): PAnsiChar; virtual; abstract;
		function getRemoteProcessID(): Integer; virtual; abstract;
		function getRemoteProcessName(): PAnsiChar; virtual; abstract;
	end;

	TraceDatabaseConnectionVTable = class(TraceConnectionVTable)
		getConnectionID: TraceDatabaseConnection_getConnectionIDPtr;
		getDatabaseName: TraceDatabaseConnection_getDatabaseNamePtr;
	end;

	TraceDatabaseConnection = class(TraceConnection)
		const VERSION = 11;

		function getConnectionID(): Integer;
		function getDatabaseName(): PAnsiChar;
	end;

	TraceDatabaseConnectionImpl = class(TraceDatabaseConnection)
		constructor create;

		function getKind(): Cardinal; virtual; abstract;
		function getProcessID(): Integer; virtual; abstract;
		function getUserName(): PAnsiChar; virtual; abstract;
		function getRoleName(): PAnsiChar; virtual; abstract;
		function getCharSet(): PAnsiChar; virtual; abstract;
		function getRemoteProtocol(): PAnsiChar; virtual; abstract;
		function getRemoteAddress(): PAnsiChar; virtual; abstract;
		function getRemoteProcessID(): Integer; virtual; abstract;
		function getRemoteProcessName(): PAnsiChar; virtual; abstract;
		function getConnectionID(): Integer; virtual; abstract;
		function getDatabaseName(): PAnsiChar; virtual; abstract;
	end;

	TraceTransactionVTable = class(VersionedVTable)
		getTransactionID: TraceTransaction_getTransactionIDPtr;
		getReadOnly: TraceTransaction_getReadOnlyPtr;
		getWait: TraceTransaction_getWaitPtr;
		getIsolation: TraceTransaction_getIsolationPtr;
		getPerf: TraceTransaction_getPerfPtr;
	end;

	TraceTransaction = class(Versioned)
		const VERSION = 5;
		const ISOLATION_CONSISTENCY = Cardinal(1);
		const ISOLATION_CONCURRENCY = Cardinal(2);
		const ISOLATION_READ_COMMITTED_RECVER = Cardinal(3);
		const ISOLATION_READ_COMMITTED_NORECVER = Cardinal(4);

		function getTransactionID(): Cardinal;
		function getReadOnly(): Boolean;
		function getWait(): Integer;
		function getIsolation(): Cardinal;
		function getPerf(): PerformanceInfoPtr;
	end;

	TraceTransactionImpl = class(TraceTransaction)
		constructor create;

		function getTransactionID(): Cardinal; virtual; abstract;
		function getReadOnly(): Boolean; virtual; abstract;
		function getWait(): Integer; virtual; abstract;
		function getIsolation(): Cardinal; virtual; abstract;
		function getPerf(): PerformanceInfoPtr; virtual; abstract;
	end;

	TraceParamsVTable = class(VersionedVTable)
		getCount: TraceParams_getCountPtr;
		getParam: TraceParams_getParamPtr;
	end;

	TraceParams = class(Versioned)
		const VERSION = 2;

		function getCount(): Cardinal;
		function getParam(idx: Cardinal): dscPtr;
	end;

	TraceParamsImpl = class(TraceParams)
		constructor create;

		function getCount(): Cardinal; virtual; abstract;
		function getParam(idx: Cardinal): dscPtr; virtual; abstract;
	end;

	TraceStatementVTable = class(VersionedVTable)
		getStmtID: TraceStatement_getStmtIDPtr;
		getPerf: TraceStatement_getPerfPtr;
	end;

	TraceStatement = class(Versioned)
		const VERSION = 2;

		function getStmtID(): Integer;
		function getPerf(): PerformanceInfoPtr;
	end;

	TraceStatementImpl = class(TraceStatement)
		constructor create;

		function getStmtID(): Integer; virtual; abstract;
		function getPerf(): PerformanceInfoPtr; virtual; abstract;
	end;

	TraceSQLStatementVTable = class(TraceStatementVTable)
		getText: TraceSQLStatement_getTextPtr;
		getPlan: TraceSQLStatement_getPlanPtr;
		getInputs: TraceSQLStatement_getInputsPtr;
		getTextUTF8: TraceSQLStatement_getTextUTF8Ptr;
		getExplainedPlan: TraceSQLStatement_getExplainedPlanPtr;
	end;

	TraceSQLStatement = class(TraceStatement)
		const VERSION = 7;

		function getText(): PAnsiChar;
		function getPlan(): PAnsiChar;
		function getInputs(): TraceParams;
		function getTextUTF8(): PAnsiChar;
		function getExplainedPlan(): PAnsiChar;
	end;

	TraceSQLStatementImpl = class(TraceSQLStatement)
		constructor create;

		function getStmtID(): Integer; virtual; abstract;
		function getPerf(): PerformanceInfoPtr; virtual; abstract;
		function getText(): PAnsiChar; virtual; abstract;
		function getPlan(): PAnsiChar; virtual; abstract;
		function getInputs(): TraceParams; virtual; abstract;
		function getTextUTF8(): PAnsiChar; virtual; abstract;
		function getExplainedPlan(): PAnsiChar; virtual; abstract;
	end;

	TraceBLRStatementVTable = class(TraceStatementVTable)
		getData: TraceBLRStatement_getDataPtr;
		getDataLength: TraceBLRStatement_getDataLengthPtr;
		getText: TraceBLRStatement_getTextPtr;
	end;

	TraceBLRStatement = class(TraceStatement)
		const VERSION = 5;

		function getData(): BytePtr;
		function getDataLength(): Cardinal;
		function getText(): PAnsiChar;
	end;

	TraceBLRStatementImpl = class(TraceBLRStatement)
		constructor create;

		function getStmtID(): Integer; virtual; abstract;
		function getPerf(): PerformanceInfoPtr; virtual; abstract;
		function getData(): BytePtr; virtual; abstract;
		function getDataLength(): Cardinal; virtual; abstract;
		function getText(): PAnsiChar; virtual; abstract;
	end;

	TraceDYNRequestVTable = class(VersionedVTable)
		getData: TraceDYNRequest_getDataPtr;
		getDataLength: TraceDYNRequest_getDataLengthPtr;
		getText: TraceDYNRequest_getTextPtr;
	end;

	TraceDYNRequest = class(Versioned)
		const VERSION = 3;

		function getData(): BytePtr;
		function getDataLength(): Cardinal;
		function getText(): PAnsiChar;
	end;

	TraceDYNRequestImpl = class(TraceDYNRequest)
		constructor create;

		function getData(): BytePtr; virtual; abstract;
		function getDataLength(): Cardinal; virtual; abstract;
		function getText(): PAnsiChar; virtual; abstract;
	end;

	TraceContextVariableVTable = class(VersionedVTable)
		getNameSpace: TraceContextVariable_getNameSpacePtr;
		getVarName: TraceContextVariable_getVarNamePtr;
		getVarValue: TraceContextVariable_getVarValuePtr;
	end;

	TraceContextVariable = class(Versioned)
		const VERSION = 3;

		function getNameSpace(): PAnsiChar;
		function getVarName(): PAnsiChar;
		function getVarValue(): PAnsiChar;
	end;

	TraceContextVariableImpl = class(TraceContextVariable)
		constructor create;

		function getNameSpace(): PAnsiChar; virtual; abstract;
		function getVarName(): PAnsiChar; virtual; abstract;
		function getVarValue(): PAnsiChar; virtual; abstract;
	end;

	TraceProcedureVTable = class(VersionedVTable)
		getProcName: TraceProcedure_getProcNamePtr;
		getInputs: TraceProcedure_getInputsPtr;
		getPerf: TraceProcedure_getPerfPtr;
	end;

	TraceProcedure = class(Versioned)
		const VERSION = 3;

		function getProcName(): PAnsiChar;
		function getInputs(): TraceParams;
		function getPerf(): PerformanceInfoPtr;
	end;

	TraceProcedureImpl = class(TraceProcedure)
		constructor create;

		function getProcName(): PAnsiChar; virtual; abstract;
		function getInputs(): TraceParams; virtual; abstract;
		function getPerf(): PerformanceInfoPtr; virtual; abstract;
	end;

	TraceFunctionVTable = class(VersionedVTable)
		getFuncName: TraceFunction_getFuncNamePtr;
		getInputs: TraceFunction_getInputsPtr;
		getResult: TraceFunction_getResultPtr;
		getPerf: TraceFunction_getPerfPtr;
	end;

	TraceFunction = class(Versioned)
		const VERSION = 4;

		function getFuncName(): PAnsiChar;
		function getInputs(): TraceParams;
		function getResult(): TraceParams;
		function getPerf(): PerformanceInfoPtr;
	end;

	TraceFunctionImpl = class(TraceFunction)
		constructor create;

		function getFuncName(): PAnsiChar; virtual; abstract;
		function getInputs(): TraceParams; virtual; abstract;
		function getResult(): TraceParams; virtual; abstract;
		function getPerf(): PerformanceInfoPtr; virtual; abstract;
	end;

	TraceTriggerVTable = class(VersionedVTable)
		getTriggerName: TraceTrigger_getTriggerNamePtr;
		getRelationName: TraceTrigger_getRelationNamePtr;
		getAction: TraceTrigger_getActionPtr;
		getWhich: TraceTrigger_getWhichPtr;
		getPerf: TraceTrigger_getPerfPtr;
	end;

	TraceTrigger = class(Versioned)
		const VERSION = 5;
		const TYPE_ALL = Cardinal(0);
		const TYPE_BEFORE = Cardinal(1);
		const TYPE_AFTER = Cardinal(2);

		function getTriggerName(): PAnsiChar;
		function getRelationName(): PAnsiChar;
		function getAction(): Integer;
		function getWhich(): Integer;
		function getPerf(): PerformanceInfoPtr;
	end;

	TraceTriggerImpl = class(TraceTrigger)
		constructor create;

		function getTriggerName(): PAnsiChar; virtual; abstract;
		function getRelationName(): PAnsiChar; virtual; abstract;
		function getAction(): Integer; virtual; abstract;
		function getWhich(): Integer; virtual; abstract;
		function getPerf(): PerformanceInfoPtr; virtual; abstract;
	end;

	TraceServiceConnectionVTable = class(TraceConnectionVTable)
		getServiceID: TraceServiceConnection_getServiceIDPtr;
		getServiceMgr: TraceServiceConnection_getServiceMgrPtr;
		getServiceName: TraceServiceConnection_getServiceNamePtr;
	end;

	TraceServiceConnection = class(TraceConnection)
		const VERSION = 12;

		function getServiceID(): Pointer;
		function getServiceMgr(): PAnsiChar;
		function getServiceName(): PAnsiChar;
	end;

	TraceServiceConnectionImpl = class(TraceServiceConnection)
		constructor create;

		function getKind(): Cardinal; virtual; abstract;
		function getProcessID(): Integer; virtual; abstract;
		function getUserName(): PAnsiChar; virtual; abstract;
		function getRoleName(): PAnsiChar; virtual; abstract;
		function getCharSet(): PAnsiChar; virtual; abstract;
		function getRemoteProtocol(): PAnsiChar; virtual; abstract;
		function getRemoteAddress(): PAnsiChar; virtual; abstract;
		function getRemoteProcessID(): Integer; virtual; abstract;
		function getRemoteProcessName(): PAnsiChar; virtual; abstract;
		function getServiceID(): Pointer; virtual; abstract;
		function getServiceMgr(): PAnsiChar; virtual; abstract;
		function getServiceName(): PAnsiChar; virtual; abstract;
	end;

	TraceStatusVectorVTable = class(VersionedVTable)
		hasError: TraceStatusVector_hasErrorPtr;
		hasWarning: TraceStatusVector_hasWarningPtr;
		getStatus: TraceStatusVector_getStatusPtr;
		getText: TraceStatusVector_getTextPtr;
	end;

	TraceStatusVector = class(Versioned)
		const VERSION = 4;

		function hasError(): Boolean;
		function hasWarning(): Boolean;
		function getStatus(): Status;
		function getText(): PAnsiChar;
	end;

	TraceStatusVectorImpl = class(TraceStatusVector)
		constructor create;

		function hasError(): Boolean; virtual; abstract;
		function hasWarning(): Boolean; virtual; abstract;
		function getStatus(): Status; virtual; abstract;
		function getText(): PAnsiChar; virtual; abstract;
	end;

	TraceSweepInfoVTable = class(VersionedVTable)
		getOIT: TraceSweepInfo_getOITPtr;
		getOST: TraceSweepInfo_getOSTPtr;
		getOAT: TraceSweepInfo_getOATPtr;
		getNext: TraceSweepInfo_getNextPtr;
		getPerf: TraceSweepInfo_getPerfPtr;
	end;

	TraceSweepInfo = class(Versioned)
		const VERSION = 5;

		function getOIT(): QWord;
		function getOST(): QWord;
		function getOAT(): QWord;
		function getNext(): QWord;
		function getPerf(): PerformanceInfoPtr;
	end;

	TraceSweepInfoImpl = class(TraceSweepInfo)
		constructor create;

		function getOIT(): QWord; virtual; abstract;
		function getOST(): QWord; virtual; abstract;
		function getOAT(): QWord; virtual; abstract;
		function getNext(): QWord; virtual; abstract;
		function getPerf(): PerformanceInfoPtr; virtual; abstract;
	end;

	TraceLogWriterVTable = class(ReferenceCountedVTable)
		write: TraceLogWriter_writePtr;
	end;

	TraceLogWriter = class(ReferenceCounted)
		const VERSION = 3;

		function write(buf: Pointer; size: Cardinal): Cardinal;
	end;

	TraceLogWriterImpl = class(TraceLogWriter)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		function write(buf: Pointer; size: Cardinal): Cardinal; virtual; abstract;
	end;

	TraceInitInfoVTable = class(VersionedVTable)
		getConfigText: TraceInitInfo_getConfigTextPtr;
		getTraceSessionID: TraceInitInfo_getTraceSessionIDPtr;
		getTraceSessionName: TraceInitInfo_getTraceSessionNamePtr;
		getFirebirdRootDirectory: TraceInitInfo_getFirebirdRootDirectoryPtr;
		getDatabaseName: TraceInitInfo_getDatabaseNamePtr;
		getConnection: TraceInitInfo_getConnectionPtr;
		getLogWriter: TraceInitInfo_getLogWriterPtr;
	end;

	TraceInitInfo = class(Versioned)
		const VERSION = 7;

		function getConfigText(): PAnsiChar;
		function getTraceSessionID(): Integer;
		function getTraceSessionName(): PAnsiChar;
		function getFirebirdRootDirectory(): PAnsiChar;
		function getDatabaseName(): PAnsiChar;
		function getConnection(): TraceDatabaseConnection;
		function getLogWriter(): TraceLogWriter;
	end;

	TraceInitInfoImpl = class(TraceInitInfo)
		constructor create;

		function getConfigText(): PAnsiChar; virtual; abstract;
		function getTraceSessionID(): Integer; virtual; abstract;
		function getTraceSessionName(): PAnsiChar; virtual; abstract;
		function getFirebirdRootDirectory(): PAnsiChar; virtual; abstract;
		function getDatabaseName(): PAnsiChar; virtual; abstract;
		function getConnection(): TraceDatabaseConnection; virtual; abstract;
		function getLogWriter(): TraceLogWriter; virtual; abstract;
	end;

	TracePluginVTable = class(ReferenceCountedVTable)
		trace_get_error: TracePlugin_trace_get_errorPtr;
		trace_attach: TracePlugin_trace_attachPtr;
		trace_detach: TracePlugin_trace_detachPtr;
		trace_transaction_start: TracePlugin_trace_transaction_startPtr;
		trace_transaction_end: TracePlugin_trace_transaction_endPtr;
		trace_proc_execute: TracePlugin_trace_proc_executePtr;
		trace_trigger_execute: TracePlugin_trace_trigger_executePtr;
		trace_set_context: TracePlugin_trace_set_contextPtr;
		trace_dsql_prepare: TracePlugin_trace_dsql_preparePtr;
		trace_dsql_free: TracePlugin_trace_dsql_freePtr;
		trace_dsql_execute: TracePlugin_trace_dsql_executePtr;
		trace_blr_compile: TracePlugin_trace_blr_compilePtr;
		trace_blr_execute: TracePlugin_trace_blr_executePtr;
		trace_dyn_execute: TracePlugin_trace_dyn_executePtr;
		trace_service_attach: TracePlugin_trace_service_attachPtr;
		trace_service_start: TracePlugin_trace_service_startPtr;
		trace_service_query: TracePlugin_trace_service_queryPtr;
		trace_service_detach: TracePlugin_trace_service_detachPtr;
		trace_event_error: TracePlugin_trace_event_errorPtr;
		trace_event_sweep: TracePlugin_trace_event_sweepPtr;
		trace_func_execute: TracePlugin_trace_func_executePtr;
	end;

	TracePlugin = class(ReferenceCounted)
		const VERSION = 23;
		const RESULT_SUCCESS = Cardinal(0);
		const RESULT_FAILED = Cardinal(1);
		const RESULT_UNAUTHORIZED = Cardinal(2);
		const SWEEP_STATE_STARTED = Cardinal(1);
		const SWEEP_STATE_FINISHED = Cardinal(2);
		const SWEEP_STATE_FAILED = Cardinal(3);
		const SWEEP_STATE_PROGRESS = Cardinal(4);

		function trace_get_error(): PAnsiChar;
		function trace_attach(connection: TraceDatabaseConnection; create_db: Boolean; att_result: Cardinal): Boolean;
		function trace_detach(connection: TraceDatabaseConnection; drop_db: Boolean): Boolean;
		function trace_transaction_start(connection: TraceDatabaseConnection; transaction: TraceTransaction; tpb_length: Cardinal; tpb: BytePtr; tra_result: Cardinal): Boolean;
		function trace_transaction_end(connection: TraceDatabaseConnection; transaction: TraceTransaction; commit: Boolean; retain_context: Boolean; tra_result: Cardinal): Boolean;
		function trace_proc_execute(connection: TraceDatabaseConnection; transaction: TraceTransaction; procedure_: TraceProcedure; started: Boolean; proc_result: Cardinal): Boolean;
		function trace_trigger_execute(connection: TraceDatabaseConnection; transaction: TraceTransaction; trigger: TraceTrigger; started: Boolean; trig_result: Cardinal): Boolean;
		function trace_set_context(connection: TraceDatabaseConnection; transaction: TraceTransaction; variable: TraceContextVariable): Boolean;
		function trace_dsql_prepare(connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceSQLStatement; time_millis: Int64; req_result: Cardinal): Boolean;
		function trace_dsql_free(connection: TraceDatabaseConnection; statement: TraceSQLStatement; option: Cardinal): Boolean;
		function trace_dsql_execute(connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceSQLStatement; started: Boolean; req_result: Cardinal): Boolean;
		function trace_blr_compile(connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceBLRStatement; time_millis: Int64; req_result: Cardinal): Boolean;
		function trace_blr_execute(connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceBLRStatement; req_result: Cardinal): Boolean;
		function trace_dyn_execute(connection: TraceDatabaseConnection; transaction: TraceTransaction; request: TraceDYNRequest; time_millis: Int64; req_result: Cardinal): Boolean;
		function trace_service_attach(service: TraceServiceConnection; att_result: Cardinal): Boolean;
		function trace_service_start(service: TraceServiceConnection; switches_length: Cardinal; switches: PAnsiChar; start_result: Cardinal): Boolean;
		function trace_service_query(service: TraceServiceConnection; send_item_length: Cardinal; send_items: BytePtr; recv_item_length: Cardinal; recv_items: BytePtr; query_result: Cardinal): Boolean;
		function trace_service_detach(service: TraceServiceConnection; detach_result: Cardinal): Boolean;
		function trace_event_error(connection: TraceConnection; status: TraceStatusVector; function_: PAnsiChar): Boolean;
		function trace_event_sweep(connection: TraceDatabaseConnection; sweep: TraceSweepInfo; sweep_state: Cardinal): Boolean;
		function trace_func_execute(connection: TraceDatabaseConnection; transaction: TraceTransaction; function_: TraceFunction; started: Boolean; func_result: Cardinal): Boolean;
	end;

	TracePluginImpl = class(TracePlugin)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		function trace_get_error(): PAnsiChar; virtual; abstract;
		function trace_attach(connection: TraceDatabaseConnection; create_db: Boolean; att_result: Cardinal): Boolean; virtual; abstract;
		function trace_detach(connection: TraceDatabaseConnection; drop_db: Boolean): Boolean; virtual; abstract;
		function trace_transaction_start(connection: TraceDatabaseConnection; transaction: TraceTransaction; tpb_length: Cardinal; tpb: BytePtr; tra_result: Cardinal): Boolean; virtual; abstract;
		function trace_transaction_end(connection: TraceDatabaseConnection; transaction: TraceTransaction; commit: Boolean; retain_context: Boolean; tra_result: Cardinal): Boolean; virtual; abstract;
		function trace_proc_execute(connection: TraceDatabaseConnection; transaction: TraceTransaction; procedure_: TraceProcedure; started: Boolean; proc_result: Cardinal): Boolean; virtual; abstract;
		function trace_trigger_execute(connection: TraceDatabaseConnection; transaction: TraceTransaction; trigger: TraceTrigger; started: Boolean; trig_result: Cardinal): Boolean; virtual; abstract;
		function trace_set_context(connection: TraceDatabaseConnection; transaction: TraceTransaction; variable: TraceContextVariable): Boolean; virtual; abstract;
		function trace_dsql_prepare(connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceSQLStatement; time_millis: Int64; req_result: Cardinal): Boolean; virtual; abstract;
		function trace_dsql_free(connection: TraceDatabaseConnection; statement: TraceSQLStatement; option: Cardinal): Boolean; virtual; abstract;
		function trace_dsql_execute(connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceSQLStatement; started: Boolean; req_result: Cardinal): Boolean; virtual; abstract;
		function trace_blr_compile(connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceBLRStatement; time_millis: Int64; req_result: Cardinal): Boolean; virtual; abstract;
		function trace_blr_execute(connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceBLRStatement; req_result: Cardinal): Boolean; virtual; abstract;
		function trace_dyn_execute(connection: TraceDatabaseConnection; transaction: TraceTransaction; request: TraceDYNRequest; time_millis: Int64; req_result: Cardinal): Boolean; virtual; abstract;
		function trace_service_attach(service: TraceServiceConnection; att_result: Cardinal): Boolean; virtual; abstract;
		function trace_service_start(service: TraceServiceConnection; switches_length: Cardinal; switches: PAnsiChar; start_result: Cardinal): Boolean; virtual; abstract;
		function trace_service_query(service: TraceServiceConnection; send_item_length: Cardinal; send_items: BytePtr; recv_item_length: Cardinal; recv_items: BytePtr; query_result: Cardinal): Boolean; virtual; abstract;
		function trace_service_detach(service: TraceServiceConnection; detach_result: Cardinal): Boolean; virtual; abstract;
		function trace_event_error(connection: TraceConnection; status: TraceStatusVector; function_: PAnsiChar): Boolean; virtual; abstract;
		function trace_event_sweep(connection: TraceDatabaseConnection; sweep: TraceSweepInfo; sweep_state: Cardinal): Boolean; virtual; abstract;
		function trace_func_execute(connection: TraceDatabaseConnection; transaction: TraceTransaction; function_: TraceFunction; started: Boolean; func_result: Cardinal): Boolean; virtual; abstract;
	end;

	TraceFactoryVTable = class(PluginBaseVTable)
		trace_needs: TraceFactory_trace_needsPtr;
		trace_create: TraceFactory_trace_createPtr;
	end;

	TraceFactory = class(PluginBase)
		const VERSION = 6;
		const TRACE_EVENT_ATTACH = Cardinal(0);
		const TRACE_EVENT_DETACH = Cardinal(1);
		const TRACE_EVENT_TRANSACTION_START = Cardinal(2);
		const TRACE_EVENT_TRANSACTION_END = Cardinal(3);
		const TRACE_EVENT_SET_CONTEXT = Cardinal(4);
		const TRACE_EVENT_PROC_EXECUTE = Cardinal(5);
		const TRACE_EVENT_TRIGGER_EXECUTE = Cardinal(6);
		const TRACE_EVENT_DSQL_PREPARE = Cardinal(7);
		const TRACE_EVENT_DSQL_FREE = Cardinal(8);
		const TRACE_EVENT_DSQL_EXECUTE = Cardinal(9);
		const TRACE_EVENT_BLR_COMPILE = Cardinal(10);
		const TRACE_EVENT_BLR_EXECUTE = Cardinal(11);
		const TRACE_EVENT_DYN_EXECUTE = Cardinal(12);
		const TRACE_EVENT_SERVICE_ATTACH = Cardinal(13);
		const TRACE_EVENT_SERVICE_START = Cardinal(14);
		const TRACE_EVENT_SERVICE_QUERY = Cardinal(15);
		const TRACE_EVENT_SERVICE_DETACH = Cardinal(16);
		const TRACE_EVENT_ERROR = Cardinal(17);
		const TRACE_EVENT_SWEEP = Cardinal(18);
		const TRACE_EVENT_FUNC_EXECUTE = Cardinal(19);
		const TRACE_EVENT_MAX = Cardinal(20);

		function trace_needs(): QWord;
		function trace_create(status: Status; init_info: TraceInitInfo): TracePlugin;
	end;

	TraceFactoryImpl = class(TraceFactory)
		constructor create;

		procedure addRef(); virtual; abstract;
		function release(): Integer; virtual; abstract;
		procedure setOwner(r: ReferenceCounted); virtual; abstract;
		function getOwner(): ReferenceCounted; virtual; abstract;
		function trace_needs(): QWord; virtual; abstract;
		function trace_create(status: Status; init_info: TraceInitInfo): TracePlugin; virtual; abstract;
	end;

	UdrFunctionFactoryVTable = class(DisposableVTable)
		setup: UdrFunctionFactory_setupPtr;
		newItem: UdrFunctionFactory_newItemPtr;
	end;

	UdrFunctionFactory = class(Disposable)
		const VERSION = 3;

		procedure setup(status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder);
		function newItem(status: Status; context: ExternalContext; metadata: RoutineMetadata): ExternalFunction;
	end;

	UdrFunctionFactoryImpl = class(UdrFunctionFactory)
		constructor create;

		procedure dispose(); virtual; abstract;
		procedure setup(status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder); virtual; abstract;
		function newItem(status: Status; context: ExternalContext; metadata: RoutineMetadata): ExternalFunction; virtual; abstract;
	end;

	UdrProcedureFactoryVTable = class(DisposableVTable)
		setup: UdrProcedureFactory_setupPtr;
		newItem: UdrProcedureFactory_newItemPtr;
	end;

	UdrProcedureFactory = class(Disposable)
		const VERSION = 3;

		procedure setup(status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder);
		function newItem(status: Status; context: ExternalContext; metadata: RoutineMetadata): ExternalProcedure;
	end;

	UdrProcedureFactoryImpl = class(UdrProcedureFactory)
		constructor create;

		procedure dispose(); virtual; abstract;
		procedure setup(status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder); virtual; abstract;
		function newItem(status: Status; context: ExternalContext; metadata: RoutineMetadata): ExternalProcedure; virtual; abstract;
	end;

	UdrTriggerFactoryVTable = class(DisposableVTable)
		setup: UdrTriggerFactory_setupPtr;
		newItem: UdrTriggerFactory_newItemPtr;
	end;

	UdrTriggerFactory = class(Disposable)
		const VERSION = 3;

		procedure setup(status: Status; context: ExternalContext; metadata: RoutineMetadata; fieldsBuilder: MetadataBuilder);
		function newItem(status: Status; context: ExternalContext; metadata: RoutineMetadata): ExternalTrigger;
	end;

	UdrTriggerFactoryImpl = class(UdrTriggerFactory)
		constructor create;

		procedure dispose(); virtual; abstract;
		procedure setup(status: Status; context: ExternalContext; metadata: RoutineMetadata; fieldsBuilder: MetadataBuilder); virtual; abstract;
		function newItem(status: Status; context: ExternalContext; metadata: RoutineMetadata): ExternalTrigger; virtual; abstract;
	end;

	UdrPluginVTable = class(VersionedVTable)
		getMaster: UdrPlugin_getMasterPtr;
		registerFunction: UdrPlugin_registerFunctionPtr;
		registerProcedure: UdrPlugin_registerProcedurePtr;
		registerTrigger: UdrPlugin_registerTriggerPtr;
	end;

	UdrPlugin = class(Versioned)
		const VERSION = 4;

		function getMaster(): Master;
		procedure registerFunction(status: Status; name: PAnsiChar; factory: UdrFunctionFactory);
		procedure registerProcedure(status: Status; name: PAnsiChar; factory: UdrProcedureFactory);
		procedure registerTrigger(status: Status; name: PAnsiChar; factory: UdrTriggerFactory);
	end;

	UdrPluginImpl = class(UdrPlugin)
		constructor create;

		function getMaster(): Master; virtual; abstract;
		procedure registerFunction(status: Status; name: PAnsiChar; factory: UdrFunctionFactory); virtual; abstract;
		procedure registerProcedure(status: Status; name: PAnsiChar; factory: UdrProcedureFactory); virtual; abstract;
		procedure registerTrigger(status: Status; name: PAnsiChar; factory: UdrTriggerFactory); virtual; abstract;
	end;

implementation

procedure ReferenceCounted.addRef();
begin
	ReferenceCountedVTable(vTable).addRef(Self);
end;

function ReferenceCounted.release(): Integer;
begin
	Result := ReferenceCountedVTable(vTable).release(Self);
end;

procedure Disposable.dispose();
begin
	DisposableVTable(vTable).dispose(Self);
end;

procedure Status.init();
begin
	StatusVTable(vTable).init(Self);
end;

function Status.getState(): Cardinal;
begin
	Result := StatusVTable(vTable).getState(Self);
end;

procedure Status.setErrors2(length: Cardinal; value: NativeIntPtr);
begin
	StatusVTable(vTable).setErrors2(Self, length, value);
end;

procedure Status.setWarnings2(length: Cardinal; value: NativeIntPtr);
begin
	StatusVTable(vTable).setWarnings2(Self, length, value);
end;

procedure Status.setErrors(value: NativeIntPtr);
begin
	StatusVTable(vTable).setErrors(Self, value);
end;

procedure Status.setWarnings(value: NativeIntPtr);
begin
	StatusVTable(vTable).setWarnings(Self, value);
end;

function Status.getErrors(): NativeIntPtr;
begin
	Result := StatusVTable(vTable).getErrors(Self);
end;

function Status.getWarnings(): NativeIntPtr;
begin
	Result := StatusVTable(vTable).getWarnings(Self);
end;

function Status.clone(): Status;
begin
	Result := StatusVTable(vTable).clone(Self);
end;

function Master.getStatus(): Status;
begin
	Result := MasterVTable(vTable).getStatus(Self);
end;

function Master.getDispatcher(): Provider;
begin
	Result := MasterVTable(vTable).getDispatcher(Self);
end;

function Master.getPluginManager(): PluginManager;
begin
	Result := MasterVTable(vTable).getPluginManager(Self);
end;

function Master.getTimerControl(): TimerControl;
begin
	Result := MasterVTable(vTable).getTimerControl(Self);
end;

function Master.getDtc(): Dtc;
begin
	Result := MasterVTable(vTable).getDtc(Self);
end;

function Master.registerAttachment(provider: Provider; attachment: Attachment): Attachment;
begin
	Result := MasterVTable(vTable).registerAttachment(Self, provider, attachment);
end;

function Master.registerTransaction(attachment: Attachment; transaction: Transaction): Transaction;
begin
	Result := MasterVTable(vTable).registerTransaction(Self, attachment, transaction);
end;

function Master.getMetadataBuilder(status: Status; fieldCount: Cardinal): MetadataBuilder;
begin
	Result := MasterVTable(vTable).getMetadataBuilder(Self, status, fieldCount);
	FbException.checkException(status);
end;

function Master.serverMode(mode: Integer): Integer;
begin
	Result := MasterVTable(vTable).serverMode(Self, mode);
end;

function Master.getUtilInterface(): Util;
begin
	Result := MasterVTable(vTable).getUtilInterface(Self);
end;

function Master.getConfigManager(): ConfigManager;
begin
	Result := MasterVTable(vTable).getConfigManager(Self);
end;

function Master.getProcessExiting(): Boolean;
begin
	Result := MasterVTable(vTable).getProcessExiting(Self);
end;

procedure PluginBase.setOwner(r: ReferenceCounted);
begin
	PluginBaseVTable(vTable).setOwner(Self, r);
end;

function PluginBase.getOwner(): ReferenceCounted;
begin
	Result := PluginBaseVTable(vTable).getOwner(Self);
end;

function PluginSet.getName(): PAnsiChar;
begin
	Result := PluginSetVTable(vTable).getName(Self);
end;

function PluginSet.getModuleName(): PAnsiChar;
begin
	Result := PluginSetVTable(vTable).getModuleName(Self);
end;

function PluginSet.getPlugin(status: Status): PluginBase;
begin
	Result := PluginSetVTable(vTable).getPlugin(Self, status);
	FbException.checkException(status);
end;

procedure PluginSet.next(status: Status);
begin
	PluginSetVTable(vTable).next(Self, status);
	FbException.checkException(status);
end;

procedure PluginSet.set_(status: Status; s: PAnsiChar);
begin
	PluginSetVTable(vTable).set_(Self, status, s);
	FbException.checkException(status);
end;

function ConfigEntry.getName(): PAnsiChar;
begin
	Result := ConfigEntryVTable(vTable).getName(Self);
end;

function ConfigEntry.getValue(): PAnsiChar;
begin
	Result := ConfigEntryVTable(vTable).getValue(Self);
end;

function ConfigEntry.getIntValue(): Int64;
begin
	Result := ConfigEntryVTable(vTable).getIntValue(Self);
end;

function ConfigEntry.getBoolValue(): Boolean;
begin
	Result := ConfigEntryVTable(vTable).getBoolValue(Self);
end;

function ConfigEntry.getSubConfig(status: Status): Config;
begin
	Result := ConfigEntryVTable(vTable).getSubConfig(Self, status);
	FbException.checkException(status);
end;

function Config.find(status: Status; name: PAnsiChar): ConfigEntry;
begin
	Result := ConfigVTable(vTable).find(Self, status, name);
	FbException.checkException(status);
end;

function Config.findValue(status: Status; name: PAnsiChar; value: PAnsiChar): ConfigEntry;
begin
	Result := ConfigVTable(vTable).findValue(Self, status, name, value);
	FbException.checkException(status);
end;

function Config.findPos(status: Status; name: PAnsiChar; pos: Cardinal): ConfigEntry;
begin
	Result := ConfigVTable(vTable).findPos(Self, status, name, pos);
	FbException.checkException(status);
end;

function FirebirdConf.getKey(name: PAnsiChar): Cardinal;
begin
	Result := FirebirdConfVTable(vTable).getKey(Self, name);
end;

function FirebirdConf.asInteger(key: Cardinal): Int64;
begin
	Result := FirebirdConfVTable(vTable).asInteger(Self, key);
end;

function FirebirdConf.asString(key: Cardinal): PAnsiChar;
begin
	Result := FirebirdConfVTable(vTable).asString(Self, key);
end;

function FirebirdConf.asBoolean(key: Cardinal): Boolean;
begin
	Result := FirebirdConfVTable(vTable).asBoolean(Self, key);
end;

function PluginConfig.getConfigFileName(): PAnsiChar;
begin
	Result := PluginConfigVTable(vTable).getConfigFileName(Self);
end;

function PluginConfig.getDefaultConfig(status: Status): Config;
begin
	Result := PluginConfigVTable(vTable).getDefaultConfig(Self, status);
	FbException.checkException(status);
end;

function PluginConfig.getFirebirdConf(status: Status): FirebirdConf;
begin
	Result := PluginConfigVTable(vTable).getFirebirdConf(Self, status);
	FbException.checkException(status);
end;

procedure PluginConfig.setReleaseDelay(status: Status; microSeconds: QWord);
begin
	PluginConfigVTable(vTable).setReleaseDelay(Self, status, microSeconds);
	FbException.checkException(status);
end;

function PluginFactory.createPlugin(status: Status; factoryParameter: PluginConfig): PluginBase;
begin
	Result := PluginFactoryVTable(vTable).createPlugin(Self, status, factoryParameter);
	FbException.checkException(status);
end;

procedure PluginModule.doClean();
begin
	PluginModuleVTable(vTable).doClean(Self);
end;

procedure PluginManager.registerPluginFactory(pluginType: Cardinal; defaultName: PAnsiChar; factory: PluginFactory);
begin
	PluginManagerVTable(vTable).registerPluginFactory(Self, pluginType, defaultName, factory);
end;

procedure PluginManager.registerModule(cleanup: PluginModule);
begin
	PluginManagerVTable(vTable).registerModule(Self, cleanup);
end;

procedure PluginManager.unregisterModule(cleanup: PluginModule);
begin
	PluginManagerVTable(vTable).unregisterModule(Self, cleanup);
end;

function PluginManager.getPlugins(status: Status; pluginType: Cardinal; namesList: PAnsiChar; firebirdConf: FirebirdConf): PluginSet;
begin
	Result := PluginManagerVTable(vTable).getPlugins(Self, status, pluginType, namesList, firebirdConf);
	FbException.checkException(status);
end;

function PluginManager.getConfig(status: Status; filename: PAnsiChar): Config;
begin
	Result := PluginManagerVTable(vTable).getConfig(Self, status, filename);
	FbException.checkException(status);
end;

procedure PluginManager.releasePlugin(plugin: PluginBase);
begin
	PluginManagerVTable(vTable).releasePlugin(Self, plugin);
end;

procedure CryptKey.setSymmetric(status: Status; type_: PAnsiChar; keyLength: Cardinal; key: Pointer);
begin
	CryptKeyVTable(vTable).setSymmetric(Self, status, type_, keyLength, key);
	FbException.checkException(status);
end;

procedure CryptKey.setAsymmetric(status: Status; type_: PAnsiChar; encryptKeyLength: Cardinal; encryptKey: Pointer; decryptKeyLength: Cardinal; decryptKey: Pointer);
begin
	CryptKeyVTable(vTable).setAsymmetric(Self, status, type_, encryptKeyLength, encryptKey, decryptKeyLength, decryptKey);
	FbException.checkException(status);
end;

function CryptKey.getEncryptKey(length: CardinalPtr): Pointer;
begin
	Result := CryptKeyVTable(vTable).getEncryptKey(Self, length);
end;

function CryptKey.getDecryptKey(length: CardinalPtr): Pointer;
begin
	Result := CryptKeyVTable(vTable).getDecryptKey(Self, length);
end;

function ConfigManager.getDirectory(code: Cardinal): PAnsiChar;
begin
	Result := ConfigManagerVTable(vTable).getDirectory(Self, code);
end;

function ConfigManager.getFirebirdConf(): FirebirdConf;
begin
	Result := ConfigManagerVTable(vTable).getFirebirdConf(Self);
end;

function ConfigManager.getDatabaseConf(dbName: PAnsiChar): FirebirdConf;
begin
	Result := ConfigManagerVTable(vTable).getDatabaseConf(Self, dbName);
end;

function ConfigManager.getPluginConfig(configuredPlugin: PAnsiChar): Config;
begin
	Result := ConfigManagerVTable(vTable).getPluginConfig(Self, configuredPlugin);
end;

function ConfigManager.getInstallDirectory(): PAnsiChar;
begin
	Result := ConfigManagerVTable(vTable).getInstallDirectory(Self);
end;

function ConfigManager.getRootDirectory(): PAnsiChar;
begin
	Result := ConfigManagerVTable(vTable).getRootDirectory(Self);
end;

procedure EventCallback.eventCallbackFunction(length: Cardinal; events: BytePtr);
begin
	EventCallbackVTable(vTable).eventCallbackFunction(Self, length, events);
end;

procedure Blob.getInfo(status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr);
begin
	BlobVTable(vTable).getInfo(Self, status, itemsLength, items, bufferLength, buffer);
	FbException.checkException(status);
end;

function Blob.getSegment(status: Status; bufferLength: Cardinal; buffer: Pointer; segmentLength: CardinalPtr): Integer;
begin
	Result := BlobVTable(vTable).getSegment(Self, status, bufferLength, buffer, segmentLength);
	FbException.checkException(status);
end;

procedure Blob.putSegment(status: Status; length: Cardinal; buffer: Pointer);
begin
	BlobVTable(vTable).putSegment(Self, status, length, buffer);
	FbException.checkException(status);
end;

procedure Blob.cancel(status: Status);
begin
	BlobVTable(vTable).cancel(Self, status);
	FbException.checkException(status);
end;

procedure Blob.close(status: Status);
begin
	BlobVTable(vTable).close(Self, status);
	FbException.checkException(status);
end;

function Blob.seek(status: Status; mode: Integer; offset: Integer): Integer;
begin
	Result := BlobVTable(vTable).seek(Self, status, mode, offset);
	FbException.checkException(status);
end;

procedure Transaction.getInfo(status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr);
begin
	TransactionVTable(vTable).getInfo(Self, status, itemsLength, items, bufferLength, buffer);
	FbException.checkException(status);
end;

procedure Transaction.prepare(status: Status; msgLength: Cardinal; message: BytePtr);
begin
	TransactionVTable(vTable).prepare(Self, status, msgLength, message);
	FbException.checkException(status);
end;

procedure Transaction.commit(status: Status);
begin
	TransactionVTable(vTable).commit(Self, status);
	FbException.checkException(status);
end;

procedure Transaction.commitRetaining(status: Status);
begin
	TransactionVTable(vTable).commitRetaining(Self, status);
	FbException.checkException(status);
end;

procedure Transaction.rollback(status: Status);
begin
	TransactionVTable(vTable).rollback(Self, status);
	FbException.checkException(status);
end;

procedure Transaction.rollbackRetaining(status: Status);
begin
	TransactionVTable(vTable).rollbackRetaining(Self, status);
	FbException.checkException(status);
end;

procedure Transaction.disconnect(status: Status);
begin
	TransactionVTable(vTable).disconnect(Self, status);
	FbException.checkException(status);
end;

function Transaction.join(status: Status; transaction: Transaction): Transaction;
begin
	Result := TransactionVTable(vTable).join(Self, status, transaction);
	FbException.checkException(status);
end;

function Transaction.validate(status: Status; attachment: Attachment): Transaction;
begin
	Result := TransactionVTable(vTable).validate(Self, status, attachment);
	FbException.checkException(status);
end;

function Transaction.enterDtc(status: Status): Transaction;
begin
	Result := TransactionVTable(vTable).enterDtc(Self, status);
	FbException.checkException(status);
end;

function MessageMetadata.getCount(status: Status): Cardinal;
begin
	Result := MessageMetadataVTable(vTable).getCount(Self, status);
	FbException.checkException(status);
end;

function MessageMetadata.getField(status: Status; index: Cardinal): PAnsiChar;
begin
	Result := MessageMetadataVTable(vTable).getField(Self, status, index);
	FbException.checkException(status);
end;

function MessageMetadata.getRelation(status: Status; index: Cardinal): PAnsiChar;
begin
	Result := MessageMetadataVTable(vTable).getRelation(Self, status, index);
	FbException.checkException(status);
end;

function MessageMetadata.getOwner(status: Status; index: Cardinal): PAnsiChar;
begin
	Result := MessageMetadataVTable(vTable).getOwner(Self, status, index);
	FbException.checkException(status);
end;

function MessageMetadata.getAlias(status: Status; index: Cardinal): PAnsiChar;
begin
	Result := MessageMetadataVTable(vTable).getAlias(Self, status, index);
	FbException.checkException(status);
end;

function MessageMetadata.getType(status: Status; index: Cardinal): Cardinal;
begin
	Result := MessageMetadataVTable(vTable).getType(Self, status, index);
	FbException.checkException(status);
end;

function MessageMetadata.isNullable(status: Status; index: Cardinal): Boolean;
begin
	Result := MessageMetadataVTable(vTable).isNullable(Self, status, index);
	FbException.checkException(status);
end;

function MessageMetadata.getSubType(status: Status; index: Cardinal): Integer;
begin
	Result := MessageMetadataVTable(vTable).getSubType(Self, status, index);
	FbException.checkException(status);
end;

function MessageMetadata.getLength(status: Status; index: Cardinal): Cardinal;
begin
	Result := MessageMetadataVTable(vTable).getLength(Self, status, index);
	FbException.checkException(status);
end;

function MessageMetadata.getScale(status: Status; index: Cardinal): Integer;
begin
	Result := MessageMetadataVTable(vTable).getScale(Self, status, index);
	FbException.checkException(status);
end;

function MessageMetadata.getCharSet(status: Status; index: Cardinal): Cardinal;
begin
	Result := MessageMetadataVTable(vTable).getCharSet(Self, status, index);
	FbException.checkException(status);
end;

function MessageMetadata.getOffset(status: Status; index: Cardinal): Cardinal;
begin
	Result := MessageMetadataVTable(vTable).getOffset(Self, status, index);
	FbException.checkException(status);
end;

function MessageMetadata.getNullOffset(status: Status; index: Cardinal): Cardinal;
begin
	Result := MessageMetadataVTable(vTable).getNullOffset(Self, status, index);
	FbException.checkException(status);
end;

function MessageMetadata.getBuilder(status: Status): MetadataBuilder;
begin
	Result := MessageMetadataVTable(vTable).getBuilder(Self, status);
	FbException.checkException(status);
end;

function MessageMetadata.getMessageLength(status: Status): Cardinal;
begin
	Result := MessageMetadataVTable(vTable).getMessageLength(Self, status);
	FbException.checkException(status);
end;

procedure MetadataBuilder.setType(status: Status; index: Cardinal; type_: Cardinal);
begin
	MetadataBuilderVTable(vTable).setType(Self, status, index, type_);
	FbException.checkException(status);
end;

procedure MetadataBuilder.setSubType(status: Status; index: Cardinal; subType: Integer);
begin
	MetadataBuilderVTable(vTable).setSubType(Self, status, index, subType);
	FbException.checkException(status);
end;

procedure MetadataBuilder.setLength(status: Status; index: Cardinal; length: Cardinal);
begin
	MetadataBuilderVTable(vTable).setLength(Self, status, index, length);
	FbException.checkException(status);
end;

procedure MetadataBuilder.setCharSet(status: Status; index: Cardinal; charSet: Cardinal);
begin
	MetadataBuilderVTable(vTable).setCharSet(Self, status, index, charSet);
	FbException.checkException(status);
end;

procedure MetadataBuilder.setScale(status: Status; index: Cardinal; scale: Cardinal);
begin
	MetadataBuilderVTable(vTable).setScale(Self, status, index, scale);
	FbException.checkException(status);
end;

procedure MetadataBuilder.truncate(status: Status; count: Cardinal);
begin
	MetadataBuilderVTable(vTable).truncate(Self, status, count);
	FbException.checkException(status);
end;

procedure MetadataBuilder.moveNameToIndex(status: Status; name: PAnsiChar; index: Cardinal);
begin
	MetadataBuilderVTable(vTable).moveNameToIndex(Self, status, name, index);
	FbException.checkException(status);
end;

procedure MetadataBuilder.remove(status: Status; index: Cardinal);
begin
	MetadataBuilderVTable(vTable).remove(Self, status, index);
	FbException.checkException(status);
end;

function MetadataBuilder.addField(status: Status): Cardinal;
begin
	Result := MetadataBuilderVTable(vTable).addField(Self, status);
	FbException.checkException(status);
end;

function MetadataBuilder.getMetadata(status: Status): MessageMetadata;
begin
	Result := MetadataBuilderVTable(vTable).getMetadata(Self, status);
	FbException.checkException(status);
end;

function ResultSet.fetchNext(status: Status; message: Pointer): Integer;
begin
	Result := ResultSetVTable(vTable).fetchNext(Self, status, message);
	FbException.checkException(status);
end;

function ResultSet.fetchPrior(status: Status; message: Pointer): Integer;
begin
	Result := ResultSetVTable(vTable).fetchPrior(Self, status, message);
	FbException.checkException(status);
end;

function ResultSet.fetchFirst(status: Status; message: Pointer): Integer;
begin
	Result := ResultSetVTable(vTable).fetchFirst(Self, status, message);
	FbException.checkException(status);
end;

function ResultSet.fetchLast(status: Status; message: Pointer): Integer;
begin
	Result := ResultSetVTable(vTable).fetchLast(Self, status, message);
	FbException.checkException(status);
end;

function ResultSet.fetchAbsolute(status: Status; position: Integer; message: Pointer): Integer;
begin
	Result := ResultSetVTable(vTable).fetchAbsolute(Self, status, position, message);
	FbException.checkException(status);
end;

function ResultSet.fetchRelative(status: Status; offset: Integer; message: Pointer): Integer;
begin
	Result := ResultSetVTable(vTable).fetchRelative(Self, status, offset, message);
	FbException.checkException(status);
end;

function ResultSet.isEof(status: Status): Boolean;
begin
	Result := ResultSetVTable(vTable).isEof(Self, status);
	FbException.checkException(status);
end;

function ResultSet.isBof(status: Status): Boolean;
begin
	Result := ResultSetVTable(vTable).isBof(Self, status);
	FbException.checkException(status);
end;

function ResultSet.getMetadata(status: Status): MessageMetadata;
begin
	Result := ResultSetVTable(vTable).getMetadata(Self, status);
	FbException.checkException(status);
end;

procedure ResultSet.close(status: Status);
begin
	ResultSetVTable(vTable).close(Self, status);
	FbException.checkException(status);
end;

procedure ResultSet.setDelayedOutputFormat(status: Status; format: MessageMetadata);
begin
	ResultSetVTable(vTable).setDelayedOutputFormat(Self, status, format);
	FbException.checkException(status);
end;

procedure Statement.getInfo(status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr);
begin
	StatementVTable(vTable).getInfo(Self, status, itemsLength, items, bufferLength, buffer);
	FbException.checkException(status);
end;

function Statement.getType(status: Status): Cardinal;
begin
	Result := StatementVTable(vTable).getType(Self, status);
	FbException.checkException(status);
end;

function Statement.getPlan(status: Status; detailed: Boolean): PAnsiChar;
begin
	Result := StatementVTable(vTable).getPlan(Self, status, detailed);
	FbException.checkException(status);
end;

function Statement.getAffectedRecords(status: Status): QWord;
begin
	Result := StatementVTable(vTable).getAffectedRecords(Self, status);
	FbException.checkException(status);
end;

function Statement.getInputMetadata(status: Status): MessageMetadata;
begin
	Result := StatementVTable(vTable).getInputMetadata(Self, status);
	FbException.checkException(status);
end;

function Statement.getOutputMetadata(status: Status): MessageMetadata;
begin
	Result := StatementVTable(vTable).getOutputMetadata(Self, status);
	FbException.checkException(status);
end;

function Statement.execute(status: Status; transaction: Transaction; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; outBuffer: Pointer): Transaction;
begin
	Result := StatementVTable(vTable).execute(Self, status, transaction, inMetadata, inBuffer, outMetadata, outBuffer);
	FbException.checkException(status);
end;

function Statement.openCursor(status: Status; transaction: Transaction; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; flags: Cardinal): ResultSet;
begin
	Result := StatementVTable(vTable).openCursor(Self, status, transaction, inMetadata, inBuffer, outMetadata, flags);
	FbException.checkException(status);
end;

procedure Statement.setCursorName(status: Status; name: PAnsiChar);
begin
	StatementVTable(vTable).setCursorName(Self, status, name);
	FbException.checkException(status);
end;

procedure Statement.free(status: Status);
begin
	StatementVTable(vTable).free(Self, status);
	FbException.checkException(status);
end;

function Statement.getFlags(status: Status): Cardinal;
begin
	Result := StatementVTable(vTable).getFlags(Self, status);
	FbException.checkException(status);
end;

procedure Request.receive(status: Status; level: Integer; msgType: Cardinal; length: Cardinal; message: BytePtr);
begin
	RequestVTable(vTable).receive(Self, status, level, msgType, length, message);
	FbException.checkException(status);
end;

procedure Request.send(status: Status; level: Integer; msgType: Cardinal; length: Cardinal; message: BytePtr);
begin
	RequestVTable(vTable).send(Self, status, level, msgType, length, message);
	FbException.checkException(status);
end;

procedure Request.getInfo(status: Status; level: Integer; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr);
begin
	RequestVTable(vTable).getInfo(Self, status, level, itemsLength, items, bufferLength, buffer);
	FbException.checkException(status);
end;

procedure Request.start(status: Status; tra: Transaction; level: Integer);
begin
	RequestVTable(vTable).start(Self, status, tra, level);
	FbException.checkException(status);
end;

procedure Request.startAndSend(status: Status; tra: Transaction; level: Integer; msgType: Cardinal; length: Cardinal; message: BytePtr);
begin
	RequestVTable(vTable).startAndSend(Self, status, tra, level, msgType, length, message);
	FbException.checkException(status);
end;

procedure Request.unwind(status: Status; level: Integer);
begin
	RequestVTable(vTable).unwind(Self, status, level);
	FbException.checkException(status);
end;

procedure Request.free(status: Status);
begin
	RequestVTable(vTable).free(Self, status);
	FbException.checkException(status);
end;

procedure Events.cancel(status: Status);
begin
	EventsVTable(vTable).cancel(Self, status);
	FbException.checkException(status);
end;

procedure Attachment.getInfo(status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr);
begin
	AttachmentVTable(vTable).getInfo(Self, status, itemsLength, items, bufferLength, buffer);
	FbException.checkException(status);
end;

function Attachment.startTransaction(status: Status; tpbLength: Cardinal; tpb: BytePtr): Transaction;
begin
	Result := AttachmentVTable(vTable).startTransaction(Self, status, tpbLength, tpb);
	FbException.checkException(status);
end;

function Attachment.reconnectTransaction(status: Status; length: Cardinal; id: BytePtr): Transaction;
begin
	Result := AttachmentVTable(vTable).reconnectTransaction(Self, status, length, id);
	FbException.checkException(status);
end;

function Attachment.compileRequest(status: Status; blrLength: Cardinal; blr: BytePtr): Request;
begin
	Result := AttachmentVTable(vTable).compileRequest(Self, status, blrLength, blr);
	FbException.checkException(status);
end;

procedure Attachment.transactRequest(status: Status; transaction: Transaction; blrLength: Cardinal; blr: BytePtr; inMsgLength: Cardinal; inMsg: BytePtr; outMsgLength: Cardinal; outMsg: BytePtr);
begin
	AttachmentVTable(vTable).transactRequest(Self, status, transaction, blrLength, blr, inMsgLength, inMsg, outMsgLength, outMsg);
	FbException.checkException(status);
end;

function Attachment.createBlob(status: Status; transaction: Transaction; id: ISC_QUADPtr; bpbLength: Cardinal; bpb: BytePtr): Blob;
begin
	Result := AttachmentVTable(vTable).createBlob(Self, status, transaction, id, bpbLength, bpb);
	FbException.checkException(status);
end;

function Attachment.openBlob(status: Status; transaction: Transaction; id: ISC_QUADPtr; bpbLength: Cardinal; bpb: BytePtr): Blob;
begin
	Result := AttachmentVTable(vTable).openBlob(Self, status, transaction, id, bpbLength, bpb);
	FbException.checkException(status);
end;

function Attachment.getSlice(status: Status; transaction: Transaction; id: ISC_QUADPtr; sdlLength: Cardinal; sdl: BytePtr; paramLength: Cardinal; param: BytePtr; sliceLength: Integer; slice: BytePtr): Integer;
begin
	Result := AttachmentVTable(vTable).getSlice(Self, status, transaction, id, sdlLength, sdl, paramLength, param, sliceLength, slice);
	FbException.checkException(status);
end;

procedure Attachment.putSlice(status: Status; transaction: Transaction; id: ISC_QUADPtr; sdlLength: Cardinal; sdl: BytePtr; paramLength: Cardinal; param: BytePtr; sliceLength: Integer; slice: BytePtr);
begin
	AttachmentVTable(vTable).putSlice(Self, status, transaction, id, sdlLength, sdl, paramLength, param, sliceLength, slice);
	FbException.checkException(status);
end;

procedure Attachment.executeDyn(status: Status; transaction: Transaction; length: Cardinal; dyn: BytePtr);
begin
	AttachmentVTable(vTable).executeDyn(Self, status, transaction, length, dyn);
	FbException.checkException(status);
end;

function Attachment.prepare(status: Status; tra: Transaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; flags: Cardinal): Statement;
begin
	Result := AttachmentVTable(vTable).prepare(Self, status, tra, stmtLength, sqlStmt, dialect, flags);
	FbException.checkException(status);
end;

function Attachment.execute(status: Status; transaction: Transaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; outBuffer: Pointer): Transaction;
begin
	Result := AttachmentVTable(vTable).execute(Self, status, transaction, stmtLength, sqlStmt, dialect, inMetadata, inBuffer, outMetadata, outBuffer);
	FbException.checkException(status);
end;

function Attachment.openCursor(status: Status; transaction: Transaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; cursorName: PAnsiChar; cursorFlags: Cardinal): ResultSet;
begin
	Result := AttachmentVTable(vTable).openCursor(Self, status, transaction, stmtLength, sqlStmt, dialect, inMetadata, inBuffer, outMetadata, cursorName, cursorFlags);
	FbException.checkException(status);
end;

function Attachment.queEvents(status: Status; callback: EventCallback; length: Cardinal; events: BytePtr): Events;
begin
	Result := AttachmentVTable(vTable).queEvents(Self, status, callback, length, events);
	FbException.checkException(status);
end;

procedure Attachment.cancelOperation(status: Status; option: Integer);
begin
	AttachmentVTable(vTable).cancelOperation(Self, status, option);
	FbException.checkException(status);
end;

procedure Attachment.ping(status: Status);
begin
	AttachmentVTable(vTable).ping(Self, status);
	FbException.checkException(status);
end;

procedure Attachment.detach(status: Status);
begin
	AttachmentVTable(vTable).detach(Self, status);
	FbException.checkException(status);
end;

procedure Attachment.dropDatabase(status: Status);
begin
	AttachmentVTable(vTable).dropDatabase(Self, status);
	FbException.checkException(status);
end;

procedure Service.detach(status: Status);
begin
	ServiceVTable(vTable).detach(Self, status);
	FbException.checkException(status);
end;

procedure Service.query(status: Status; sendLength: Cardinal; sendItems: BytePtr; receiveLength: Cardinal; receiveItems: BytePtr; bufferLength: Cardinal; buffer: BytePtr);
begin
	ServiceVTable(vTable).query(Self, status, sendLength, sendItems, receiveLength, receiveItems, bufferLength, buffer);
	FbException.checkException(status);
end;

procedure Service.start(status: Status; spbLength: Cardinal; spb: BytePtr);
begin
	ServiceVTable(vTable).start(Self, status, spbLength, spb);
	FbException.checkException(status);
end;

function Provider.attachDatabase(status: Status; fileName: PAnsiChar; dpbLength: Cardinal; dpb: BytePtr): Attachment;
begin
	Result := ProviderVTable(vTable).attachDatabase(Self, status, fileName, dpbLength, dpb);
	FbException.checkException(status);
end;

function Provider.createDatabase(status: Status; fileName: PAnsiChar; dpbLength: Cardinal; dpb: BytePtr): Attachment;
begin
	Result := ProviderVTable(vTable).createDatabase(Self, status, fileName, dpbLength, dpb);
	FbException.checkException(status);
end;

function Provider.attachServiceManager(status: Status; service: PAnsiChar; spbLength: Cardinal; spb: BytePtr): Service;
begin
	Result := ProviderVTable(vTable).attachServiceManager(Self, status, service, spbLength, spb);
	FbException.checkException(status);
end;

procedure Provider.shutdown(status: Status; timeout: Cardinal; reason: Integer);
begin
	ProviderVTable(vTable).shutdown(Self, status, timeout, reason);
	FbException.checkException(status);
end;

procedure Provider.setDbCryptCallback(status: Status; cryptCallback: CryptKeyCallback);
begin
	ProviderVTable(vTable).setDbCryptCallback(Self, status, cryptCallback);
	FbException.checkException(status);
end;

procedure DtcStart.addAttachment(status: Status; att: Attachment);
begin
	DtcStartVTable(vTable).addAttachment(Self, status, att);
	FbException.checkException(status);
end;

procedure DtcStart.addWithTpb(status: Status; att: Attachment; length: Cardinal; tpb: BytePtr);
begin
	DtcStartVTable(vTable).addWithTpb(Self, status, att, length, tpb);
	FbException.checkException(status);
end;

function DtcStart.start(status: Status): Transaction;
begin
	Result := DtcStartVTable(vTable).start(Self, status);
	FbException.checkException(status);
end;

function Dtc.join(status: Status; one: Transaction; two: Transaction): Transaction;
begin
	Result := DtcVTable(vTable).join(Self, status, one, two);
	FbException.checkException(status);
end;

function Dtc.startBuilder(status: Status): DtcStart;
begin
	Result := DtcVTable(vTable).startBuilder(Self, status);
	FbException.checkException(status);
end;

procedure Writer.reset();
begin
	WriterVTable(vTable).reset(Self);
end;

procedure Writer.add(status: Status; name: PAnsiChar);
begin
	WriterVTable(vTable).add(Self, status, name);
	FbException.checkException(status);
end;

procedure Writer.setType(status: Status; value: PAnsiChar);
begin
	WriterVTable(vTable).setType(Self, status, value);
	FbException.checkException(status);
end;

procedure Writer.setDb(status: Status; value: PAnsiChar);
begin
	WriterVTable(vTable).setDb(Self, status, value);
	FbException.checkException(status);
end;

function ServerBlock.getLogin(): PAnsiChar;
begin
	Result := ServerBlockVTable(vTable).getLogin(Self);
end;

function ServerBlock.getData(length: CardinalPtr): BytePtr;
begin
	Result := ServerBlockVTable(vTable).getData(Self, length);
end;

procedure ServerBlock.putData(status: Status; length: Cardinal; data: Pointer);
begin
	ServerBlockVTable(vTable).putData(Self, status, length, data);
	FbException.checkException(status);
end;

function ServerBlock.newKey(status: Status): CryptKey;
begin
	Result := ServerBlockVTable(vTable).newKey(Self, status);
	FbException.checkException(status);
end;

function ClientBlock.getLogin(): PAnsiChar;
begin
	Result := ClientBlockVTable(vTable).getLogin(Self);
end;

function ClientBlock.getPassword(): PAnsiChar;
begin
	Result := ClientBlockVTable(vTable).getPassword(Self);
end;

function ClientBlock.getData(length: CardinalPtr): BytePtr;
begin
	Result := ClientBlockVTable(vTable).getData(Self, length);
end;

procedure ClientBlock.putData(status: Status; length: Cardinal; data: Pointer);
begin
	ClientBlockVTable(vTable).putData(Self, status, length, data);
	FbException.checkException(status);
end;

function ClientBlock.newKey(status: Status): CryptKey;
begin
	Result := ClientBlockVTable(vTable).newKey(Self, status);
	FbException.checkException(status);
end;

function Server.authenticate(status: Status; sBlock: ServerBlock; writerInterface: Writer): Integer;
begin
	Result := ServerVTable(vTable).authenticate(Self, status, sBlock, writerInterface);
	FbException.checkException(status);
end;

function Client.authenticate(status: Status; cBlock: ClientBlock): Integer;
begin
	Result := ClientVTable(vTable).authenticate(Self, status, cBlock);
	FbException.checkException(status);
end;

function UserField.entered(): Integer;
begin
	Result := UserFieldVTable(vTable).entered(Self);
end;

function UserField.specified(): Integer;
begin
	Result := UserFieldVTable(vTable).specified(Self);
end;

procedure UserField.setEntered(status: Status; newValue: Integer);
begin
	UserFieldVTable(vTable).setEntered(Self, status, newValue);
	FbException.checkException(status);
end;

function CharUserField.get(): PAnsiChar;
begin
	Result := CharUserFieldVTable(vTable).get(Self);
end;

procedure CharUserField.set_(status: Status; newValue: PAnsiChar);
begin
	CharUserFieldVTable(vTable).set_(Self, status, newValue);
	FbException.checkException(status);
end;

function IntUserField.get(): Integer;
begin
	Result := IntUserFieldVTable(vTable).get(Self);
end;

procedure IntUserField.set_(status: Status; newValue: Integer);
begin
	IntUserFieldVTable(vTable).set_(Self, status, newValue);
	FbException.checkException(status);
end;

function User.operation(): Integer;
begin
	Result := UserVTable(vTable).operation(Self);
end;

function User.userName(): CharUserField;
begin
	Result := UserVTable(vTable).userName(Self);
end;

function User.password(): CharUserField;
begin
	Result := UserVTable(vTable).password(Self);
end;

function User.firstName(): CharUserField;
begin
	Result := UserVTable(vTable).firstName(Self);
end;

function User.lastName(): CharUserField;
begin
	Result := UserVTable(vTable).lastName(Self);
end;

function User.middleName(): CharUserField;
begin
	Result := UserVTable(vTable).middleName(Self);
end;

function User.comment(): CharUserField;
begin
	Result := UserVTable(vTable).comment(Self);
end;

function User.attributes(): CharUserField;
begin
	Result := UserVTable(vTable).attributes(Self);
end;

function User.active(): IntUserField;
begin
	Result := UserVTable(vTable).active(Self);
end;

function User.admin(): IntUserField;
begin
	Result := UserVTable(vTable).admin(Self);
end;

procedure User.clear(status: Status);
begin
	UserVTable(vTable).clear(Self, status);
	FbException.checkException(status);
end;

procedure ListUsers.list(status: Status; user: User);
begin
	ListUsersVTable(vTable).list(Self, status, user);
	FbException.checkException(status);
end;

function LogonInfo.name(): PAnsiChar;
begin
	Result := LogonInfoVTable(vTable).name(Self);
end;

function LogonInfo.role(): PAnsiChar;
begin
	Result := LogonInfoVTable(vTable).role(Self);
end;

function LogonInfo.networkProtocol(): PAnsiChar;
begin
	Result := LogonInfoVTable(vTable).networkProtocol(Self);
end;

function LogonInfo.remoteAddress(): PAnsiChar;
begin
	Result := LogonInfoVTable(vTable).remoteAddress(Self);
end;

function LogonInfo.authBlock(length: CardinalPtr): BytePtr;
begin
	Result := LogonInfoVTable(vTable).authBlock(Self, length);
end;

procedure Management.start(status: Status; logonInfo: LogonInfo);
begin
	ManagementVTable(vTable).start(Self, status, logonInfo);
	FbException.checkException(status);
end;

function Management.execute(status: Status; user: User; callback: ListUsers): Integer;
begin
	Result := ManagementVTable(vTable).execute(Self, status, user, callback);
	FbException.checkException(status);
end;

procedure Management.commit(status: Status);
begin
	ManagementVTable(vTable).commit(Self, status);
	FbException.checkException(status);
end;

procedure Management.rollback(status: Status);
begin
	ManagementVTable(vTable).rollback(Self, status);
	FbException.checkException(status);
end;

function WireCryptPlugin.getKnownTypes(status: Status): PAnsiChar;
begin
	Result := WireCryptPluginVTable(vTable).getKnownTypes(Self, status);
	FbException.checkException(status);
end;

procedure WireCryptPlugin.setKey(status: Status; key: CryptKey);
begin
	WireCryptPluginVTable(vTable).setKey(Self, status, key);
	FbException.checkException(status);
end;

procedure WireCryptPlugin.encrypt(status: Status; length: Cardinal; from: Pointer; to_: Pointer);
begin
	WireCryptPluginVTable(vTable).encrypt(Self, status, length, from, to_);
	FbException.checkException(status);
end;

procedure WireCryptPlugin.decrypt(status: Status; length: Cardinal; from: Pointer; to_: Pointer);
begin
	WireCryptPluginVTable(vTable).decrypt(Self, status, length, from, to_);
	FbException.checkException(status);
end;

function CryptKeyCallback.callback(dataLength: Cardinal; data: Pointer; bufferLength: Cardinal; buffer: Pointer): Cardinal;
begin
	Result := CryptKeyCallbackVTable(vTable).callback(Self, dataLength, data, bufferLength, buffer);
end;

function KeyHolderPlugin.keyCallback(status: Status; callback: CryptKeyCallback): Integer;
begin
	Result := KeyHolderPluginVTable(vTable).keyCallback(Self, status, callback);
	FbException.checkException(status);
end;

function KeyHolderPlugin.keyHandle(status: Status; keyName: PAnsiChar): CryptKeyCallback;
begin
	Result := KeyHolderPluginVTable(vTable).keyHandle(Self, status, keyName);
	FbException.checkException(status);
end;

procedure DbCryptPlugin.setKey(status: Status; length: Cardinal; sources: KeyHolderPluginPtr);
begin
	DbCryptPluginVTable(vTable).setKey(Self, status, length, sources);
	FbException.checkException(status);
end;

procedure DbCryptPlugin.encrypt(status: Status; length: Cardinal; from: Pointer; to_: Pointer);
begin
	DbCryptPluginVTable(vTable).encrypt(Self, status, length, from, to_);
	FbException.checkException(status);
end;

procedure DbCryptPlugin.decrypt(status: Status; length: Cardinal; from: Pointer; to_: Pointer);
begin
	DbCryptPluginVTable(vTable).decrypt(Self, status, length, from, to_);
	FbException.checkException(status);
end;

function ExternalContext.getMaster(): Master;
begin
	Result := ExternalContextVTable(vTable).getMaster(Self);
end;

function ExternalContext.getEngine(status: Status): ExternalEngine;
begin
	Result := ExternalContextVTable(vTable).getEngine(Self, status);
	FbException.checkException(status);
end;

function ExternalContext.getAttachment(status: Status): Attachment;
begin
	Result := ExternalContextVTable(vTable).getAttachment(Self, status);
	FbException.checkException(status);
end;

function ExternalContext.getTransaction(status: Status): Transaction;
begin
	Result := ExternalContextVTable(vTable).getTransaction(Self, status);
	FbException.checkException(status);
end;

function ExternalContext.getUserName(): PAnsiChar;
begin
	Result := ExternalContextVTable(vTable).getUserName(Self);
end;

function ExternalContext.getDatabaseName(): PAnsiChar;
begin
	Result := ExternalContextVTable(vTable).getDatabaseName(Self);
end;

function ExternalContext.getClientCharSet(): PAnsiChar;
begin
	Result := ExternalContextVTable(vTable).getClientCharSet(Self);
end;

function ExternalContext.obtainInfoCode(): Integer;
begin
	Result := ExternalContextVTable(vTable).obtainInfoCode(Self);
end;

function ExternalContext.getInfo(code: Integer): Pointer;
begin
	Result := ExternalContextVTable(vTable).getInfo(Self, code);
end;

function ExternalContext.setInfo(code: Integer; value: Pointer): Pointer;
begin
	Result := ExternalContextVTable(vTable).setInfo(Self, code, value);
end;

function ExternalResultSet.fetch(status: Status): Boolean;
begin
	Result := ExternalResultSetVTable(vTable).fetch(Self, status);
	FbException.checkException(status);
end;

procedure ExternalFunction.getCharSet(status: Status; context: ExternalContext; name: PAnsiChar; nameSize: Cardinal);
begin
	ExternalFunctionVTable(vTable).getCharSet(Self, status, context, name, nameSize);
	FbException.checkException(status);
end;

procedure ExternalFunction.execute(status: Status; context: ExternalContext; inMsg: Pointer; outMsg: Pointer);
begin
	ExternalFunctionVTable(vTable).execute(Self, status, context, inMsg, outMsg);
	FbException.checkException(status);
end;

procedure ExternalProcedure.getCharSet(status: Status; context: ExternalContext; name: PAnsiChar; nameSize: Cardinal);
begin
	ExternalProcedureVTable(vTable).getCharSet(Self, status, context, name, nameSize);
	FbException.checkException(status);
end;

function ExternalProcedure.open(status: Status; context: ExternalContext; inMsg: Pointer; outMsg: Pointer): ExternalResultSet;
begin
	Result := ExternalProcedureVTable(vTable).open(Self, status, context, inMsg, outMsg);
	FbException.checkException(status);
end;

procedure ExternalTrigger.getCharSet(status: Status; context: ExternalContext; name: PAnsiChar; nameSize: Cardinal);
begin
	ExternalTriggerVTable(vTable).getCharSet(Self, status, context, name, nameSize);
	FbException.checkException(status);
end;

procedure ExternalTrigger.execute(status: Status; context: ExternalContext; action: Cardinal; oldMsg: Pointer; newMsg: Pointer);
begin
	ExternalTriggerVTable(vTable).execute(Self, status, context, action, oldMsg, newMsg);
	FbException.checkException(status);
end;

function RoutineMetadata.getPackage(status: Status): PAnsiChar;
begin
	Result := RoutineMetadataVTable(vTable).getPackage(Self, status);
	FbException.checkException(status);
end;

function RoutineMetadata.getName(status: Status): PAnsiChar;
begin
	Result := RoutineMetadataVTable(vTable).getName(Self, status);
	FbException.checkException(status);
end;

function RoutineMetadata.getEntryPoint(status: Status): PAnsiChar;
begin
	Result := RoutineMetadataVTable(vTable).getEntryPoint(Self, status);
	FbException.checkException(status);
end;

function RoutineMetadata.getBody(status: Status): PAnsiChar;
begin
	Result := RoutineMetadataVTable(vTable).getBody(Self, status);
	FbException.checkException(status);
end;

function RoutineMetadata.getInputMetadata(status: Status): MessageMetadata;
begin
	Result := RoutineMetadataVTable(vTable).getInputMetadata(Self, status);
	FbException.checkException(status);
end;

function RoutineMetadata.getOutputMetadata(status: Status): MessageMetadata;
begin
	Result := RoutineMetadataVTable(vTable).getOutputMetadata(Self, status);
	FbException.checkException(status);
end;

function RoutineMetadata.getTriggerMetadata(status: Status): MessageMetadata;
begin
	Result := RoutineMetadataVTable(vTable).getTriggerMetadata(Self, status);
	FbException.checkException(status);
end;

function RoutineMetadata.getTriggerTable(status: Status): PAnsiChar;
begin
	Result := RoutineMetadataVTable(vTable).getTriggerTable(Self, status);
	FbException.checkException(status);
end;

function RoutineMetadata.getTriggerType(status: Status): Cardinal;
begin
	Result := RoutineMetadataVTable(vTable).getTriggerType(Self, status);
	FbException.checkException(status);
end;

procedure ExternalEngine.open(status: Status; context: ExternalContext; charSet: PAnsiChar; charSetSize: Cardinal);
begin
	ExternalEngineVTable(vTable).open(Self, status, context, charSet, charSetSize);
	FbException.checkException(status);
end;

procedure ExternalEngine.openAttachment(status: Status; context: ExternalContext);
begin
	ExternalEngineVTable(vTable).openAttachment(Self, status, context);
	FbException.checkException(status);
end;

procedure ExternalEngine.closeAttachment(status: Status; context: ExternalContext);
begin
	ExternalEngineVTable(vTable).closeAttachment(Self, status, context);
	FbException.checkException(status);
end;

function ExternalEngine.makeFunction(status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder): ExternalFunction;
begin
	Result := ExternalEngineVTable(vTable).makeFunction(Self, status, context, metadata, inBuilder, outBuilder);
	FbException.checkException(status);
end;

function ExternalEngine.makeProcedure(status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder): ExternalProcedure;
begin
	Result := ExternalEngineVTable(vTable).makeProcedure(Self, status, context, metadata, inBuilder, outBuilder);
	FbException.checkException(status);
end;

function ExternalEngine.makeTrigger(status: Status; context: ExternalContext; metadata: RoutineMetadata; fieldsBuilder: MetadataBuilder): ExternalTrigger;
begin
	Result := ExternalEngineVTable(vTable).makeTrigger(Self, status, context, metadata, fieldsBuilder);
	FbException.checkException(status);
end;

procedure Timer.handler();
begin
	TimerVTable(vTable).handler(Self);
end;

procedure TimerControl.start(status: Status; timer: Timer; microSeconds: QWord);
begin
	TimerControlVTable(vTable).start(Self, status, timer, microSeconds);
	FbException.checkException(status);
end;

procedure TimerControl.stop(status: Status; timer: Timer);
begin
	TimerControlVTable(vTable).stop(Self, status, timer);
	FbException.checkException(status);
end;

procedure VersionCallback.callback(status: Status; text: PAnsiChar);
begin
	VersionCallbackVTable(vTable).callback(Self, status, text);
	FbException.checkException(status);
end;

procedure Util.getFbVersion(status: Status; att: Attachment; callback: VersionCallback);
begin
	UtilVTable(vTable).getFbVersion(Self, status, att, callback);
	FbException.checkException(status);
end;

procedure Util.loadBlob(status: Status; blobId: ISC_QUADPtr; att: Attachment; tra: Transaction; file_: PAnsiChar; txt: Boolean);
begin
	UtilVTable(vTable).loadBlob(Self, status, blobId, att, tra, file_, txt);
	FbException.checkException(status);
end;

procedure Util.dumpBlob(status: Status; blobId: ISC_QUADPtr; att: Attachment; tra: Transaction; file_: PAnsiChar; txt: Boolean);
begin
	UtilVTable(vTable).dumpBlob(Self, status, blobId, att, tra, file_, txt);
	FbException.checkException(status);
end;

procedure Util.getPerfCounters(status: Status; att: Attachment; countersSet: PAnsiChar; counters: Int64Ptr);
begin
	UtilVTable(vTable).getPerfCounters(Self, status, att, countersSet, counters);
	FbException.checkException(status);
end;

function Util.executeCreateDatabase(status: Status; stmtLength: Cardinal; creatDBstatement: PAnsiChar; dialect: Cardinal; stmtIsCreateDb: BooleanPtr): Attachment;
begin
	Result := UtilVTable(vTable).executeCreateDatabase(Self, status, stmtLength, creatDBstatement, dialect, stmtIsCreateDb);
	FbException.checkException(status);
end;

procedure Util.decodeDate(date: ISC_DATE; year: CardinalPtr; month: CardinalPtr; day: CardinalPtr);
begin
	UtilVTable(vTable).decodeDate(Self, date, year, month, day);
end;

procedure Util.decodeTime(time: ISC_TIME; hours: CardinalPtr; minutes: CardinalPtr; seconds: CardinalPtr; fractions: CardinalPtr);
begin
	UtilVTable(vTable).decodeTime(Self, time, hours, minutes, seconds, fractions);
end;

function Util.encodeDate(year: Cardinal; month: Cardinal; day: Cardinal): ISC_DATE;
begin
	Result := UtilVTable(vTable).encodeDate(Self, year, month, day);
end;

function Util.encodeTime(hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal): ISC_TIME;
begin
	Result := UtilVTable(vTable).encodeTime(Self, hours, minutes, seconds, fractions);
end;

function Util.formatStatus(buffer: PAnsiChar; bufferSize: Cardinal; status: Status): Cardinal;
begin
	Result := UtilVTable(vTable).formatStatus(Self, buffer, bufferSize, status);
end;

function Util.getClientVersion(): Cardinal;
begin
	Result := UtilVTable(vTable).getClientVersion(Self);
end;

function Util.getXpbBuilder(status: Status; kind: Cardinal; buf: BytePtr; len: Cardinal): XpbBuilder;
begin
	Result := UtilVTable(vTable).getXpbBuilder(Self, status, kind, buf, len);
	FbException.checkException(status);
end;

procedure XpbBuilder.clear(status: Status);
begin
	XpbBuilderVTable(vTable).clear(Self, status);
	FbException.checkException(status);
end;

procedure XpbBuilder.removeCurrent(status: Status);
begin
	XpbBuilderVTable(vTable).removeCurrent(Self, status);
	FbException.checkException(status);
end;

procedure XpbBuilder.insertInt(status: Status; tag: Byte; value: Integer);
begin
	XpbBuilderVTable(vTable).insertInt(Self, status, tag, value);
	FbException.checkException(status);
end;

procedure XpbBuilder.insertBigInt(status: Status; tag: Byte; value: Int64);
begin
	XpbBuilderVTable(vTable).insertBigInt(Self, status, tag, value);
	FbException.checkException(status);
end;

procedure XpbBuilder.insertBytes(status: Status; tag: Byte; bytes: Pointer; length: Cardinal);
begin
	XpbBuilderVTable(vTable).insertBytes(Self, status, tag, bytes, length);
	FbException.checkException(status);
end;

procedure XpbBuilder.insertString(status: Status; tag: Byte; str: PAnsiChar);
begin
	XpbBuilderVTable(vTable).insertString(Self, status, tag, str);
	FbException.checkException(status);
end;

procedure XpbBuilder.insertTag(status: Status; tag: Byte);
begin
	XpbBuilderVTable(vTable).insertTag(Self, status, tag);
	FbException.checkException(status);
end;

function XpbBuilder.isEof(status: Status): Boolean;
begin
	Result := XpbBuilderVTable(vTable).isEof(Self, status);
	FbException.checkException(status);
end;

procedure XpbBuilder.moveNext(status: Status);
begin
	XpbBuilderVTable(vTable).moveNext(Self, status);
	FbException.checkException(status);
end;

procedure XpbBuilder.rewind(status: Status);
begin
	XpbBuilderVTable(vTable).rewind(Self, status);
	FbException.checkException(status);
end;

function XpbBuilder.findFirst(status: Status; tag: Byte): Boolean;
begin
	Result := XpbBuilderVTable(vTable).findFirst(Self, status, tag);
	FbException.checkException(status);
end;

function XpbBuilder.findNext(status: Status): Boolean;
begin
	Result := XpbBuilderVTable(vTable).findNext(Self, status);
	FbException.checkException(status);
end;

function XpbBuilder.getTag(status: Status): Byte;
begin
	Result := XpbBuilderVTable(vTable).getTag(Self, status);
	FbException.checkException(status);
end;

function XpbBuilder.getLength(status: Status): Cardinal;
begin
	Result := XpbBuilderVTable(vTable).getLength(Self, status);
	FbException.checkException(status);
end;

function XpbBuilder.getInt(status: Status): Integer;
begin
	Result := XpbBuilderVTable(vTable).getInt(Self, status);
	FbException.checkException(status);
end;

function XpbBuilder.getBigInt(status: Status): Int64;
begin
	Result := XpbBuilderVTable(vTable).getBigInt(Self, status);
	FbException.checkException(status);
end;

function XpbBuilder.getString(status: Status): PAnsiChar;
begin
	Result := XpbBuilderVTable(vTable).getString(Self, status);
	FbException.checkException(status);
end;

function XpbBuilder.getBytes(status: Status): BytePtr;
begin
	Result := XpbBuilderVTable(vTable).getBytes(Self, status);
	FbException.checkException(status);
end;

function XpbBuilder.getBufferLength(status: Status): Cardinal;
begin
	Result := XpbBuilderVTable(vTable).getBufferLength(Self, status);
	FbException.checkException(status);
end;

function XpbBuilder.getBuffer(status: Status): BytePtr;
begin
	Result := XpbBuilderVTable(vTable).getBuffer(Self, status);
	FbException.checkException(status);
end;

function TraceConnection.getKind(): Cardinal;
begin
	Result := TraceConnectionVTable(vTable).getKind(Self);
end;

function TraceConnection.getProcessID(): Integer;
begin
	Result := TraceConnectionVTable(vTable).getProcessID(Self);
end;

function TraceConnection.getUserName(): PAnsiChar;
begin
	Result := TraceConnectionVTable(vTable).getUserName(Self);
end;

function TraceConnection.getRoleName(): PAnsiChar;
begin
	Result := TraceConnectionVTable(vTable).getRoleName(Self);
end;

function TraceConnection.getCharSet(): PAnsiChar;
begin
	Result := TraceConnectionVTable(vTable).getCharSet(Self);
end;

function TraceConnection.getRemoteProtocol(): PAnsiChar;
begin
	Result := TraceConnectionVTable(vTable).getRemoteProtocol(Self);
end;

function TraceConnection.getRemoteAddress(): PAnsiChar;
begin
	Result := TraceConnectionVTable(vTable).getRemoteAddress(Self);
end;

function TraceConnection.getRemoteProcessID(): Integer;
begin
	Result := TraceConnectionVTable(vTable).getRemoteProcessID(Self);
end;

function TraceConnection.getRemoteProcessName(): PAnsiChar;
begin
	Result := TraceConnectionVTable(vTable).getRemoteProcessName(Self);
end;

function TraceDatabaseConnection.getConnectionID(): Integer;
begin
	Result := TraceDatabaseConnectionVTable(vTable).getConnectionID(Self);
end;

function TraceDatabaseConnection.getDatabaseName(): PAnsiChar;
begin
	Result := TraceDatabaseConnectionVTable(vTable).getDatabaseName(Self);
end;

function TraceTransaction.getTransactionID(): Cardinal;
begin
	Result := TraceTransactionVTable(vTable).getTransactionID(Self);
end;

function TraceTransaction.getReadOnly(): Boolean;
begin
	Result := TraceTransactionVTable(vTable).getReadOnly(Self);
end;

function TraceTransaction.getWait(): Integer;
begin
	Result := TraceTransactionVTable(vTable).getWait(Self);
end;

function TraceTransaction.getIsolation(): Cardinal;
begin
	Result := TraceTransactionVTable(vTable).getIsolation(Self);
end;

function TraceTransaction.getPerf(): PerformanceInfoPtr;
begin
	Result := TraceTransactionVTable(vTable).getPerf(Self);
end;

function TraceParams.getCount(): Cardinal;
begin
	Result := TraceParamsVTable(vTable).getCount(Self);
end;

function TraceParams.getParam(idx: Cardinal): dscPtr;
begin
	Result := TraceParamsVTable(vTable).getParam(Self, idx);
end;

function TraceStatement.getStmtID(): Integer;
begin
	Result := TraceStatementVTable(vTable).getStmtID(Self);
end;

function TraceStatement.getPerf(): PerformanceInfoPtr;
begin
	Result := TraceStatementVTable(vTable).getPerf(Self);
end;

function TraceSQLStatement.getText(): PAnsiChar;
begin
	Result := TraceSQLStatementVTable(vTable).getText(Self);
end;

function TraceSQLStatement.getPlan(): PAnsiChar;
begin
	Result := TraceSQLStatementVTable(vTable).getPlan(Self);
end;

function TraceSQLStatement.getInputs(): TraceParams;
begin
	Result := TraceSQLStatementVTable(vTable).getInputs(Self);
end;

function TraceSQLStatement.getTextUTF8(): PAnsiChar;
begin
	Result := TraceSQLStatementVTable(vTable).getTextUTF8(Self);
end;

function TraceSQLStatement.getExplainedPlan(): PAnsiChar;
begin
	Result := TraceSQLStatementVTable(vTable).getExplainedPlan(Self);
end;

function TraceBLRStatement.getData(): BytePtr;
begin
	Result := TraceBLRStatementVTable(vTable).getData(Self);
end;

function TraceBLRStatement.getDataLength(): Cardinal;
begin
	Result := TraceBLRStatementVTable(vTable).getDataLength(Self);
end;

function TraceBLRStatement.getText(): PAnsiChar;
begin
	Result := TraceBLRStatementVTable(vTable).getText(Self);
end;

function TraceDYNRequest.getData(): BytePtr;
begin
	Result := TraceDYNRequestVTable(vTable).getData(Self);
end;

function TraceDYNRequest.getDataLength(): Cardinal;
begin
	Result := TraceDYNRequestVTable(vTable).getDataLength(Self);
end;

function TraceDYNRequest.getText(): PAnsiChar;
begin
	Result := TraceDYNRequestVTable(vTable).getText(Self);
end;

function TraceContextVariable.getNameSpace(): PAnsiChar;
begin
	Result := TraceContextVariableVTable(vTable).getNameSpace(Self);
end;

function TraceContextVariable.getVarName(): PAnsiChar;
begin
	Result := TraceContextVariableVTable(vTable).getVarName(Self);
end;

function TraceContextVariable.getVarValue(): PAnsiChar;
begin
	Result := TraceContextVariableVTable(vTable).getVarValue(Self);
end;

function TraceProcedure.getProcName(): PAnsiChar;
begin
	Result := TraceProcedureVTable(vTable).getProcName(Self);
end;

function TraceProcedure.getInputs(): TraceParams;
begin
	Result := TraceProcedureVTable(vTable).getInputs(Self);
end;

function TraceProcedure.getPerf(): PerformanceInfoPtr;
begin
	Result := TraceProcedureVTable(vTable).getPerf(Self);
end;

function TraceFunction.getFuncName(): PAnsiChar;
begin
	Result := TraceFunctionVTable(vTable).getFuncName(Self);
end;

function TraceFunction.getInputs(): TraceParams;
begin
	Result := TraceFunctionVTable(vTable).getInputs(Self);
end;

function TraceFunction.getResult(): TraceParams;
begin
	Result := TraceFunctionVTable(vTable).getResult(Self);
end;

function TraceFunction.getPerf(): PerformanceInfoPtr;
begin
	Result := TraceFunctionVTable(vTable).getPerf(Self);
end;

function TraceTrigger.getTriggerName(): PAnsiChar;
begin
	Result := TraceTriggerVTable(vTable).getTriggerName(Self);
end;

function TraceTrigger.getRelationName(): PAnsiChar;
begin
	Result := TraceTriggerVTable(vTable).getRelationName(Self);
end;

function TraceTrigger.getAction(): Integer;
begin
	Result := TraceTriggerVTable(vTable).getAction(Self);
end;

function TraceTrigger.getWhich(): Integer;
begin
	Result := TraceTriggerVTable(vTable).getWhich(Self);
end;

function TraceTrigger.getPerf(): PerformanceInfoPtr;
begin
	Result := TraceTriggerVTable(vTable).getPerf(Self);
end;

function TraceServiceConnection.getServiceID(): Pointer;
begin
	Result := TraceServiceConnectionVTable(vTable).getServiceID(Self);
end;

function TraceServiceConnection.getServiceMgr(): PAnsiChar;
begin
	Result := TraceServiceConnectionVTable(vTable).getServiceMgr(Self);
end;

function TraceServiceConnection.getServiceName(): PAnsiChar;
begin
	Result := TraceServiceConnectionVTable(vTable).getServiceName(Self);
end;

function TraceStatusVector.hasError(): Boolean;
begin
	Result := TraceStatusVectorVTable(vTable).hasError(Self);
end;

function TraceStatusVector.hasWarning(): Boolean;
begin
	Result := TraceStatusVectorVTable(vTable).hasWarning(Self);
end;

function TraceStatusVector.getStatus(): Status;
begin
	Result := TraceStatusVectorVTable(vTable).getStatus(Self);
end;

function TraceStatusVector.getText(): PAnsiChar;
begin
	Result := TraceStatusVectorVTable(vTable).getText(Self);
end;

function TraceSweepInfo.getOIT(): QWord;
begin
	Result := TraceSweepInfoVTable(vTable).getOIT(Self);
end;

function TraceSweepInfo.getOST(): QWord;
begin
	Result := TraceSweepInfoVTable(vTable).getOST(Self);
end;

function TraceSweepInfo.getOAT(): QWord;
begin
	Result := TraceSweepInfoVTable(vTable).getOAT(Self);
end;

function TraceSweepInfo.getNext(): QWord;
begin
	Result := TraceSweepInfoVTable(vTable).getNext(Self);
end;

function TraceSweepInfo.getPerf(): PerformanceInfoPtr;
begin
	Result := TraceSweepInfoVTable(vTable).getPerf(Self);
end;

function TraceLogWriter.write(buf: Pointer; size: Cardinal): Cardinal;
begin
	Result := TraceLogWriterVTable(vTable).write(Self, buf, size);
end;

function TraceInitInfo.getConfigText(): PAnsiChar;
begin
	Result := TraceInitInfoVTable(vTable).getConfigText(Self);
end;

function TraceInitInfo.getTraceSessionID(): Integer;
begin
	Result := TraceInitInfoVTable(vTable).getTraceSessionID(Self);
end;

function TraceInitInfo.getTraceSessionName(): PAnsiChar;
begin
	Result := TraceInitInfoVTable(vTable).getTraceSessionName(Self);
end;

function TraceInitInfo.getFirebirdRootDirectory(): PAnsiChar;
begin
	Result := TraceInitInfoVTable(vTable).getFirebirdRootDirectory(Self);
end;

function TraceInitInfo.getDatabaseName(): PAnsiChar;
begin
	Result := TraceInitInfoVTable(vTable).getDatabaseName(Self);
end;

function TraceInitInfo.getConnection(): TraceDatabaseConnection;
begin
	Result := TraceInitInfoVTable(vTable).getConnection(Self);
end;

function TraceInitInfo.getLogWriter(): TraceLogWriter;
begin
	Result := TraceInitInfoVTable(vTable).getLogWriter(Self);
end;

function TracePlugin.trace_get_error(): PAnsiChar;
begin
	Result := TracePluginVTable(vTable).trace_get_error(Self);
end;

function TracePlugin.trace_attach(connection: TraceDatabaseConnection; create_db: Boolean; att_result: Cardinal): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_attach(Self, connection, create_db, att_result);
end;

function TracePlugin.trace_detach(connection: TraceDatabaseConnection; drop_db: Boolean): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_detach(Self, connection, drop_db);
end;

function TracePlugin.trace_transaction_start(connection: TraceDatabaseConnection; transaction: TraceTransaction; tpb_length: Cardinal; tpb: BytePtr; tra_result: Cardinal): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_transaction_start(Self, connection, transaction, tpb_length, tpb, tra_result);
end;

function TracePlugin.trace_transaction_end(connection: TraceDatabaseConnection; transaction: TraceTransaction; commit: Boolean; retain_context: Boolean; tra_result: Cardinal): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_transaction_end(Self, connection, transaction, commit, retain_context, tra_result);
end;

function TracePlugin.trace_proc_execute(connection: TraceDatabaseConnection; transaction: TraceTransaction; procedure_: TraceProcedure; started: Boolean; proc_result: Cardinal): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_proc_execute(Self, connection, transaction, procedure_, started, proc_result);
end;

function TracePlugin.trace_trigger_execute(connection: TraceDatabaseConnection; transaction: TraceTransaction; trigger: TraceTrigger; started: Boolean; trig_result: Cardinal): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_trigger_execute(Self, connection, transaction, trigger, started, trig_result);
end;

function TracePlugin.trace_set_context(connection: TraceDatabaseConnection; transaction: TraceTransaction; variable: TraceContextVariable): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_set_context(Self, connection, transaction, variable);
end;

function TracePlugin.trace_dsql_prepare(connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceSQLStatement; time_millis: Int64; req_result: Cardinal): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_dsql_prepare(Self, connection, transaction, statement, time_millis, req_result);
end;

function TracePlugin.trace_dsql_free(connection: TraceDatabaseConnection; statement: TraceSQLStatement; option: Cardinal): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_dsql_free(Self, connection, statement, option);
end;

function TracePlugin.trace_dsql_execute(connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceSQLStatement; started: Boolean; req_result: Cardinal): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_dsql_execute(Self, connection, transaction, statement, started, req_result);
end;

function TracePlugin.trace_blr_compile(connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceBLRStatement; time_millis: Int64; req_result: Cardinal): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_blr_compile(Self, connection, transaction, statement, time_millis, req_result);
end;

function TracePlugin.trace_blr_execute(connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceBLRStatement; req_result: Cardinal): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_blr_execute(Self, connection, transaction, statement, req_result);
end;

function TracePlugin.trace_dyn_execute(connection: TraceDatabaseConnection; transaction: TraceTransaction; request: TraceDYNRequest; time_millis: Int64; req_result: Cardinal): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_dyn_execute(Self, connection, transaction, request, time_millis, req_result);
end;

function TracePlugin.trace_service_attach(service: TraceServiceConnection; att_result: Cardinal): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_service_attach(Self, service, att_result);
end;

function TracePlugin.trace_service_start(service: TraceServiceConnection; switches_length: Cardinal; switches: PAnsiChar; start_result: Cardinal): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_service_start(Self, service, switches_length, switches, start_result);
end;

function TracePlugin.trace_service_query(service: TraceServiceConnection; send_item_length: Cardinal; send_items: BytePtr; recv_item_length: Cardinal; recv_items: BytePtr; query_result: Cardinal): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_service_query(Self, service, send_item_length, send_items, recv_item_length, recv_items, query_result);
end;

function TracePlugin.trace_service_detach(service: TraceServiceConnection; detach_result: Cardinal): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_service_detach(Self, service, detach_result);
end;

function TracePlugin.trace_event_error(connection: TraceConnection; status: TraceStatusVector; function_: PAnsiChar): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_event_error(Self, connection, status, function_);
end;

function TracePlugin.trace_event_sweep(connection: TraceDatabaseConnection; sweep: TraceSweepInfo; sweep_state: Cardinal): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_event_sweep(Self, connection, sweep, sweep_state);
end;

function TracePlugin.trace_func_execute(connection: TraceDatabaseConnection; transaction: TraceTransaction; function_: TraceFunction; started: Boolean; func_result: Cardinal): Boolean;
begin
	Result := TracePluginVTable(vTable).trace_func_execute(Self, connection, transaction, function_, started, func_result);
end;

function TraceFactory.trace_needs(): QWord;
begin
	Result := TraceFactoryVTable(vTable).trace_needs(Self);
end;

function TraceFactory.trace_create(status: Status; init_info: TraceInitInfo): TracePlugin;
begin
	Result := TraceFactoryVTable(vTable).trace_create(Self, status, init_info);
	FbException.checkException(status);
end;

procedure UdrFunctionFactory.setup(status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder);
begin
	UdrFunctionFactoryVTable(vTable).setup(Self, status, context, metadata, inBuilder, outBuilder);
	FbException.checkException(status);
end;

function UdrFunctionFactory.newItem(status: Status; context: ExternalContext; metadata: RoutineMetadata): ExternalFunction;
begin
	Result := UdrFunctionFactoryVTable(vTable).newItem(Self, status, context, metadata);
	FbException.checkException(status);
end;

procedure UdrProcedureFactory.setup(status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder);
begin
	UdrProcedureFactoryVTable(vTable).setup(Self, status, context, metadata, inBuilder, outBuilder);
	FbException.checkException(status);
end;

function UdrProcedureFactory.newItem(status: Status; context: ExternalContext; metadata: RoutineMetadata): ExternalProcedure;
begin
	Result := UdrProcedureFactoryVTable(vTable).newItem(Self, status, context, metadata);
	FbException.checkException(status);
end;

procedure UdrTriggerFactory.setup(status: Status; context: ExternalContext; metadata: RoutineMetadata; fieldsBuilder: MetadataBuilder);
begin
	UdrTriggerFactoryVTable(vTable).setup(Self, status, context, metadata, fieldsBuilder);
	FbException.checkException(status);
end;

function UdrTriggerFactory.newItem(status: Status; context: ExternalContext; metadata: RoutineMetadata): ExternalTrigger;
begin
	Result := UdrTriggerFactoryVTable(vTable).newItem(Self, status, context, metadata);
	FbException.checkException(status);
end;

function UdrPlugin.getMaster(): Master;
begin
	Result := UdrPluginVTable(vTable).getMaster(Self);
end;

procedure UdrPlugin.registerFunction(status: Status; name: PAnsiChar; factory: UdrFunctionFactory);
begin
	UdrPluginVTable(vTable).registerFunction(Self, status, name, factory);
	FbException.checkException(status);
end;

procedure UdrPlugin.registerProcedure(status: Status; name: PAnsiChar; factory: UdrProcedureFactory);
begin
	UdrPluginVTable(vTable).registerProcedure(Self, status, name, factory);
	FbException.checkException(status);
end;

procedure UdrPlugin.registerTrigger(status: Status; name: PAnsiChar; factory: UdrTriggerFactory);
begin
	UdrPluginVTable(vTable).registerTrigger(Self, status, name, factory);
	FbException.checkException(status);
end;

var
	VersionedImpl_vTable: VersionedVTable;

constructor VersionedImpl.create;
begin
	vTable := VersionedImpl_vTable;
end;

procedure ReferenceCountedImpl_addRefDispatcher(this: ReferenceCounted); cdecl;
begin
	try
		ReferenceCountedImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ReferenceCountedImpl_releaseDispatcher(this: ReferenceCounted): Integer; cdecl;
begin
	try
		Result := ReferenceCountedImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	ReferenceCountedImpl_vTable: ReferenceCountedVTable;

constructor ReferenceCountedImpl.create;
begin
	vTable := ReferenceCountedImpl_vTable;
end;

procedure DisposableImpl_disposeDispatcher(this: Disposable); cdecl;
begin
	try
		DisposableImpl(this).dispose();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	DisposableImpl_vTable: DisposableVTable;

constructor DisposableImpl.create;
begin
	vTable := DisposableImpl_vTable;
end;

procedure StatusImpl_disposeDispatcher(this: Status); cdecl;
begin
	try
		StatusImpl(this).dispose();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure StatusImpl_initDispatcher(this: Status); cdecl;
begin
	try
		StatusImpl(this).init();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function StatusImpl_getStateDispatcher(this: Status): Cardinal; cdecl;
begin
	try
		Result := StatusImpl(this).getState();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure StatusImpl_setErrors2Dispatcher(this: Status; length: Cardinal; value: NativeIntPtr); cdecl;
begin
	try
		StatusImpl(this).setErrors2(length, value);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure StatusImpl_setWarnings2Dispatcher(this: Status; length: Cardinal; value: NativeIntPtr); cdecl;
begin
	try
		StatusImpl(this).setWarnings2(length, value);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure StatusImpl_setErrorsDispatcher(this: Status; value: NativeIntPtr); cdecl;
begin
	try
		StatusImpl(this).setErrors(value);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure StatusImpl_setWarningsDispatcher(this: Status; value: NativeIntPtr); cdecl;
begin
	try
		StatusImpl(this).setWarnings(value);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function StatusImpl_getErrorsDispatcher(this: Status): NativeIntPtr; cdecl;
begin
	try
		Result := StatusImpl(this).getErrors();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function StatusImpl_getWarningsDispatcher(this: Status): NativeIntPtr; cdecl;
begin
	try
		Result := StatusImpl(this).getWarnings();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function StatusImpl_cloneDispatcher(this: Status): Status; cdecl;
begin
	try
		Result := StatusImpl(this).clone();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	StatusImpl_vTable: StatusVTable;

constructor StatusImpl.create;
begin
	vTable := StatusImpl_vTable;
end;

function MasterImpl_getStatusDispatcher(this: Master): Status; cdecl;
begin
	try
		Result := MasterImpl(this).getStatus();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function MasterImpl_getDispatcherDispatcher(this: Master): Provider; cdecl;
begin
	try
		Result := MasterImpl(this).getDispatcher();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function MasterImpl_getPluginManagerDispatcher(this: Master): PluginManager; cdecl;
begin
	try
		Result := MasterImpl(this).getPluginManager();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function MasterImpl_getTimerControlDispatcher(this: Master): TimerControl; cdecl;
begin
	try
		Result := MasterImpl(this).getTimerControl();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function MasterImpl_getDtcDispatcher(this: Master): Dtc; cdecl;
begin
	try
		Result := MasterImpl(this).getDtc();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function MasterImpl_registerAttachmentDispatcher(this: Master; provider: Provider; attachment: Attachment): Attachment; cdecl;
begin
	try
		Result := MasterImpl(this).registerAttachment(provider, attachment);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function MasterImpl_registerTransactionDispatcher(this: Master; attachment: Attachment; transaction: Transaction): Transaction; cdecl;
begin
	try
		Result := MasterImpl(this).registerTransaction(attachment, transaction);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function MasterImpl_getMetadataBuilderDispatcher(this: Master; status: Status; fieldCount: Cardinal): MetadataBuilder; cdecl;
begin
	try
		Result := MasterImpl(this).getMetadataBuilder(status, fieldCount);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function MasterImpl_serverModeDispatcher(this: Master; mode: Integer): Integer; cdecl;
begin
	try
		Result := MasterImpl(this).serverMode(mode);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function MasterImpl_getUtilInterfaceDispatcher(this: Master): Util; cdecl;
begin
	try
		Result := MasterImpl(this).getUtilInterface();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function MasterImpl_getConfigManagerDispatcher(this: Master): ConfigManager; cdecl;
begin
	try
		Result := MasterImpl(this).getConfigManager();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function MasterImpl_getProcessExitingDispatcher(this: Master): Boolean; cdecl;
begin
	try
		Result := MasterImpl(this).getProcessExiting();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	MasterImpl_vTable: MasterVTable;

constructor MasterImpl.create;
begin
	vTable := MasterImpl_vTable;
end;

procedure PluginBaseImpl_addRefDispatcher(this: PluginBase); cdecl;
begin
	try
		PluginBaseImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function PluginBaseImpl_releaseDispatcher(this: PluginBase): Integer; cdecl;
begin
	try
		Result := PluginBaseImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure PluginBaseImpl_setOwnerDispatcher(this: PluginBase; r: ReferenceCounted); cdecl;
begin
	try
		PluginBaseImpl(this).setOwner(r);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function PluginBaseImpl_getOwnerDispatcher(this: PluginBase): ReferenceCounted; cdecl;
begin
	try
		Result := PluginBaseImpl(this).getOwner();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	PluginBaseImpl_vTable: PluginBaseVTable;

constructor PluginBaseImpl.create;
begin
	vTable := PluginBaseImpl_vTable;
end;

procedure PluginSetImpl_addRefDispatcher(this: PluginSet); cdecl;
begin
	try
		PluginSetImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function PluginSetImpl_releaseDispatcher(this: PluginSet): Integer; cdecl;
begin
	try
		Result := PluginSetImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function PluginSetImpl_getNameDispatcher(this: PluginSet): PAnsiChar; cdecl;
begin
	try
		Result := PluginSetImpl(this).getName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function PluginSetImpl_getModuleNameDispatcher(this: PluginSet): PAnsiChar; cdecl;
begin
	try
		Result := PluginSetImpl(this).getModuleName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function PluginSetImpl_getPluginDispatcher(this: PluginSet; status: Status): PluginBase; cdecl;
begin
	try
		Result := PluginSetImpl(this).getPlugin(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure PluginSetImpl_nextDispatcher(this: PluginSet; status: Status); cdecl;
begin
	try
		PluginSetImpl(this).next(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure PluginSetImpl_set_Dispatcher(this: PluginSet; status: Status; s: PAnsiChar); cdecl;
begin
	try
		PluginSetImpl(this).set_(status, s);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	PluginSetImpl_vTable: PluginSetVTable;

constructor PluginSetImpl.create;
begin
	vTable := PluginSetImpl_vTable;
end;

procedure ConfigEntryImpl_addRefDispatcher(this: ConfigEntry); cdecl;
begin
	try
		ConfigEntryImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ConfigEntryImpl_releaseDispatcher(this: ConfigEntry): Integer; cdecl;
begin
	try
		Result := ConfigEntryImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ConfigEntryImpl_getNameDispatcher(this: ConfigEntry): PAnsiChar; cdecl;
begin
	try
		Result := ConfigEntryImpl(this).getName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ConfigEntryImpl_getValueDispatcher(this: ConfigEntry): PAnsiChar; cdecl;
begin
	try
		Result := ConfigEntryImpl(this).getValue();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ConfigEntryImpl_getIntValueDispatcher(this: ConfigEntry): Int64; cdecl;
begin
	try
		Result := ConfigEntryImpl(this).getIntValue();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ConfigEntryImpl_getBoolValueDispatcher(this: ConfigEntry): Boolean; cdecl;
begin
	try
		Result := ConfigEntryImpl(this).getBoolValue();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ConfigEntryImpl_getSubConfigDispatcher(this: ConfigEntry; status: Status): Config; cdecl;
begin
	try
		Result := ConfigEntryImpl(this).getSubConfig(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	ConfigEntryImpl_vTable: ConfigEntryVTable;

constructor ConfigEntryImpl.create;
begin
	vTable := ConfigEntryImpl_vTable;
end;

procedure ConfigImpl_addRefDispatcher(this: Config); cdecl;
begin
	try
		ConfigImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ConfigImpl_releaseDispatcher(this: Config): Integer; cdecl;
begin
	try
		Result := ConfigImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ConfigImpl_findDispatcher(this: Config; status: Status; name: PAnsiChar): ConfigEntry; cdecl;
begin
	try
		Result := ConfigImpl(this).find(status, name);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ConfigImpl_findValueDispatcher(this: Config; status: Status; name: PAnsiChar; value: PAnsiChar): ConfigEntry; cdecl;
begin
	try
		Result := ConfigImpl(this).findValue(status, name, value);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ConfigImpl_findPosDispatcher(this: Config; status: Status; name: PAnsiChar; pos: Cardinal): ConfigEntry; cdecl;
begin
	try
		Result := ConfigImpl(this).findPos(status, name, pos);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	ConfigImpl_vTable: ConfigVTable;

constructor ConfigImpl.create;
begin
	vTable := ConfigImpl_vTable;
end;

procedure FirebirdConfImpl_addRefDispatcher(this: FirebirdConf); cdecl;
begin
	try
		FirebirdConfImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function FirebirdConfImpl_releaseDispatcher(this: FirebirdConf): Integer; cdecl;
begin
	try
		Result := FirebirdConfImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function FirebirdConfImpl_getKeyDispatcher(this: FirebirdConf; name: PAnsiChar): Cardinal; cdecl;
begin
	try
		Result := FirebirdConfImpl(this).getKey(name);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function FirebirdConfImpl_asIntegerDispatcher(this: FirebirdConf; key: Cardinal): Int64; cdecl;
begin
	try
		Result := FirebirdConfImpl(this).asInteger(key);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function FirebirdConfImpl_asStringDispatcher(this: FirebirdConf; key: Cardinal): PAnsiChar; cdecl;
begin
	try
		Result := FirebirdConfImpl(this).asString(key);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function FirebirdConfImpl_asBooleanDispatcher(this: FirebirdConf; key: Cardinal): Boolean; cdecl;
begin
	try
		Result := FirebirdConfImpl(this).asBoolean(key);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	FirebirdConfImpl_vTable: FirebirdConfVTable;

constructor FirebirdConfImpl.create;
begin
	vTable := FirebirdConfImpl_vTable;
end;

procedure PluginConfigImpl_addRefDispatcher(this: PluginConfig); cdecl;
begin
	try
		PluginConfigImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function PluginConfigImpl_releaseDispatcher(this: PluginConfig): Integer; cdecl;
begin
	try
		Result := PluginConfigImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function PluginConfigImpl_getConfigFileNameDispatcher(this: PluginConfig): PAnsiChar; cdecl;
begin
	try
		Result := PluginConfigImpl(this).getConfigFileName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function PluginConfigImpl_getDefaultConfigDispatcher(this: PluginConfig; status: Status): Config; cdecl;
begin
	try
		Result := PluginConfigImpl(this).getDefaultConfig(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function PluginConfigImpl_getFirebirdConfDispatcher(this: PluginConfig; status: Status): FirebirdConf; cdecl;
begin
	try
		Result := PluginConfigImpl(this).getFirebirdConf(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure PluginConfigImpl_setReleaseDelayDispatcher(this: PluginConfig; status: Status; microSeconds: QWord); cdecl;
begin
	try
		PluginConfigImpl(this).setReleaseDelay(status, microSeconds);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	PluginConfigImpl_vTable: PluginConfigVTable;

constructor PluginConfigImpl.create;
begin
	vTable := PluginConfigImpl_vTable;
end;

function PluginFactoryImpl_createPluginDispatcher(this: PluginFactory; status: Status; factoryParameter: PluginConfig): PluginBase; cdecl;
begin
	try
		Result := PluginFactoryImpl(this).createPlugin(status, factoryParameter);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	PluginFactoryImpl_vTable: PluginFactoryVTable;

constructor PluginFactoryImpl.create;
begin
	vTable := PluginFactoryImpl_vTable;
end;

procedure PluginModuleImpl_doCleanDispatcher(this: PluginModule); cdecl;
begin
	try
		PluginModuleImpl(this).doClean();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	PluginModuleImpl_vTable: PluginModuleVTable;

constructor PluginModuleImpl.create;
begin
	vTable := PluginModuleImpl_vTable;
end;

procedure PluginManagerImpl_registerPluginFactoryDispatcher(this: PluginManager; pluginType: Cardinal; defaultName: PAnsiChar; factory: PluginFactory); cdecl;
begin
	try
		PluginManagerImpl(this).registerPluginFactory(pluginType, defaultName, factory);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure PluginManagerImpl_registerModuleDispatcher(this: PluginManager; cleanup: PluginModule); cdecl;
begin
	try
		PluginManagerImpl(this).registerModule(cleanup);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure PluginManagerImpl_unregisterModuleDispatcher(this: PluginManager; cleanup: PluginModule); cdecl;
begin
	try
		PluginManagerImpl(this).unregisterModule(cleanup);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function PluginManagerImpl_getPluginsDispatcher(this: PluginManager; status: Status; pluginType: Cardinal; namesList: PAnsiChar; firebirdConf: FirebirdConf): PluginSet; cdecl;
begin
	try
		Result := PluginManagerImpl(this).getPlugins(status, pluginType, namesList, firebirdConf);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function PluginManagerImpl_getConfigDispatcher(this: PluginManager; status: Status; filename: PAnsiChar): Config; cdecl;
begin
	try
		Result := PluginManagerImpl(this).getConfig(status, filename);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure PluginManagerImpl_releasePluginDispatcher(this: PluginManager; plugin: PluginBase); cdecl;
begin
	try
		PluginManagerImpl(this).releasePlugin(plugin);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	PluginManagerImpl_vTable: PluginManagerVTable;

constructor PluginManagerImpl.create;
begin
	vTable := PluginManagerImpl_vTable;
end;

procedure CryptKeyImpl_setSymmetricDispatcher(this: CryptKey; status: Status; type_: PAnsiChar; keyLength: Cardinal; key: Pointer); cdecl;
begin
	try
		CryptKeyImpl(this).setSymmetric(status, type_, keyLength, key);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure CryptKeyImpl_setAsymmetricDispatcher(this: CryptKey; status: Status; type_: PAnsiChar; encryptKeyLength: Cardinal; encryptKey: Pointer; decryptKeyLength: Cardinal; decryptKey: Pointer); cdecl;
begin
	try
		CryptKeyImpl(this).setAsymmetric(status, type_, encryptKeyLength, encryptKey, decryptKeyLength, decryptKey);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function CryptKeyImpl_getEncryptKeyDispatcher(this: CryptKey; length: CardinalPtr): Pointer; cdecl;
begin
	try
		Result := CryptKeyImpl(this).getEncryptKey(length);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function CryptKeyImpl_getDecryptKeyDispatcher(this: CryptKey; length: CardinalPtr): Pointer; cdecl;
begin
	try
		Result := CryptKeyImpl(this).getDecryptKey(length);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	CryptKeyImpl_vTable: CryptKeyVTable;

constructor CryptKeyImpl.create;
begin
	vTable := CryptKeyImpl_vTable;
end;

function ConfigManagerImpl_getDirectoryDispatcher(this: ConfigManager; code: Cardinal): PAnsiChar; cdecl;
begin
	try
		Result := ConfigManagerImpl(this).getDirectory(code);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ConfigManagerImpl_getFirebirdConfDispatcher(this: ConfigManager): FirebirdConf; cdecl;
begin
	try
		Result := ConfigManagerImpl(this).getFirebirdConf();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ConfigManagerImpl_getDatabaseConfDispatcher(this: ConfigManager; dbName: PAnsiChar): FirebirdConf; cdecl;
begin
	try
		Result := ConfigManagerImpl(this).getDatabaseConf(dbName);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ConfigManagerImpl_getPluginConfigDispatcher(this: ConfigManager; configuredPlugin: PAnsiChar): Config; cdecl;
begin
	try
		Result := ConfigManagerImpl(this).getPluginConfig(configuredPlugin);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ConfigManagerImpl_getInstallDirectoryDispatcher(this: ConfigManager): PAnsiChar; cdecl;
begin
	try
		Result := ConfigManagerImpl(this).getInstallDirectory();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ConfigManagerImpl_getRootDirectoryDispatcher(this: ConfigManager): PAnsiChar; cdecl;
begin
	try
		Result := ConfigManagerImpl(this).getRootDirectory();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	ConfigManagerImpl_vTable: ConfigManagerVTable;

constructor ConfigManagerImpl.create;
begin
	vTable := ConfigManagerImpl_vTable;
end;

procedure EventCallbackImpl_addRefDispatcher(this: EventCallback); cdecl;
begin
	try
		EventCallbackImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function EventCallbackImpl_releaseDispatcher(this: EventCallback): Integer; cdecl;
begin
	try
		Result := EventCallbackImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure EventCallbackImpl_eventCallbackFunctionDispatcher(this: EventCallback; length: Cardinal; events: BytePtr); cdecl;
begin
	try
		EventCallbackImpl(this).eventCallbackFunction(length, events);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	EventCallbackImpl_vTable: EventCallbackVTable;

constructor EventCallbackImpl.create;
begin
	vTable := EventCallbackImpl_vTable;
end;

procedure BlobImpl_addRefDispatcher(this: Blob); cdecl;
begin
	try
		BlobImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function BlobImpl_releaseDispatcher(this: Blob): Integer; cdecl;
begin
	try
		Result := BlobImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure BlobImpl_getInfoDispatcher(this: Blob; status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr); cdecl;
begin
	try
		BlobImpl(this).getInfo(status, itemsLength, items, bufferLength, buffer);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function BlobImpl_getSegmentDispatcher(this: Blob; status: Status; bufferLength: Cardinal; buffer: Pointer; segmentLength: CardinalPtr): Integer; cdecl;
begin
	try
		Result := BlobImpl(this).getSegment(status, bufferLength, buffer, segmentLength);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure BlobImpl_putSegmentDispatcher(this: Blob; status: Status; length: Cardinal; buffer: Pointer); cdecl;
begin
	try
		BlobImpl(this).putSegment(status, length, buffer);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure BlobImpl_cancelDispatcher(this: Blob; status: Status); cdecl;
begin
	try
		BlobImpl(this).cancel(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure BlobImpl_closeDispatcher(this: Blob; status: Status); cdecl;
begin
	try
		BlobImpl(this).close(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function BlobImpl_seekDispatcher(this: Blob; status: Status; mode: Integer; offset: Integer): Integer; cdecl;
begin
	try
		Result := BlobImpl(this).seek(status, mode, offset);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	BlobImpl_vTable: BlobVTable;

constructor BlobImpl.create;
begin
	vTable := BlobImpl_vTable;
end;

procedure TransactionImpl_addRefDispatcher(this: Transaction); cdecl;
begin
	try
		TransactionImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TransactionImpl_releaseDispatcher(this: Transaction): Integer; cdecl;
begin
	try
		Result := TransactionImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure TransactionImpl_getInfoDispatcher(this: Transaction; status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr); cdecl;
begin
	try
		TransactionImpl(this).getInfo(status, itemsLength, items, bufferLength, buffer);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure TransactionImpl_prepareDispatcher(this: Transaction; status: Status; msgLength: Cardinal; message: BytePtr); cdecl;
begin
	try
		TransactionImpl(this).prepare(status, msgLength, message);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure TransactionImpl_commitDispatcher(this: Transaction; status: Status); cdecl;
begin
	try
		TransactionImpl(this).commit(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure TransactionImpl_commitRetainingDispatcher(this: Transaction; status: Status); cdecl;
begin
	try
		TransactionImpl(this).commitRetaining(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure TransactionImpl_rollbackDispatcher(this: Transaction; status: Status); cdecl;
begin
	try
		TransactionImpl(this).rollback(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure TransactionImpl_rollbackRetainingDispatcher(this: Transaction; status: Status); cdecl;
begin
	try
		TransactionImpl(this).rollbackRetaining(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure TransactionImpl_disconnectDispatcher(this: Transaction; status: Status); cdecl;
begin
	try
		TransactionImpl(this).disconnect(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function TransactionImpl_joinDispatcher(this: Transaction; status: Status; transaction: Transaction): Transaction; cdecl;
begin
	try
		Result := TransactionImpl(this).join(status, transaction);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function TransactionImpl_validateDispatcher(this: Transaction; status: Status; attachment: Attachment): Transaction; cdecl;
begin
	try
		Result := TransactionImpl(this).validate(status, attachment);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function TransactionImpl_enterDtcDispatcher(this: Transaction; status: Status): Transaction; cdecl;
begin
	try
		Result := TransactionImpl(this).enterDtc(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	TransactionImpl_vTable: TransactionVTable;

constructor TransactionImpl.create;
begin
	vTable := TransactionImpl_vTable;
end;

procedure MessageMetadataImpl_addRefDispatcher(this: MessageMetadata); cdecl;
begin
	try
		MessageMetadataImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function MessageMetadataImpl_releaseDispatcher(this: MessageMetadata): Integer; cdecl;
begin
	try
		Result := MessageMetadataImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function MessageMetadataImpl_getCountDispatcher(this: MessageMetadata; status: Status): Cardinal; cdecl;
begin
	try
		Result := MessageMetadataImpl(this).getCount(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function MessageMetadataImpl_getFieldDispatcher(this: MessageMetadata; status: Status; index: Cardinal): PAnsiChar; cdecl;
begin
	try
		Result := MessageMetadataImpl(this).getField(status, index);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function MessageMetadataImpl_getRelationDispatcher(this: MessageMetadata; status: Status; index: Cardinal): PAnsiChar; cdecl;
begin
	try
		Result := MessageMetadataImpl(this).getRelation(status, index);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function MessageMetadataImpl_getOwnerDispatcher(this: MessageMetadata; status: Status; index: Cardinal): PAnsiChar; cdecl;
begin
	try
		Result := MessageMetadataImpl(this).getOwner(status, index);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function MessageMetadataImpl_getAliasDispatcher(this: MessageMetadata; status: Status; index: Cardinal): PAnsiChar; cdecl;
begin
	try
		Result := MessageMetadataImpl(this).getAlias(status, index);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function MessageMetadataImpl_getTypeDispatcher(this: MessageMetadata; status: Status; index: Cardinal): Cardinal; cdecl;
begin
	try
		Result := MessageMetadataImpl(this).getType(status, index);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function MessageMetadataImpl_isNullableDispatcher(this: MessageMetadata; status: Status; index: Cardinal): Boolean; cdecl;
begin
	try
		Result := MessageMetadataImpl(this).isNullable(status, index);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function MessageMetadataImpl_getSubTypeDispatcher(this: MessageMetadata; status: Status; index: Cardinal): Integer; cdecl;
begin
	try
		Result := MessageMetadataImpl(this).getSubType(status, index);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function MessageMetadataImpl_getLengthDispatcher(this: MessageMetadata; status: Status; index: Cardinal): Cardinal; cdecl;
begin
	try
		Result := MessageMetadataImpl(this).getLength(status, index);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function MessageMetadataImpl_getScaleDispatcher(this: MessageMetadata; status: Status; index: Cardinal): Integer; cdecl;
begin
	try
		Result := MessageMetadataImpl(this).getScale(status, index);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function MessageMetadataImpl_getCharSetDispatcher(this: MessageMetadata; status: Status; index: Cardinal): Cardinal; cdecl;
begin
	try
		Result := MessageMetadataImpl(this).getCharSet(status, index);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function MessageMetadataImpl_getOffsetDispatcher(this: MessageMetadata; status: Status; index: Cardinal): Cardinal; cdecl;
begin
	try
		Result := MessageMetadataImpl(this).getOffset(status, index);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function MessageMetadataImpl_getNullOffsetDispatcher(this: MessageMetadata; status: Status; index: Cardinal): Cardinal; cdecl;
begin
	try
		Result := MessageMetadataImpl(this).getNullOffset(status, index);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function MessageMetadataImpl_getBuilderDispatcher(this: MessageMetadata; status: Status): MetadataBuilder; cdecl;
begin
	try
		Result := MessageMetadataImpl(this).getBuilder(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function MessageMetadataImpl_getMessageLengthDispatcher(this: MessageMetadata; status: Status): Cardinal; cdecl;
begin
	try
		Result := MessageMetadataImpl(this).getMessageLength(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	MessageMetadataImpl_vTable: MessageMetadataVTable;

constructor MessageMetadataImpl.create;
begin
	vTable := MessageMetadataImpl_vTable;
end;

procedure MetadataBuilderImpl_addRefDispatcher(this: MetadataBuilder); cdecl;
begin
	try
		MetadataBuilderImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function MetadataBuilderImpl_releaseDispatcher(this: MetadataBuilder): Integer; cdecl;
begin
	try
		Result := MetadataBuilderImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure MetadataBuilderImpl_setTypeDispatcher(this: MetadataBuilder; status: Status; index: Cardinal; type_: Cardinal); cdecl;
begin
	try
		MetadataBuilderImpl(this).setType(status, index, type_);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure MetadataBuilderImpl_setSubTypeDispatcher(this: MetadataBuilder; status: Status; index: Cardinal; subType: Integer); cdecl;
begin
	try
		MetadataBuilderImpl(this).setSubType(status, index, subType);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure MetadataBuilderImpl_setLengthDispatcher(this: MetadataBuilder; status: Status; index: Cardinal; length: Cardinal); cdecl;
begin
	try
		MetadataBuilderImpl(this).setLength(status, index, length);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure MetadataBuilderImpl_setCharSetDispatcher(this: MetadataBuilder; status: Status; index: Cardinal; charSet: Cardinal); cdecl;
begin
	try
		MetadataBuilderImpl(this).setCharSet(status, index, charSet);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure MetadataBuilderImpl_setScaleDispatcher(this: MetadataBuilder; status: Status; index: Cardinal; scale: Cardinal); cdecl;
begin
	try
		MetadataBuilderImpl(this).setScale(status, index, scale);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure MetadataBuilderImpl_truncateDispatcher(this: MetadataBuilder; status: Status; count: Cardinal); cdecl;
begin
	try
		MetadataBuilderImpl(this).truncate(status, count);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure MetadataBuilderImpl_moveNameToIndexDispatcher(this: MetadataBuilder; status: Status; name: PAnsiChar; index: Cardinal); cdecl;
begin
	try
		MetadataBuilderImpl(this).moveNameToIndex(status, name, index);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure MetadataBuilderImpl_removeDispatcher(this: MetadataBuilder; status: Status; index: Cardinal); cdecl;
begin
	try
		MetadataBuilderImpl(this).remove(status, index);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function MetadataBuilderImpl_addFieldDispatcher(this: MetadataBuilder; status: Status): Cardinal; cdecl;
begin
	try
		Result := MetadataBuilderImpl(this).addField(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function MetadataBuilderImpl_getMetadataDispatcher(this: MetadataBuilder; status: Status): MessageMetadata; cdecl;
begin
	try
		Result := MetadataBuilderImpl(this).getMetadata(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	MetadataBuilderImpl_vTable: MetadataBuilderVTable;

constructor MetadataBuilderImpl.create;
begin
	vTable := MetadataBuilderImpl_vTable;
end;

procedure ResultSetImpl_addRefDispatcher(this: ResultSet); cdecl;
begin
	try
		ResultSetImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ResultSetImpl_releaseDispatcher(this: ResultSet): Integer; cdecl;
begin
	try
		Result := ResultSetImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ResultSetImpl_fetchNextDispatcher(this: ResultSet; status: Status; message: Pointer): Integer; cdecl;
begin
	try
		Result := ResultSetImpl(this).fetchNext(status, message);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ResultSetImpl_fetchPriorDispatcher(this: ResultSet; status: Status; message: Pointer): Integer; cdecl;
begin
	try
		Result := ResultSetImpl(this).fetchPrior(status, message);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ResultSetImpl_fetchFirstDispatcher(this: ResultSet; status: Status; message: Pointer): Integer; cdecl;
begin
	try
		Result := ResultSetImpl(this).fetchFirst(status, message);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ResultSetImpl_fetchLastDispatcher(this: ResultSet; status: Status; message: Pointer): Integer; cdecl;
begin
	try
		Result := ResultSetImpl(this).fetchLast(status, message);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ResultSetImpl_fetchAbsoluteDispatcher(this: ResultSet; status: Status; position: Integer; message: Pointer): Integer; cdecl;
begin
	try
		Result := ResultSetImpl(this).fetchAbsolute(status, position, message);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ResultSetImpl_fetchRelativeDispatcher(this: ResultSet; status: Status; offset: Integer; message: Pointer): Integer; cdecl;
begin
	try
		Result := ResultSetImpl(this).fetchRelative(status, offset, message);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ResultSetImpl_isEofDispatcher(this: ResultSet; status: Status): Boolean; cdecl;
begin
	try
		Result := ResultSetImpl(this).isEof(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ResultSetImpl_isBofDispatcher(this: ResultSet; status: Status): Boolean; cdecl;
begin
	try
		Result := ResultSetImpl(this).isBof(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ResultSetImpl_getMetadataDispatcher(this: ResultSet; status: Status): MessageMetadata; cdecl;
begin
	try
		Result := ResultSetImpl(this).getMetadata(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure ResultSetImpl_closeDispatcher(this: ResultSet; status: Status); cdecl;
begin
	try
		ResultSetImpl(this).close(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure ResultSetImpl_setDelayedOutputFormatDispatcher(this: ResultSet; status: Status; format: MessageMetadata); cdecl;
begin
	try
		ResultSetImpl(this).setDelayedOutputFormat(status, format);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	ResultSetImpl_vTable: ResultSetVTable;

constructor ResultSetImpl.create;
begin
	vTable := ResultSetImpl_vTable;
end;

procedure StatementImpl_addRefDispatcher(this: Statement); cdecl;
begin
	try
		StatementImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function StatementImpl_releaseDispatcher(this: Statement): Integer; cdecl;
begin
	try
		Result := StatementImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure StatementImpl_getInfoDispatcher(this: Statement; status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr); cdecl;
begin
	try
		StatementImpl(this).getInfo(status, itemsLength, items, bufferLength, buffer);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function StatementImpl_getTypeDispatcher(this: Statement; status: Status): Cardinal; cdecl;
begin
	try
		Result := StatementImpl(this).getType(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function StatementImpl_getPlanDispatcher(this: Statement; status: Status; detailed: Boolean): PAnsiChar; cdecl;
begin
	try
		Result := StatementImpl(this).getPlan(status, detailed);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function StatementImpl_getAffectedRecordsDispatcher(this: Statement; status: Status): QWord; cdecl;
begin
	try
		Result := StatementImpl(this).getAffectedRecords(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function StatementImpl_getInputMetadataDispatcher(this: Statement; status: Status): MessageMetadata; cdecl;
begin
	try
		Result := StatementImpl(this).getInputMetadata(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function StatementImpl_getOutputMetadataDispatcher(this: Statement; status: Status): MessageMetadata; cdecl;
begin
	try
		Result := StatementImpl(this).getOutputMetadata(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function StatementImpl_executeDispatcher(this: Statement; status: Status; transaction: Transaction; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; outBuffer: Pointer): Transaction; cdecl;
begin
	try
		Result := StatementImpl(this).execute(status, transaction, inMetadata, inBuffer, outMetadata, outBuffer);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function StatementImpl_openCursorDispatcher(this: Statement; status: Status; transaction: Transaction; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; flags: Cardinal): ResultSet; cdecl;
begin
	try
		Result := StatementImpl(this).openCursor(status, transaction, inMetadata, inBuffer, outMetadata, flags);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure StatementImpl_setCursorNameDispatcher(this: Statement; status: Status; name: PAnsiChar); cdecl;
begin
	try
		StatementImpl(this).setCursorName(status, name);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure StatementImpl_freeDispatcher(this: Statement; status: Status); cdecl;
begin
	try
		StatementImpl(this).free(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function StatementImpl_getFlagsDispatcher(this: Statement; status: Status): Cardinal; cdecl;
begin
	try
		Result := StatementImpl(this).getFlags(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	StatementImpl_vTable: StatementVTable;

constructor StatementImpl.create;
begin
	vTable := StatementImpl_vTable;
end;

procedure RequestImpl_addRefDispatcher(this: Request); cdecl;
begin
	try
		RequestImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function RequestImpl_releaseDispatcher(this: Request): Integer; cdecl;
begin
	try
		Result := RequestImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure RequestImpl_receiveDispatcher(this: Request; status: Status; level: Integer; msgType: Cardinal; length: Cardinal; message: BytePtr); cdecl;
begin
	try
		RequestImpl(this).receive(status, level, msgType, length, message);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure RequestImpl_sendDispatcher(this: Request; status: Status; level: Integer; msgType: Cardinal; length: Cardinal; message: BytePtr); cdecl;
begin
	try
		RequestImpl(this).send(status, level, msgType, length, message);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure RequestImpl_getInfoDispatcher(this: Request; status: Status; level: Integer; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr); cdecl;
begin
	try
		RequestImpl(this).getInfo(status, level, itemsLength, items, bufferLength, buffer);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure RequestImpl_startDispatcher(this: Request; status: Status; tra: Transaction; level: Integer); cdecl;
begin
	try
		RequestImpl(this).start(status, tra, level);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure RequestImpl_startAndSendDispatcher(this: Request; status: Status; tra: Transaction; level: Integer; msgType: Cardinal; length: Cardinal; message: BytePtr); cdecl;
begin
	try
		RequestImpl(this).startAndSend(status, tra, level, msgType, length, message);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure RequestImpl_unwindDispatcher(this: Request; status: Status; level: Integer); cdecl;
begin
	try
		RequestImpl(this).unwind(status, level);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure RequestImpl_freeDispatcher(this: Request; status: Status); cdecl;
begin
	try
		RequestImpl(this).free(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	RequestImpl_vTable: RequestVTable;

constructor RequestImpl.create;
begin
	vTable := RequestImpl_vTable;
end;

procedure EventsImpl_addRefDispatcher(this: Events); cdecl;
begin
	try
		EventsImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function EventsImpl_releaseDispatcher(this: Events): Integer; cdecl;
begin
	try
		Result := EventsImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure EventsImpl_cancelDispatcher(this: Events; status: Status); cdecl;
begin
	try
		EventsImpl(this).cancel(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	EventsImpl_vTable: EventsVTable;

constructor EventsImpl.create;
begin
	vTable := EventsImpl_vTable;
end;

procedure AttachmentImpl_addRefDispatcher(this: Attachment); cdecl;
begin
	try
		AttachmentImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function AttachmentImpl_releaseDispatcher(this: Attachment): Integer; cdecl;
begin
	try
		Result := AttachmentImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure AttachmentImpl_getInfoDispatcher(this: Attachment; status: Status; itemsLength: Cardinal; items: BytePtr; bufferLength: Cardinal; buffer: BytePtr); cdecl;
begin
	try
		AttachmentImpl(this).getInfo(status, itemsLength, items, bufferLength, buffer);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function AttachmentImpl_startTransactionDispatcher(this: Attachment; status: Status; tpbLength: Cardinal; tpb: BytePtr): Transaction; cdecl;
begin
	try
		Result := AttachmentImpl(this).startTransaction(status, tpbLength, tpb);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function AttachmentImpl_reconnectTransactionDispatcher(this: Attachment; status: Status; length: Cardinal; id: BytePtr): Transaction; cdecl;
begin
	try
		Result := AttachmentImpl(this).reconnectTransaction(status, length, id);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function AttachmentImpl_compileRequestDispatcher(this: Attachment; status: Status; blrLength: Cardinal; blr: BytePtr): Request; cdecl;
begin
	try
		Result := AttachmentImpl(this).compileRequest(status, blrLength, blr);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure AttachmentImpl_transactRequestDispatcher(this: Attachment; status: Status; transaction: Transaction; blrLength: Cardinal; blr: BytePtr; inMsgLength: Cardinal; inMsg: BytePtr; outMsgLength: Cardinal; outMsg: BytePtr); cdecl;
begin
	try
		AttachmentImpl(this).transactRequest(status, transaction, blrLength, blr, inMsgLength, inMsg, outMsgLength, outMsg);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function AttachmentImpl_createBlobDispatcher(this: Attachment; status: Status; transaction: Transaction; id: ISC_QUADPtr; bpbLength: Cardinal; bpb: BytePtr): Blob; cdecl;
begin
	try
		Result := AttachmentImpl(this).createBlob(status, transaction, id, bpbLength, bpb);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function AttachmentImpl_openBlobDispatcher(this: Attachment; status: Status; transaction: Transaction; id: ISC_QUADPtr; bpbLength: Cardinal; bpb: BytePtr): Blob; cdecl;
begin
	try
		Result := AttachmentImpl(this).openBlob(status, transaction, id, bpbLength, bpb);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function AttachmentImpl_getSliceDispatcher(this: Attachment; status: Status; transaction: Transaction; id: ISC_QUADPtr; sdlLength: Cardinal; sdl: BytePtr; paramLength: Cardinal; param: BytePtr; sliceLength: Integer; slice: BytePtr): Integer; cdecl;
begin
	try
		Result := AttachmentImpl(this).getSlice(status, transaction, id, sdlLength, sdl, paramLength, param, sliceLength, slice);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure AttachmentImpl_putSliceDispatcher(this: Attachment; status: Status; transaction: Transaction; id: ISC_QUADPtr; sdlLength: Cardinal; sdl: BytePtr; paramLength: Cardinal; param: BytePtr; sliceLength: Integer; slice: BytePtr); cdecl;
begin
	try
		AttachmentImpl(this).putSlice(status, transaction, id, sdlLength, sdl, paramLength, param, sliceLength, slice);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure AttachmentImpl_executeDynDispatcher(this: Attachment; status: Status; transaction: Transaction; length: Cardinal; dyn: BytePtr); cdecl;
begin
	try
		AttachmentImpl(this).executeDyn(status, transaction, length, dyn);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function AttachmentImpl_prepareDispatcher(this: Attachment; status: Status; tra: Transaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; flags: Cardinal): Statement; cdecl;
begin
	try
		Result := AttachmentImpl(this).prepare(status, tra, stmtLength, sqlStmt, dialect, flags);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function AttachmentImpl_executeDispatcher(this: Attachment; status: Status; transaction: Transaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; outBuffer: Pointer): Transaction; cdecl;
begin
	try
		Result := AttachmentImpl(this).execute(status, transaction, stmtLength, sqlStmt, dialect, inMetadata, inBuffer, outMetadata, outBuffer);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function AttachmentImpl_openCursorDispatcher(this: Attachment; status: Status; transaction: Transaction; stmtLength: Cardinal; sqlStmt: PAnsiChar; dialect: Cardinal; inMetadata: MessageMetadata; inBuffer: Pointer; outMetadata: MessageMetadata; cursorName: PAnsiChar; cursorFlags: Cardinal): ResultSet; cdecl;
begin
	try
		Result := AttachmentImpl(this).openCursor(status, transaction, stmtLength, sqlStmt, dialect, inMetadata, inBuffer, outMetadata, cursorName, cursorFlags);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function AttachmentImpl_queEventsDispatcher(this: Attachment; status: Status; callback: EventCallback; length: Cardinal; events: BytePtr): Events; cdecl;
begin
	try
		Result := AttachmentImpl(this).queEvents(status, callback, length, events);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure AttachmentImpl_cancelOperationDispatcher(this: Attachment; status: Status; option: Integer); cdecl;
begin
	try
		AttachmentImpl(this).cancelOperation(status, option);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure AttachmentImpl_pingDispatcher(this: Attachment; status: Status); cdecl;
begin
	try
		AttachmentImpl(this).ping(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure AttachmentImpl_detachDispatcher(this: Attachment; status: Status); cdecl;
begin
	try
		AttachmentImpl(this).detach(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure AttachmentImpl_dropDatabaseDispatcher(this: Attachment; status: Status); cdecl;
begin
	try
		AttachmentImpl(this).dropDatabase(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	AttachmentImpl_vTable: AttachmentVTable;

constructor AttachmentImpl.create;
begin
	vTable := AttachmentImpl_vTable;
end;

procedure ServiceImpl_addRefDispatcher(this: Service); cdecl;
begin
	try
		ServiceImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ServiceImpl_releaseDispatcher(this: Service): Integer; cdecl;
begin
	try
		Result := ServiceImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure ServiceImpl_detachDispatcher(this: Service; status: Status); cdecl;
begin
	try
		ServiceImpl(this).detach(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure ServiceImpl_queryDispatcher(this: Service; status: Status; sendLength: Cardinal; sendItems: BytePtr; receiveLength: Cardinal; receiveItems: BytePtr; bufferLength: Cardinal; buffer: BytePtr); cdecl;
begin
	try
		ServiceImpl(this).query(status, sendLength, sendItems, receiveLength, receiveItems, bufferLength, buffer);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure ServiceImpl_startDispatcher(this: Service; status: Status; spbLength: Cardinal; spb: BytePtr); cdecl;
begin
	try
		ServiceImpl(this).start(status, spbLength, spb);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	ServiceImpl_vTable: ServiceVTable;

constructor ServiceImpl.create;
begin
	vTable := ServiceImpl_vTable;
end;

procedure ProviderImpl_addRefDispatcher(this: Provider); cdecl;
begin
	try
		ProviderImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ProviderImpl_releaseDispatcher(this: Provider): Integer; cdecl;
begin
	try
		Result := ProviderImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure ProviderImpl_setOwnerDispatcher(this: Provider; r: ReferenceCounted); cdecl;
begin
	try
		ProviderImpl(this).setOwner(r);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ProviderImpl_getOwnerDispatcher(this: Provider): ReferenceCounted; cdecl;
begin
	try
		Result := ProviderImpl(this).getOwner();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ProviderImpl_attachDatabaseDispatcher(this: Provider; status: Status; fileName: PAnsiChar; dpbLength: Cardinal; dpb: BytePtr): Attachment; cdecl;
begin
	try
		Result := ProviderImpl(this).attachDatabase(status, fileName, dpbLength, dpb);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ProviderImpl_createDatabaseDispatcher(this: Provider; status: Status; fileName: PAnsiChar; dpbLength: Cardinal; dpb: BytePtr): Attachment; cdecl;
begin
	try
		Result := ProviderImpl(this).createDatabase(status, fileName, dpbLength, dpb);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ProviderImpl_attachServiceManagerDispatcher(this: Provider; status: Status; service: PAnsiChar; spbLength: Cardinal; spb: BytePtr): Service; cdecl;
begin
	try
		Result := ProviderImpl(this).attachServiceManager(status, service, spbLength, spb);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure ProviderImpl_shutdownDispatcher(this: Provider; status: Status; timeout: Cardinal; reason: Integer); cdecl;
begin
	try
		ProviderImpl(this).shutdown(status, timeout, reason);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure ProviderImpl_setDbCryptCallbackDispatcher(this: Provider; status: Status; cryptCallback: CryptKeyCallback); cdecl;
begin
	try
		ProviderImpl(this).setDbCryptCallback(status, cryptCallback);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	ProviderImpl_vTable: ProviderVTable;

constructor ProviderImpl.create;
begin
	vTable := ProviderImpl_vTable;
end;

procedure DtcStartImpl_disposeDispatcher(this: DtcStart); cdecl;
begin
	try
		DtcStartImpl(this).dispose();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure DtcStartImpl_addAttachmentDispatcher(this: DtcStart; status: Status; att: Attachment); cdecl;
begin
	try
		DtcStartImpl(this).addAttachment(status, att);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure DtcStartImpl_addWithTpbDispatcher(this: DtcStart; status: Status; att: Attachment; length: Cardinal; tpb: BytePtr); cdecl;
begin
	try
		DtcStartImpl(this).addWithTpb(status, att, length, tpb);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function DtcStartImpl_startDispatcher(this: DtcStart; status: Status): Transaction; cdecl;
begin
	try
		Result := DtcStartImpl(this).start(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	DtcStartImpl_vTable: DtcStartVTable;

constructor DtcStartImpl.create;
begin
	vTable := DtcStartImpl_vTable;
end;

function DtcImpl_joinDispatcher(this: Dtc; status: Status; one: Transaction; two: Transaction): Transaction; cdecl;
begin
	try
		Result := DtcImpl(this).join(status, one, two);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function DtcImpl_startBuilderDispatcher(this: Dtc; status: Status): DtcStart; cdecl;
begin
	try
		Result := DtcImpl(this).startBuilder(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	DtcImpl_vTable: DtcVTable;

constructor DtcImpl.create;
begin
	vTable := DtcImpl_vTable;
end;

procedure AuthImpl_addRefDispatcher(this: Auth); cdecl;
begin
	try
		AuthImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function AuthImpl_releaseDispatcher(this: Auth): Integer; cdecl;
begin
	try
		Result := AuthImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure AuthImpl_setOwnerDispatcher(this: Auth; r: ReferenceCounted); cdecl;
begin
	try
		AuthImpl(this).setOwner(r);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function AuthImpl_getOwnerDispatcher(this: Auth): ReferenceCounted; cdecl;
begin
	try
		Result := AuthImpl(this).getOwner();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	AuthImpl_vTable: AuthVTable;

constructor AuthImpl.create;
begin
	vTable := AuthImpl_vTable;
end;

procedure WriterImpl_resetDispatcher(this: Writer); cdecl;
begin
	try
		WriterImpl(this).reset();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure WriterImpl_addDispatcher(this: Writer; status: Status; name: PAnsiChar); cdecl;
begin
	try
		WriterImpl(this).add(status, name);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure WriterImpl_setTypeDispatcher(this: Writer; status: Status; value: PAnsiChar); cdecl;
begin
	try
		WriterImpl(this).setType(status, value);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure WriterImpl_setDbDispatcher(this: Writer; status: Status; value: PAnsiChar); cdecl;
begin
	try
		WriterImpl(this).setDb(status, value);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	WriterImpl_vTable: WriterVTable;

constructor WriterImpl.create;
begin
	vTable := WriterImpl_vTable;
end;

function ServerBlockImpl_getLoginDispatcher(this: ServerBlock): PAnsiChar; cdecl;
begin
	try
		Result := ServerBlockImpl(this).getLogin();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ServerBlockImpl_getDataDispatcher(this: ServerBlock; length: CardinalPtr): BytePtr; cdecl;
begin
	try
		Result := ServerBlockImpl(this).getData(length);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure ServerBlockImpl_putDataDispatcher(this: ServerBlock; status: Status; length: Cardinal; data: Pointer); cdecl;
begin
	try
		ServerBlockImpl(this).putData(status, length, data);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ServerBlockImpl_newKeyDispatcher(this: ServerBlock; status: Status): CryptKey; cdecl;
begin
	try
		Result := ServerBlockImpl(this).newKey(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	ServerBlockImpl_vTable: ServerBlockVTable;

constructor ServerBlockImpl.create;
begin
	vTable := ServerBlockImpl_vTable;
end;

procedure ClientBlockImpl_addRefDispatcher(this: ClientBlock); cdecl;
begin
	try
		ClientBlockImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ClientBlockImpl_releaseDispatcher(this: ClientBlock): Integer; cdecl;
begin
	try
		Result := ClientBlockImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ClientBlockImpl_getLoginDispatcher(this: ClientBlock): PAnsiChar; cdecl;
begin
	try
		Result := ClientBlockImpl(this).getLogin();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ClientBlockImpl_getPasswordDispatcher(this: ClientBlock): PAnsiChar; cdecl;
begin
	try
		Result := ClientBlockImpl(this).getPassword();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ClientBlockImpl_getDataDispatcher(this: ClientBlock; length: CardinalPtr): BytePtr; cdecl;
begin
	try
		Result := ClientBlockImpl(this).getData(length);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure ClientBlockImpl_putDataDispatcher(this: ClientBlock; status: Status; length: Cardinal; data: Pointer); cdecl;
begin
	try
		ClientBlockImpl(this).putData(status, length, data);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ClientBlockImpl_newKeyDispatcher(this: ClientBlock; status: Status): CryptKey; cdecl;
begin
	try
		Result := ClientBlockImpl(this).newKey(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	ClientBlockImpl_vTable: ClientBlockVTable;

constructor ClientBlockImpl.create;
begin
	vTable := ClientBlockImpl_vTable;
end;

procedure ServerImpl_addRefDispatcher(this: Server); cdecl;
begin
	try
		ServerImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ServerImpl_releaseDispatcher(this: Server): Integer; cdecl;
begin
	try
		Result := ServerImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure ServerImpl_setOwnerDispatcher(this: Server; r: ReferenceCounted); cdecl;
begin
	try
		ServerImpl(this).setOwner(r);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ServerImpl_getOwnerDispatcher(this: Server): ReferenceCounted; cdecl;
begin
	try
		Result := ServerImpl(this).getOwner();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ServerImpl_authenticateDispatcher(this: Server; status: Status; sBlock: ServerBlock; writerInterface: Writer): Integer; cdecl;
begin
	try
		Result := ServerImpl(this).authenticate(status, sBlock, writerInterface);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	ServerImpl_vTable: ServerVTable;

constructor ServerImpl.create;
begin
	vTable := ServerImpl_vTable;
end;

procedure ClientImpl_addRefDispatcher(this: Client); cdecl;
begin
	try
		ClientImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ClientImpl_releaseDispatcher(this: Client): Integer; cdecl;
begin
	try
		Result := ClientImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure ClientImpl_setOwnerDispatcher(this: Client; r: ReferenceCounted); cdecl;
begin
	try
		ClientImpl(this).setOwner(r);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ClientImpl_getOwnerDispatcher(this: Client): ReferenceCounted; cdecl;
begin
	try
		Result := ClientImpl(this).getOwner();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ClientImpl_authenticateDispatcher(this: Client; status: Status; cBlock: ClientBlock): Integer; cdecl;
begin
	try
		Result := ClientImpl(this).authenticate(status, cBlock);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	ClientImpl_vTable: ClientVTable;

constructor ClientImpl.create;
begin
	vTable := ClientImpl_vTable;
end;

function UserFieldImpl_enteredDispatcher(this: UserField): Integer; cdecl;
begin
	try
		Result := UserFieldImpl(this).entered();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function UserFieldImpl_specifiedDispatcher(this: UserField): Integer; cdecl;
begin
	try
		Result := UserFieldImpl(this).specified();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure UserFieldImpl_setEnteredDispatcher(this: UserField; status: Status; newValue: Integer); cdecl;
begin
	try
		UserFieldImpl(this).setEntered(status, newValue);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	UserFieldImpl_vTable: UserFieldVTable;

constructor UserFieldImpl.create;
begin
	vTable := UserFieldImpl_vTable;
end;

function CharUserFieldImpl_enteredDispatcher(this: CharUserField): Integer; cdecl;
begin
	try
		Result := CharUserFieldImpl(this).entered();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function CharUserFieldImpl_specifiedDispatcher(this: CharUserField): Integer; cdecl;
begin
	try
		Result := CharUserFieldImpl(this).specified();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure CharUserFieldImpl_setEnteredDispatcher(this: CharUserField; status: Status; newValue: Integer); cdecl;
begin
	try
		CharUserFieldImpl(this).setEntered(status, newValue);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function CharUserFieldImpl_getDispatcher(this: CharUserField): PAnsiChar; cdecl;
begin
	try
		Result := CharUserFieldImpl(this).get();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure CharUserFieldImpl_set_Dispatcher(this: CharUserField; status: Status; newValue: PAnsiChar); cdecl;
begin
	try
		CharUserFieldImpl(this).set_(status, newValue);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	CharUserFieldImpl_vTable: CharUserFieldVTable;

constructor CharUserFieldImpl.create;
begin
	vTable := CharUserFieldImpl_vTable;
end;

function IntUserFieldImpl_enteredDispatcher(this: IntUserField): Integer; cdecl;
begin
	try
		Result := IntUserFieldImpl(this).entered();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function IntUserFieldImpl_specifiedDispatcher(this: IntUserField): Integer; cdecl;
begin
	try
		Result := IntUserFieldImpl(this).specified();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure IntUserFieldImpl_setEnteredDispatcher(this: IntUserField; status: Status; newValue: Integer); cdecl;
begin
	try
		IntUserFieldImpl(this).setEntered(status, newValue);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function IntUserFieldImpl_getDispatcher(this: IntUserField): Integer; cdecl;
begin
	try
		Result := IntUserFieldImpl(this).get();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure IntUserFieldImpl_set_Dispatcher(this: IntUserField; status: Status; newValue: Integer); cdecl;
begin
	try
		IntUserFieldImpl(this).set_(status, newValue);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	IntUserFieldImpl_vTable: IntUserFieldVTable;

constructor IntUserFieldImpl.create;
begin
	vTable := IntUserFieldImpl_vTable;
end;

function UserImpl_operationDispatcher(this: User): Integer; cdecl;
begin
	try
		Result := UserImpl(this).operation();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function UserImpl_userNameDispatcher(this: User): CharUserField; cdecl;
begin
	try
		Result := UserImpl(this).userName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function UserImpl_passwordDispatcher(this: User): CharUserField; cdecl;
begin
	try
		Result := UserImpl(this).password();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function UserImpl_firstNameDispatcher(this: User): CharUserField; cdecl;
begin
	try
		Result := UserImpl(this).firstName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function UserImpl_lastNameDispatcher(this: User): CharUserField; cdecl;
begin
	try
		Result := UserImpl(this).lastName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function UserImpl_middleNameDispatcher(this: User): CharUserField; cdecl;
begin
	try
		Result := UserImpl(this).middleName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function UserImpl_commentDispatcher(this: User): CharUserField; cdecl;
begin
	try
		Result := UserImpl(this).comment();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function UserImpl_attributesDispatcher(this: User): CharUserField; cdecl;
begin
	try
		Result := UserImpl(this).attributes();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function UserImpl_activeDispatcher(this: User): IntUserField; cdecl;
begin
	try
		Result := UserImpl(this).active();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function UserImpl_adminDispatcher(this: User): IntUserField; cdecl;
begin
	try
		Result := UserImpl(this).admin();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure UserImpl_clearDispatcher(this: User; status: Status); cdecl;
begin
	try
		UserImpl(this).clear(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	UserImpl_vTable: UserVTable;

constructor UserImpl.create;
begin
	vTable := UserImpl_vTable;
end;

procedure ListUsersImpl_listDispatcher(this: ListUsers; status: Status; user: User); cdecl;
begin
	try
		ListUsersImpl(this).list(status, user);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	ListUsersImpl_vTable: ListUsersVTable;

constructor ListUsersImpl.create;
begin
	vTable := ListUsersImpl_vTable;
end;

function LogonInfoImpl_nameDispatcher(this: LogonInfo): PAnsiChar; cdecl;
begin
	try
		Result := LogonInfoImpl(this).name();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function LogonInfoImpl_roleDispatcher(this: LogonInfo): PAnsiChar; cdecl;
begin
	try
		Result := LogonInfoImpl(this).role();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function LogonInfoImpl_networkProtocolDispatcher(this: LogonInfo): PAnsiChar; cdecl;
begin
	try
		Result := LogonInfoImpl(this).networkProtocol();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function LogonInfoImpl_remoteAddressDispatcher(this: LogonInfo): PAnsiChar; cdecl;
begin
	try
		Result := LogonInfoImpl(this).remoteAddress();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function LogonInfoImpl_authBlockDispatcher(this: LogonInfo; length: CardinalPtr): BytePtr; cdecl;
begin
	try
		Result := LogonInfoImpl(this).authBlock(length);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	LogonInfoImpl_vTable: LogonInfoVTable;

constructor LogonInfoImpl.create;
begin
	vTable := LogonInfoImpl_vTable;
end;

procedure ManagementImpl_addRefDispatcher(this: Management); cdecl;
begin
	try
		ManagementImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ManagementImpl_releaseDispatcher(this: Management): Integer; cdecl;
begin
	try
		Result := ManagementImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure ManagementImpl_setOwnerDispatcher(this: Management; r: ReferenceCounted); cdecl;
begin
	try
		ManagementImpl(this).setOwner(r);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ManagementImpl_getOwnerDispatcher(this: Management): ReferenceCounted; cdecl;
begin
	try
		Result := ManagementImpl(this).getOwner();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure ManagementImpl_startDispatcher(this: Management; status: Status; logonInfo: LogonInfo); cdecl;
begin
	try
		ManagementImpl(this).start(status, logonInfo);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ManagementImpl_executeDispatcher(this: Management; status: Status; user: User; callback: ListUsers): Integer; cdecl;
begin
	try
		Result := ManagementImpl(this).execute(status, user, callback);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure ManagementImpl_commitDispatcher(this: Management; status: Status); cdecl;
begin
	try
		ManagementImpl(this).commit(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure ManagementImpl_rollbackDispatcher(this: Management; status: Status); cdecl;
begin
	try
		ManagementImpl(this).rollback(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	ManagementImpl_vTable: ManagementVTable;

constructor ManagementImpl.create;
begin
	vTable := ManagementImpl_vTable;
end;

procedure WireCryptPluginImpl_addRefDispatcher(this: WireCryptPlugin); cdecl;
begin
	try
		WireCryptPluginImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function WireCryptPluginImpl_releaseDispatcher(this: WireCryptPlugin): Integer; cdecl;
begin
	try
		Result := WireCryptPluginImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure WireCryptPluginImpl_setOwnerDispatcher(this: WireCryptPlugin; r: ReferenceCounted); cdecl;
begin
	try
		WireCryptPluginImpl(this).setOwner(r);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function WireCryptPluginImpl_getOwnerDispatcher(this: WireCryptPlugin): ReferenceCounted; cdecl;
begin
	try
		Result := WireCryptPluginImpl(this).getOwner();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function WireCryptPluginImpl_getKnownTypesDispatcher(this: WireCryptPlugin; status: Status): PAnsiChar; cdecl;
begin
	try
		Result := WireCryptPluginImpl(this).getKnownTypes(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure WireCryptPluginImpl_setKeyDispatcher(this: WireCryptPlugin; status: Status; key: CryptKey); cdecl;
begin
	try
		WireCryptPluginImpl(this).setKey(status, key);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure WireCryptPluginImpl_encryptDispatcher(this: WireCryptPlugin; status: Status; length: Cardinal; from: Pointer; to_: Pointer); cdecl;
begin
	try
		WireCryptPluginImpl(this).encrypt(status, length, from, to_);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure WireCryptPluginImpl_decryptDispatcher(this: WireCryptPlugin; status: Status; length: Cardinal; from: Pointer; to_: Pointer); cdecl;
begin
	try
		WireCryptPluginImpl(this).decrypt(status, length, from, to_);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	WireCryptPluginImpl_vTable: WireCryptPluginVTable;

constructor WireCryptPluginImpl.create;
begin
	vTable := WireCryptPluginImpl_vTable;
end;

function CryptKeyCallbackImpl_callbackDispatcher(this: CryptKeyCallback; dataLength: Cardinal; data: Pointer; bufferLength: Cardinal; buffer: Pointer): Cardinal; cdecl;
begin
	try
		Result := CryptKeyCallbackImpl(this).callback(dataLength, data, bufferLength, buffer);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	CryptKeyCallbackImpl_vTable: CryptKeyCallbackVTable;

constructor CryptKeyCallbackImpl.create;
begin
	vTable := CryptKeyCallbackImpl_vTable;
end;

procedure KeyHolderPluginImpl_addRefDispatcher(this: KeyHolderPlugin); cdecl;
begin
	try
		KeyHolderPluginImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function KeyHolderPluginImpl_releaseDispatcher(this: KeyHolderPlugin): Integer; cdecl;
begin
	try
		Result := KeyHolderPluginImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure KeyHolderPluginImpl_setOwnerDispatcher(this: KeyHolderPlugin; r: ReferenceCounted); cdecl;
begin
	try
		KeyHolderPluginImpl(this).setOwner(r);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function KeyHolderPluginImpl_getOwnerDispatcher(this: KeyHolderPlugin): ReferenceCounted; cdecl;
begin
	try
		Result := KeyHolderPluginImpl(this).getOwner();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function KeyHolderPluginImpl_keyCallbackDispatcher(this: KeyHolderPlugin; status: Status; callback: CryptKeyCallback): Integer; cdecl;
begin
	try
		Result := KeyHolderPluginImpl(this).keyCallback(status, callback);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function KeyHolderPluginImpl_keyHandleDispatcher(this: KeyHolderPlugin; status: Status; keyName: PAnsiChar): CryptKeyCallback; cdecl;
begin
	try
		Result := KeyHolderPluginImpl(this).keyHandle(status, keyName);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	KeyHolderPluginImpl_vTable: KeyHolderPluginVTable;

constructor KeyHolderPluginImpl.create;
begin
	vTable := KeyHolderPluginImpl_vTable;
end;

procedure DbCryptPluginImpl_addRefDispatcher(this: DbCryptPlugin); cdecl;
begin
	try
		DbCryptPluginImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function DbCryptPluginImpl_releaseDispatcher(this: DbCryptPlugin): Integer; cdecl;
begin
	try
		Result := DbCryptPluginImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure DbCryptPluginImpl_setOwnerDispatcher(this: DbCryptPlugin; r: ReferenceCounted); cdecl;
begin
	try
		DbCryptPluginImpl(this).setOwner(r);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function DbCryptPluginImpl_getOwnerDispatcher(this: DbCryptPlugin): ReferenceCounted; cdecl;
begin
	try
		Result := DbCryptPluginImpl(this).getOwner();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure DbCryptPluginImpl_setKeyDispatcher(this: DbCryptPlugin; status: Status; length: Cardinal; sources: KeyHolderPluginPtr); cdecl;
begin
	try
		DbCryptPluginImpl(this).setKey(status, length, sources);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure DbCryptPluginImpl_encryptDispatcher(this: DbCryptPlugin; status: Status; length: Cardinal; from: Pointer; to_: Pointer); cdecl;
begin
	try
		DbCryptPluginImpl(this).encrypt(status, length, from, to_);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure DbCryptPluginImpl_decryptDispatcher(this: DbCryptPlugin; status: Status; length: Cardinal; from: Pointer; to_: Pointer); cdecl;
begin
	try
		DbCryptPluginImpl(this).decrypt(status, length, from, to_);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	DbCryptPluginImpl_vTable: DbCryptPluginVTable;

constructor DbCryptPluginImpl.create;
begin
	vTable := DbCryptPluginImpl_vTable;
end;

function ExternalContextImpl_getMasterDispatcher(this: ExternalContext): Master; cdecl;
begin
	try
		Result := ExternalContextImpl(this).getMaster();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ExternalContextImpl_getEngineDispatcher(this: ExternalContext; status: Status): ExternalEngine; cdecl;
begin
	try
		Result := ExternalContextImpl(this).getEngine(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ExternalContextImpl_getAttachmentDispatcher(this: ExternalContext; status: Status): Attachment; cdecl;
begin
	try
		Result := ExternalContextImpl(this).getAttachment(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ExternalContextImpl_getTransactionDispatcher(this: ExternalContext; status: Status): Transaction; cdecl;
begin
	try
		Result := ExternalContextImpl(this).getTransaction(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ExternalContextImpl_getUserNameDispatcher(this: ExternalContext): PAnsiChar; cdecl;
begin
	try
		Result := ExternalContextImpl(this).getUserName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ExternalContextImpl_getDatabaseNameDispatcher(this: ExternalContext): PAnsiChar; cdecl;
begin
	try
		Result := ExternalContextImpl(this).getDatabaseName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ExternalContextImpl_getClientCharSetDispatcher(this: ExternalContext): PAnsiChar; cdecl;
begin
	try
		Result := ExternalContextImpl(this).getClientCharSet();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ExternalContextImpl_obtainInfoCodeDispatcher(this: ExternalContext): Integer; cdecl;
begin
	try
		Result := ExternalContextImpl(this).obtainInfoCode();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ExternalContextImpl_getInfoDispatcher(this: ExternalContext; code: Integer): Pointer; cdecl;
begin
	try
		Result := ExternalContextImpl(this).getInfo(code);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ExternalContextImpl_setInfoDispatcher(this: ExternalContext; code: Integer; value: Pointer): Pointer; cdecl;
begin
	try
		Result := ExternalContextImpl(this).setInfo(code, value);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	ExternalContextImpl_vTable: ExternalContextVTable;

constructor ExternalContextImpl.create;
begin
	vTable := ExternalContextImpl_vTable;
end;

procedure ExternalResultSetImpl_disposeDispatcher(this: ExternalResultSet); cdecl;
begin
	try
		ExternalResultSetImpl(this).dispose();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ExternalResultSetImpl_fetchDispatcher(this: ExternalResultSet; status: Status): Boolean; cdecl;
begin
	try
		Result := ExternalResultSetImpl(this).fetch(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	ExternalResultSetImpl_vTable: ExternalResultSetVTable;

constructor ExternalResultSetImpl.create;
begin
	vTable := ExternalResultSetImpl_vTable;
end;

procedure ExternalFunctionImpl_disposeDispatcher(this: ExternalFunction); cdecl;
begin
	try
		ExternalFunctionImpl(this).dispose();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure ExternalFunctionImpl_getCharSetDispatcher(this: ExternalFunction; status: Status; context: ExternalContext; name: PAnsiChar; nameSize: Cardinal); cdecl;
begin
	try
		ExternalFunctionImpl(this).getCharSet(status, context, name, nameSize);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure ExternalFunctionImpl_executeDispatcher(this: ExternalFunction; status: Status; context: ExternalContext; inMsg: Pointer; outMsg: Pointer); cdecl;
begin
	try
		ExternalFunctionImpl(this).execute(status, context, inMsg, outMsg);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	ExternalFunctionImpl_vTable: ExternalFunctionVTable;

constructor ExternalFunctionImpl.create;
begin
	vTable := ExternalFunctionImpl_vTable;
end;

procedure ExternalProcedureImpl_disposeDispatcher(this: ExternalProcedure); cdecl;
begin
	try
		ExternalProcedureImpl(this).dispose();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure ExternalProcedureImpl_getCharSetDispatcher(this: ExternalProcedure; status: Status; context: ExternalContext; name: PAnsiChar; nameSize: Cardinal); cdecl;
begin
	try
		ExternalProcedureImpl(this).getCharSet(status, context, name, nameSize);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ExternalProcedureImpl_openDispatcher(this: ExternalProcedure; status: Status; context: ExternalContext; inMsg: Pointer; outMsg: Pointer): ExternalResultSet; cdecl;
begin
	try
		Result := ExternalProcedureImpl(this).open(status, context, inMsg, outMsg);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	ExternalProcedureImpl_vTable: ExternalProcedureVTable;

constructor ExternalProcedureImpl.create;
begin
	vTable := ExternalProcedureImpl_vTable;
end;

procedure ExternalTriggerImpl_disposeDispatcher(this: ExternalTrigger); cdecl;
begin
	try
		ExternalTriggerImpl(this).dispose();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure ExternalTriggerImpl_getCharSetDispatcher(this: ExternalTrigger; status: Status; context: ExternalContext; name: PAnsiChar; nameSize: Cardinal); cdecl;
begin
	try
		ExternalTriggerImpl(this).getCharSet(status, context, name, nameSize);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure ExternalTriggerImpl_executeDispatcher(this: ExternalTrigger; status: Status; context: ExternalContext; action: Cardinal; oldMsg: Pointer; newMsg: Pointer); cdecl;
begin
	try
		ExternalTriggerImpl(this).execute(status, context, action, oldMsg, newMsg);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	ExternalTriggerImpl_vTable: ExternalTriggerVTable;

constructor ExternalTriggerImpl.create;
begin
	vTable := ExternalTriggerImpl_vTable;
end;

function RoutineMetadataImpl_getPackageDispatcher(this: RoutineMetadata; status: Status): PAnsiChar; cdecl;
begin
	try
		Result := RoutineMetadataImpl(this).getPackage(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function RoutineMetadataImpl_getNameDispatcher(this: RoutineMetadata; status: Status): PAnsiChar; cdecl;
begin
	try
		Result := RoutineMetadataImpl(this).getName(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function RoutineMetadataImpl_getEntryPointDispatcher(this: RoutineMetadata; status: Status): PAnsiChar; cdecl;
begin
	try
		Result := RoutineMetadataImpl(this).getEntryPoint(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function RoutineMetadataImpl_getBodyDispatcher(this: RoutineMetadata; status: Status): PAnsiChar; cdecl;
begin
	try
		Result := RoutineMetadataImpl(this).getBody(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function RoutineMetadataImpl_getInputMetadataDispatcher(this: RoutineMetadata; status: Status): MessageMetadata; cdecl;
begin
	try
		Result := RoutineMetadataImpl(this).getInputMetadata(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function RoutineMetadataImpl_getOutputMetadataDispatcher(this: RoutineMetadata; status: Status): MessageMetadata; cdecl;
begin
	try
		Result := RoutineMetadataImpl(this).getOutputMetadata(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function RoutineMetadataImpl_getTriggerMetadataDispatcher(this: RoutineMetadata; status: Status): MessageMetadata; cdecl;
begin
	try
		Result := RoutineMetadataImpl(this).getTriggerMetadata(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function RoutineMetadataImpl_getTriggerTableDispatcher(this: RoutineMetadata; status: Status): PAnsiChar; cdecl;
begin
	try
		Result := RoutineMetadataImpl(this).getTriggerTable(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function RoutineMetadataImpl_getTriggerTypeDispatcher(this: RoutineMetadata; status: Status): Cardinal; cdecl;
begin
	try
		Result := RoutineMetadataImpl(this).getTriggerType(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	RoutineMetadataImpl_vTable: RoutineMetadataVTable;

constructor RoutineMetadataImpl.create;
begin
	vTable := RoutineMetadataImpl_vTable;
end;

procedure ExternalEngineImpl_addRefDispatcher(this: ExternalEngine); cdecl;
begin
	try
		ExternalEngineImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ExternalEngineImpl_releaseDispatcher(this: ExternalEngine): Integer; cdecl;
begin
	try
		Result := ExternalEngineImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure ExternalEngineImpl_setOwnerDispatcher(this: ExternalEngine; r: ReferenceCounted); cdecl;
begin
	try
		ExternalEngineImpl(this).setOwner(r);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function ExternalEngineImpl_getOwnerDispatcher(this: ExternalEngine): ReferenceCounted; cdecl;
begin
	try
		Result := ExternalEngineImpl(this).getOwner();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure ExternalEngineImpl_openDispatcher(this: ExternalEngine; status: Status; context: ExternalContext; charSet: PAnsiChar; charSetSize: Cardinal); cdecl;
begin
	try
		ExternalEngineImpl(this).open(status, context, charSet, charSetSize);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure ExternalEngineImpl_openAttachmentDispatcher(this: ExternalEngine; status: Status; context: ExternalContext); cdecl;
begin
	try
		ExternalEngineImpl(this).openAttachment(status, context);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure ExternalEngineImpl_closeAttachmentDispatcher(this: ExternalEngine; status: Status; context: ExternalContext); cdecl;
begin
	try
		ExternalEngineImpl(this).closeAttachment(status, context);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ExternalEngineImpl_makeFunctionDispatcher(this: ExternalEngine; status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder): ExternalFunction; cdecl;
begin
	try
		Result := ExternalEngineImpl(this).makeFunction(status, context, metadata, inBuilder, outBuilder);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ExternalEngineImpl_makeProcedureDispatcher(this: ExternalEngine; status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder): ExternalProcedure; cdecl;
begin
	try
		Result := ExternalEngineImpl(this).makeProcedure(status, context, metadata, inBuilder, outBuilder);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function ExternalEngineImpl_makeTriggerDispatcher(this: ExternalEngine; status: Status; context: ExternalContext; metadata: RoutineMetadata; fieldsBuilder: MetadataBuilder): ExternalTrigger; cdecl;
begin
	try
		Result := ExternalEngineImpl(this).makeTrigger(status, context, metadata, fieldsBuilder);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	ExternalEngineImpl_vTable: ExternalEngineVTable;

constructor ExternalEngineImpl.create;
begin
	vTable := ExternalEngineImpl_vTable;
end;

procedure TimerImpl_addRefDispatcher(this: Timer); cdecl;
begin
	try
		TimerImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TimerImpl_releaseDispatcher(this: Timer): Integer; cdecl;
begin
	try
		Result := TimerImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure TimerImpl_handlerDispatcher(this: Timer); cdecl;
begin
	try
		TimerImpl(this).handler();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TimerImpl_vTable: TimerVTable;

constructor TimerImpl.create;
begin
	vTable := TimerImpl_vTable;
end;

procedure TimerControlImpl_startDispatcher(this: TimerControl; status: Status; timer: Timer; microSeconds: QWord); cdecl;
begin
	try
		TimerControlImpl(this).start(status, timer, microSeconds);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure TimerControlImpl_stopDispatcher(this: TimerControl; status: Status; timer: Timer); cdecl;
begin
	try
		TimerControlImpl(this).stop(status, timer);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	TimerControlImpl_vTable: TimerControlVTable;

constructor TimerControlImpl.create;
begin
	vTable := TimerControlImpl_vTable;
end;

procedure VersionCallbackImpl_callbackDispatcher(this: VersionCallback; status: Status; text: PAnsiChar); cdecl;
begin
	try
		VersionCallbackImpl(this).callback(status, text);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	VersionCallbackImpl_vTable: VersionCallbackVTable;

constructor VersionCallbackImpl.create;
begin
	vTable := VersionCallbackImpl_vTable;
end;

procedure UtilImpl_getFbVersionDispatcher(this: Util; status: Status; att: Attachment; callback: VersionCallback); cdecl;
begin
	try
		UtilImpl(this).getFbVersion(status, att, callback);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure UtilImpl_loadBlobDispatcher(this: Util; status: Status; blobId: ISC_QUADPtr; att: Attachment; tra: Transaction; file_: PAnsiChar; txt: Boolean); cdecl;
begin
	try
		UtilImpl(this).loadBlob(status, blobId, att, tra, file_, txt);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure UtilImpl_dumpBlobDispatcher(this: Util; status: Status; blobId: ISC_QUADPtr; att: Attachment; tra: Transaction; file_: PAnsiChar; txt: Boolean); cdecl;
begin
	try
		UtilImpl(this).dumpBlob(status, blobId, att, tra, file_, txt);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure UtilImpl_getPerfCountersDispatcher(this: Util; status: Status; att: Attachment; countersSet: PAnsiChar; counters: Int64Ptr); cdecl;
begin
	try
		UtilImpl(this).getPerfCounters(status, att, countersSet, counters);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function UtilImpl_executeCreateDatabaseDispatcher(this: Util; status: Status; stmtLength: Cardinal; creatDBstatement: PAnsiChar; dialect: Cardinal; stmtIsCreateDb: BooleanPtr): Attachment; cdecl;
begin
	try
		Result := UtilImpl(this).executeCreateDatabase(status, stmtLength, creatDBstatement, dialect, stmtIsCreateDb);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure UtilImpl_decodeDateDispatcher(this: Util; date: ISC_DATE; year: CardinalPtr; month: CardinalPtr; day: CardinalPtr); cdecl;
begin
	try
		UtilImpl(this).decodeDate(date, year, month, day);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure UtilImpl_decodeTimeDispatcher(this: Util; time: ISC_TIME; hours: CardinalPtr; minutes: CardinalPtr; seconds: CardinalPtr; fractions: CardinalPtr); cdecl;
begin
	try
		UtilImpl(this).decodeTime(time, hours, minutes, seconds, fractions);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function UtilImpl_encodeDateDispatcher(this: Util; year: Cardinal; month: Cardinal; day: Cardinal): ISC_DATE; cdecl;
begin
	try
		Result := UtilImpl(this).encodeDate(year, month, day);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function UtilImpl_encodeTimeDispatcher(this: Util; hours: Cardinal; minutes: Cardinal; seconds: Cardinal; fractions: Cardinal): ISC_TIME; cdecl;
begin
	try
		Result := UtilImpl(this).encodeTime(hours, minutes, seconds, fractions);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function UtilImpl_formatStatusDispatcher(this: Util; buffer: PAnsiChar; bufferSize: Cardinal; status: Status): Cardinal; cdecl;
begin
	try
		Result := UtilImpl(this).formatStatus(buffer, bufferSize, status);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function UtilImpl_getClientVersionDispatcher(this: Util): Cardinal; cdecl;
begin
	try
		Result := UtilImpl(this).getClientVersion();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function UtilImpl_getXpbBuilderDispatcher(this: Util; status: Status; kind: Cardinal; buf: BytePtr; len: Cardinal): XpbBuilder; cdecl;
begin
	try
		Result := UtilImpl(this).getXpbBuilder(status, kind, buf, len);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	UtilImpl_vTable: UtilVTable;

constructor UtilImpl.create;
begin
	vTable := UtilImpl_vTable;
end;

procedure XpbBuilderImpl_disposeDispatcher(this: XpbBuilder); cdecl;
begin
	try
		XpbBuilderImpl(this).dispose();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure XpbBuilderImpl_clearDispatcher(this: XpbBuilder; status: Status); cdecl;
begin
	try
		XpbBuilderImpl(this).clear(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure XpbBuilderImpl_removeCurrentDispatcher(this: XpbBuilder; status: Status); cdecl;
begin
	try
		XpbBuilderImpl(this).removeCurrent(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure XpbBuilderImpl_insertIntDispatcher(this: XpbBuilder; status: Status; tag: Byte; value: Integer); cdecl;
begin
	try
		XpbBuilderImpl(this).insertInt(status, tag, value);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure XpbBuilderImpl_insertBigIntDispatcher(this: XpbBuilder; status: Status; tag: Byte; value: Int64); cdecl;
begin
	try
		XpbBuilderImpl(this).insertBigInt(status, tag, value);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure XpbBuilderImpl_insertBytesDispatcher(this: XpbBuilder; status: Status; tag: Byte; bytes: Pointer; length: Cardinal); cdecl;
begin
	try
		XpbBuilderImpl(this).insertBytes(status, tag, bytes, length);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure XpbBuilderImpl_insertStringDispatcher(this: XpbBuilder; status: Status; tag: Byte; str: PAnsiChar); cdecl;
begin
	try
		XpbBuilderImpl(this).insertString(status, tag, str);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure XpbBuilderImpl_insertTagDispatcher(this: XpbBuilder; status: Status; tag: Byte); cdecl;
begin
	try
		XpbBuilderImpl(this).insertTag(status, tag);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function XpbBuilderImpl_isEofDispatcher(this: XpbBuilder; status: Status): Boolean; cdecl;
begin
	try
		Result := XpbBuilderImpl(this).isEof(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure XpbBuilderImpl_moveNextDispatcher(this: XpbBuilder; status: Status); cdecl;
begin
	try
		XpbBuilderImpl(this).moveNext(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure XpbBuilderImpl_rewindDispatcher(this: XpbBuilder; status: Status); cdecl;
begin
	try
		XpbBuilderImpl(this).rewind(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function XpbBuilderImpl_findFirstDispatcher(this: XpbBuilder; status: Status; tag: Byte): Boolean; cdecl;
begin
	try
		Result := XpbBuilderImpl(this).findFirst(status, tag);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function XpbBuilderImpl_findNextDispatcher(this: XpbBuilder; status: Status): Boolean; cdecl;
begin
	try
		Result := XpbBuilderImpl(this).findNext(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function XpbBuilderImpl_getTagDispatcher(this: XpbBuilder; status: Status): Byte; cdecl;
begin
	try
		Result := XpbBuilderImpl(this).getTag(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function XpbBuilderImpl_getLengthDispatcher(this: XpbBuilder; status: Status): Cardinal; cdecl;
begin
	try
		Result := XpbBuilderImpl(this).getLength(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function XpbBuilderImpl_getIntDispatcher(this: XpbBuilder; status: Status): Integer; cdecl;
begin
	try
		Result := XpbBuilderImpl(this).getInt(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function XpbBuilderImpl_getBigIntDispatcher(this: XpbBuilder; status: Status): Int64; cdecl;
begin
	try
		Result := XpbBuilderImpl(this).getBigInt(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function XpbBuilderImpl_getStringDispatcher(this: XpbBuilder; status: Status): PAnsiChar; cdecl;
begin
	try
		Result := XpbBuilderImpl(this).getString(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function XpbBuilderImpl_getBytesDispatcher(this: XpbBuilder; status: Status): BytePtr; cdecl;
begin
	try
		Result := XpbBuilderImpl(this).getBytes(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function XpbBuilderImpl_getBufferLengthDispatcher(this: XpbBuilder; status: Status): Cardinal; cdecl;
begin
	try
		Result := XpbBuilderImpl(this).getBufferLength(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function XpbBuilderImpl_getBufferDispatcher(this: XpbBuilder; status: Status): BytePtr; cdecl;
begin
	try
		Result := XpbBuilderImpl(this).getBuffer(status);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	XpbBuilderImpl_vTable: XpbBuilderVTable;

constructor XpbBuilderImpl.create;
begin
	vTable := XpbBuilderImpl_vTable;
end;

function TraceConnectionImpl_getKindDispatcher(this: TraceConnection): Cardinal; cdecl;
begin
	try
		Result := TraceConnectionImpl(this).getKind();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceConnectionImpl_getProcessIDDispatcher(this: TraceConnection): Integer; cdecl;
begin
	try
		Result := TraceConnectionImpl(this).getProcessID();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceConnectionImpl_getUserNameDispatcher(this: TraceConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceConnectionImpl(this).getUserName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceConnectionImpl_getRoleNameDispatcher(this: TraceConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceConnectionImpl(this).getRoleName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceConnectionImpl_getCharSetDispatcher(this: TraceConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceConnectionImpl(this).getCharSet();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceConnectionImpl_getRemoteProtocolDispatcher(this: TraceConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceConnectionImpl(this).getRemoteProtocol();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceConnectionImpl_getRemoteAddressDispatcher(this: TraceConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceConnectionImpl(this).getRemoteAddress();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceConnectionImpl_getRemoteProcessIDDispatcher(this: TraceConnection): Integer; cdecl;
begin
	try
		Result := TraceConnectionImpl(this).getRemoteProcessID();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceConnectionImpl_getRemoteProcessNameDispatcher(this: TraceConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceConnectionImpl(this).getRemoteProcessName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TraceConnectionImpl_vTable: TraceConnectionVTable;

constructor TraceConnectionImpl.create;
begin
	vTable := TraceConnectionImpl_vTable;
end;

function TraceDatabaseConnectionImpl_getKindDispatcher(this: TraceDatabaseConnection): Cardinal; cdecl;
begin
	try
		Result := TraceDatabaseConnectionImpl(this).getKind();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceDatabaseConnectionImpl_getProcessIDDispatcher(this: TraceDatabaseConnection): Integer; cdecl;
begin
	try
		Result := TraceDatabaseConnectionImpl(this).getProcessID();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceDatabaseConnectionImpl_getUserNameDispatcher(this: TraceDatabaseConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceDatabaseConnectionImpl(this).getUserName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceDatabaseConnectionImpl_getRoleNameDispatcher(this: TraceDatabaseConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceDatabaseConnectionImpl(this).getRoleName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceDatabaseConnectionImpl_getCharSetDispatcher(this: TraceDatabaseConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceDatabaseConnectionImpl(this).getCharSet();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceDatabaseConnectionImpl_getRemoteProtocolDispatcher(this: TraceDatabaseConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceDatabaseConnectionImpl(this).getRemoteProtocol();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceDatabaseConnectionImpl_getRemoteAddressDispatcher(this: TraceDatabaseConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceDatabaseConnectionImpl(this).getRemoteAddress();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceDatabaseConnectionImpl_getRemoteProcessIDDispatcher(this: TraceDatabaseConnection): Integer; cdecl;
begin
	try
		Result := TraceDatabaseConnectionImpl(this).getRemoteProcessID();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceDatabaseConnectionImpl_getRemoteProcessNameDispatcher(this: TraceDatabaseConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceDatabaseConnectionImpl(this).getRemoteProcessName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceDatabaseConnectionImpl_getConnectionIDDispatcher(this: TraceDatabaseConnection): Integer; cdecl;
begin
	try
		Result := TraceDatabaseConnectionImpl(this).getConnectionID();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceDatabaseConnectionImpl_getDatabaseNameDispatcher(this: TraceDatabaseConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceDatabaseConnectionImpl(this).getDatabaseName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TraceDatabaseConnectionImpl_vTable: TraceDatabaseConnectionVTable;

constructor TraceDatabaseConnectionImpl.create;
begin
	vTable := TraceDatabaseConnectionImpl_vTable;
end;

function TraceTransactionImpl_getTransactionIDDispatcher(this: TraceTransaction): Cardinal; cdecl;
begin
	try
		Result := TraceTransactionImpl(this).getTransactionID();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceTransactionImpl_getReadOnlyDispatcher(this: TraceTransaction): Boolean; cdecl;
begin
	try
		Result := TraceTransactionImpl(this).getReadOnly();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceTransactionImpl_getWaitDispatcher(this: TraceTransaction): Integer; cdecl;
begin
	try
		Result := TraceTransactionImpl(this).getWait();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceTransactionImpl_getIsolationDispatcher(this: TraceTransaction): Cardinal; cdecl;
begin
	try
		Result := TraceTransactionImpl(this).getIsolation();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceTransactionImpl_getPerfDispatcher(this: TraceTransaction): PerformanceInfoPtr; cdecl;
begin
	try
		Result := TraceTransactionImpl(this).getPerf();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TraceTransactionImpl_vTable: TraceTransactionVTable;

constructor TraceTransactionImpl.create;
begin
	vTable := TraceTransactionImpl_vTable;
end;

function TraceParamsImpl_getCountDispatcher(this: TraceParams): Cardinal; cdecl;
begin
	try
		Result := TraceParamsImpl(this).getCount();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceParamsImpl_getParamDispatcher(this: TraceParams; idx: Cardinal): dscPtr; cdecl;
begin
	try
		Result := TraceParamsImpl(this).getParam(idx);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TraceParamsImpl_vTable: TraceParamsVTable;

constructor TraceParamsImpl.create;
begin
	vTable := TraceParamsImpl_vTable;
end;

function TraceStatementImpl_getStmtIDDispatcher(this: TraceStatement): Integer; cdecl;
begin
	try
		Result := TraceStatementImpl(this).getStmtID();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceStatementImpl_getPerfDispatcher(this: TraceStatement): PerformanceInfoPtr; cdecl;
begin
	try
		Result := TraceStatementImpl(this).getPerf();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TraceStatementImpl_vTable: TraceStatementVTable;

constructor TraceStatementImpl.create;
begin
	vTable := TraceStatementImpl_vTable;
end;

function TraceSQLStatementImpl_getStmtIDDispatcher(this: TraceSQLStatement): Integer; cdecl;
begin
	try
		Result := TraceSQLStatementImpl(this).getStmtID();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceSQLStatementImpl_getPerfDispatcher(this: TraceSQLStatement): PerformanceInfoPtr; cdecl;
begin
	try
		Result := TraceSQLStatementImpl(this).getPerf();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceSQLStatementImpl_getTextDispatcher(this: TraceSQLStatement): PAnsiChar; cdecl;
begin
	try
		Result := TraceSQLStatementImpl(this).getText();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceSQLStatementImpl_getPlanDispatcher(this: TraceSQLStatement): PAnsiChar; cdecl;
begin
	try
		Result := TraceSQLStatementImpl(this).getPlan();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceSQLStatementImpl_getInputsDispatcher(this: TraceSQLStatement): TraceParams; cdecl;
begin
	try
		Result := TraceSQLStatementImpl(this).getInputs();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceSQLStatementImpl_getTextUTF8Dispatcher(this: TraceSQLStatement): PAnsiChar; cdecl;
begin
	try
		Result := TraceSQLStatementImpl(this).getTextUTF8();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceSQLStatementImpl_getExplainedPlanDispatcher(this: TraceSQLStatement): PAnsiChar; cdecl;
begin
	try
		Result := TraceSQLStatementImpl(this).getExplainedPlan();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TraceSQLStatementImpl_vTable: TraceSQLStatementVTable;

constructor TraceSQLStatementImpl.create;
begin
	vTable := TraceSQLStatementImpl_vTable;
end;

function TraceBLRStatementImpl_getStmtIDDispatcher(this: TraceBLRStatement): Integer; cdecl;
begin
	try
		Result := TraceBLRStatementImpl(this).getStmtID();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceBLRStatementImpl_getPerfDispatcher(this: TraceBLRStatement): PerformanceInfoPtr; cdecl;
begin
	try
		Result := TraceBLRStatementImpl(this).getPerf();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceBLRStatementImpl_getDataDispatcher(this: TraceBLRStatement): BytePtr; cdecl;
begin
	try
		Result := TraceBLRStatementImpl(this).getData();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceBLRStatementImpl_getDataLengthDispatcher(this: TraceBLRStatement): Cardinal; cdecl;
begin
	try
		Result := TraceBLRStatementImpl(this).getDataLength();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceBLRStatementImpl_getTextDispatcher(this: TraceBLRStatement): PAnsiChar; cdecl;
begin
	try
		Result := TraceBLRStatementImpl(this).getText();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TraceBLRStatementImpl_vTable: TraceBLRStatementVTable;

constructor TraceBLRStatementImpl.create;
begin
	vTable := TraceBLRStatementImpl_vTable;
end;

function TraceDYNRequestImpl_getDataDispatcher(this: TraceDYNRequest): BytePtr; cdecl;
begin
	try
		Result := TraceDYNRequestImpl(this).getData();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceDYNRequestImpl_getDataLengthDispatcher(this: TraceDYNRequest): Cardinal; cdecl;
begin
	try
		Result := TraceDYNRequestImpl(this).getDataLength();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceDYNRequestImpl_getTextDispatcher(this: TraceDYNRequest): PAnsiChar; cdecl;
begin
	try
		Result := TraceDYNRequestImpl(this).getText();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TraceDYNRequestImpl_vTable: TraceDYNRequestVTable;

constructor TraceDYNRequestImpl.create;
begin
	vTable := TraceDYNRequestImpl_vTable;
end;

function TraceContextVariableImpl_getNameSpaceDispatcher(this: TraceContextVariable): PAnsiChar; cdecl;
begin
	try
		Result := TraceContextVariableImpl(this).getNameSpace();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceContextVariableImpl_getVarNameDispatcher(this: TraceContextVariable): PAnsiChar; cdecl;
begin
	try
		Result := TraceContextVariableImpl(this).getVarName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceContextVariableImpl_getVarValueDispatcher(this: TraceContextVariable): PAnsiChar; cdecl;
begin
	try
		Result := TraceContextVariableImpl(this).getVarValue();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TraceContextVariableImpl_vTable: TraceContextVariableVTable;

constructor TraceContextVariableImpl.create;
begin
	vTable := TraceContextVariableImpl_vTable;
end;

function TraceProcedureImpl_getProcNameDispatcher(this: TraceProcedure): PAnsiChar; cdecl;
begin
	try
		Result := TraceProcedureImpl(this).getProcName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceProcedureImpl_getInputsDispatcher(this: TraceProcedure): TraceParams; cdecl;
begin
	try
		Result := TraceProcedureImpl(this).getInputs();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceProcedureImpl_getPerfDispatcher(this: TraceProcedure): PerformanceInfoPtr; cdecl;
begin
	try
		Result := TraceProcedureImpl(this).getPerf();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TraceProcedureImpl_vTable: TraceProcedureVTable;

constructor TraceProcedureImpl.create;
begin
	vTable := TraceProcedureImpl_vTable;
end;

function TraceFunctionImpl_getFuncNameDispatcher(this: TraceFunction): PAnsiChar; cdecl;
begin
	try
		Result := TraceFunctionImpl(this).getFuncName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceFunctionImpl_getInputsDispatcher(this: TraceFunction): TraceParams; cdecl;
begin
	try
		Result := TraceFunctionImpl(this).getInputs();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceFunctionImpl_getResultDispatcher(this: TraceFunction): TraceParams; cdecl;
begin
	try
		Result := TraceFunctionImpl(this).getResult();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceFunctionImpl_getPerfDispatcher(this: TraceFunction): PerformanceInfoPtr; cdecl;
begin
	try
		Result := TraceFunctionImpl(this).getPerf();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TraceFunctionImpl_vTable: TraceFunctionVTable;

constructor TraceFunctionImpl.create;
begin
	vTable := TraceFunctionImpl_vTable;
end;

function TraceTriggerImpl_getTriggerNameDispatcher(this: TraceTrigger): PAnsiChar; cdecl;
begin
	try
		Result := TraceTriggerImpl(this).getTriggerName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceTriggerImpl_getRelationNameDispatcher(this: TraceTrigger): PAnsiChar; cdecl;
begin
	try
		Result := TraceTriggerImpl(this).getRelationName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceTriggerImpl_getActionDispatcher(this: TraceTrigger): Integer; cdecl;
begin
	try
		Result := TraceTriggerImpl(this).getAction();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceTriggerImpl_getWhichDispatcher(this: TraceTrigger): Integer; cdecl;
begin
	try
		Result := TraceTriggerImpl(this).getWhich();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceTriggerImpl_getPerfDispatcher(this: TraceTrigger): PerformanceInfoPtr; cdecl;
begin
	try
		Result := TraceTriggerImpl(this).getPerf();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TraceTriggerImpl_vTable: TraceTriggerVTable;

constructor TraceTriggerImpl.create;
begin
	vTable := TraceTriggerImpl_vTable;
end;

function TraceServiceConnectionImpl_getKindDispatcher(this: TraceServiceConnection): Cardinal; cdecl;
begin
	try
		Result := TraceServiceConnectionImpl(this).getKind();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceServiceConnectionImpl_getProcessIDDispatcher(this: TraceServiceConnection): Integer; cdecl;
begin
	try
		Result := TraceServiceConnectionImpl(this).getProcessID();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceServiceConnectionImpl_getUserNameDispatcher(this: TraceServiceConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceServiceConnectionImpl(this).getUserName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceServiceConnectionImpl_getRoleNameDispatcher(this: TraceServiceConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceServiceConnectionImpl(this).getRoleName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceServiceConnectionImpl_getCharSetDispatcher(this: TraceServiceConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceServiceConnectionImpl(this).getCharSet();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceServiceConnectionImpl_getRemoteProtocolDispatcher(this: TraceServiceConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceServiceConnectionImpl(this).getRemoteProtocol();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceServiceConnectionImpl_getRemoteAddressDispatcher(this: TraceServiceConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceServiceConnectionImpl(this).getRemoteAddress();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceServiceConnectionImpl_getRemoteProcessIDDispatcher(this: TraceServiceConnection): Integer; cdecl;
begin
	try
		Result := TraceServiceConnectionImpl(this).getRemoteProcessID();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceServiceConnectionImpl_getRemoteProcessNameDispatcher(this: TraceServiceConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceServiceConnectionImpl(this).getRemoteProcessName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceServiceConnectionImpl_getServiceIDDispatcher(this: TraceServiceConnection): Pointer; cdecl;
begin
	try
		Result := TraceServiceConnectionImpl(this).getServiceID();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceServiceConnectionImpl_getServiceMgrDispatcher(this: TraceServiceConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceServiceConnectionImpl(this).getServiceMgr();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceServiceConnectionImpl_getServiceNameDispatcher(this: TraceServiceConnection): PAnsiChar; cdecl;
begin
	try
		Result := TraceServiceConnectionImpl(this).getServiceName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TraceServiceConnectionImpl_vTable: TraceServiceConnectionVTable;

constructor TraceServiceConnectionImpl.create;
begin
	vTable := TraceServiceConnectionImpl_vTable;
end;

function TraceStatusVectorImpl_hasErrorDispatcher(this: TraceStatusVector): Boolean; cdecl;
begin
	try
		Result := TraceStatusVectorImpl(this).hasError();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceStatusVectorImpl_hasWarningDispatcher(this: TraceStatusVector): Boolean; cdecl;
begin
	try
		Result := TraceStatusVectorImpl(this).hasWarning();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceStatusVectorImpl_getStatusDispatcher(this: TraceStatusVector): Status; cdecl;
begin
	try
		Result := TraceStatusVectorImpl(this).getStatus();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceStatusVectorImpl_getTextDispatcher(this: TraceStatusVector): PAnsiChar; cdecl;
begin
	try
		Result := TraceStatusVectorImpl(this).getText();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TraceStatusVectorImpl_vTable: TraceStatusVectorVTable;

constructor TraceStatusVectorImpl.create;
begin
	vTable := TraceStatusVectorImpl_vTable;
end;

function TraceSweepInfoImpl_getOITDispatcher(this: TraceSweepInfo): QWord; cdecl;
begin
	try
		Result := TraceSweepInfoImpl(this).getOIT();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceSweepInfoImpl_getOSTDispatcher(this: TraceSweepInfo): QWord; cdecl;
begin
	try
		Result := TraceSweepInfoImpl(this).getOST();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceSweepInfoImpl_getOATDispatcher(this: TraceSweepInfo): QWord; cdecl;
begin
	try
		Result := TraceSweepInfoImpl(this).getOAT();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceSweepInfoImpl_getNextDispatcher(this: TraceSweepInfo): QWord; cdecl;
begin
	try
		Result := TraceSweepInfoImpl(this).getNext();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceSweepInfoImpl_getPerfDispatcher(this: TraceSweepInfo): PerformanceInfoPtr; cdecl;
begin
	try
		Result := TraceSweepInfoImpl(this).getPerf();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TraceSweepInfoImpl_vTable: TraceSweepInfoVTable;

constructor TraceSweepInfoImpl.create;
begin
	vTable := TraceSweepInfoImpl_vTable;
end;

procedure TraceLogWriterImpl_addRefDispatcher(this: TraceLogWriter); cdecl;
begin
	try
		TraceLogWriterImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceLogWriterImpl_releaseDispatcher(this: TraceLogWriter): Integer; cdecl;
begin
	try
		Result := TraceLogWriterImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceLogWriterImpl_writeDispatcher(this: TraceLogWriter; buf: Pointer; size: Cardinal): Cardinal; cdecl;
begin
	try
		Result := TraceLogWriterImpl(this).write(buf, size);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TraceLogWriterImpl_vTable: TraceLogWriterVTable;

constructor TraceLogWriterImpl.create;
begin
	vTable := TraceLogWriterImpl_vTable;
end;

function TraceInitInfoImpl_getConfigTextDispatcher(this: TraceInitInfo): PAnsiChar; cdecl;
begin
	try
		Result := TraceInitInfoImpl(this).getConfigText();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceInitInfoImpl_getTraceSessionIDDispatcher(this: TraceInitInfo): Integer; cdecl;
begin
	try
		Result := TraceInitInfoImpl(this).getTraceSessionID();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceInitInfoImpl_getTraceSessionNameDispatcher(this: TraceInitInfo): PAnsiChar; cdecl;
begin
	try
		Result := TraceInitInfoImpl(this).getTraceSessionName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceInitInfoImpl_getFirebirdRootDirectoryDispatcher(this: TraceInitInfo): PAnsiChar; cdecl;
begin
	try
		Result := TraceInitInfoImpl(this).getFirebirdRootDirectory();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceInitInfoImpl_getDatabaseNameDispatcher(this: TraceInitInfo): PAnsiChar; cdecl;
begin
	try
		Result := TraceInitInfoImpl(this).getDatabaseName();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceInitInfoImpl_getConnectionDispatcher(this: TraceInitInfo): TraceDatabaseConnection; cdecl;
begin
	try
		Result := TraceInitInfoImpl(this).getConnection();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceInitInfoImpl_getLogWriterDispatcher(this: TraceInitInfo): TraceLogWriter; cdecl;
begin
	try
		Result := TraceInitInfoImpl(this).getLogWriter();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TraceInitInfoImpl_vTable: TraceInitInfoVTable;

constructor TraceInitInfoImpl.create;
begin
	vTable := TraceInitInfoImpl_vTable;
end;

procedure TracePluginImpl_addRefDispatcher(this: TracePlugin); cdecl;
begin
	try
		TracePluginImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_releaseDispatcher(this: TracePlugin): Integer; cdecl;
begin
	try
		Result := TracePluginImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_get_errorDispatcher(this: TracePlugin): PAnsiChar; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_get_error();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_attachDispatcher(this: TracePlugin; connection: TraceDatabaseConnection; create_db: Boolean; att_result: Cardinal): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_attach(connection, create_db, att_result);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_detachDispatcher(this: TracePlugin; connection: TraceDatabaseConnection; drop_db: Boolean): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_detach(connection, drop_db);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_transaction_startDispatcher(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; tpb_length: Cardinal; tpb: BytePtr; tra_result: Cardinal): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_transaction_start(connection, transaction, tpb_length, tpb, tra_result);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_transaction_endDispatcher(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; commit: Boolean; retain_context: Boolean; tra_result: Cardinal): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_transaction_end(connection, transaction, commit, retain_context, tra_result);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_proc_executeDispatcher(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; procedure_: TraceProcedure; started: Boolean; proc_result: Cardinal): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_proc_execute(connection, transaction, procedure_, started, proc_result);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_trigger_executeDispatcher(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; trigger: TraceTrigger; started: Boolean; trig_result: Cardinal): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_trigger_execute(connection, transaction, trigger, started, trig_result);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_set_contextDispatcher(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; variable: TraceContextVariable): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_set_context(connection, transaction, variable);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_dsql_prepareDispatcher(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceSQLStatement; time_millis: Int64; req_result: Cardinal): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_dsql_prepare(connection, transaction, statement, time_millis, req_result);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_dsql_freeDispatcher(this: TracePlugin; connection: TraceDatabaseConnection; statement: TraceSQLStatement; option: Cardinal): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_dsql_free(connection, statement, option);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_dsql_executeDispatcher(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceSQLStatement; started: Boolean; req_result: Cardinal): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_dsql_execute(connection, transaction, statement, started, req_result);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_blr_compileDispatcher(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceBLRStatement; time_millis: Int64; req_result: Cardinal): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_blr_compile(connection, transaction, statement, time_millis, req_result);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_blr_executeDispatcher(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; statement: TraceBLRStatement; req_result: Cardinal): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_blr_execute(connection, transaction, statement, req_result);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_dyn_executeDispatcher(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; request: TraceDYNRequest; time_millis: Int64; req_result: Cardinal): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_dyn_execute(connection, transaction, request, time_millis, req_result);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_service_attachDispatcher(this: TracePlugin; service: TraceServiceConnection; att_result: Cardinal): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_service_attach(service, att_result);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_service_startDispatcher(this: TracePlugin; service: TraceServiceConnection; switches_length: Cardinal; switches: PAnsiChar; start_result: Cardinal): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_service_start(service, switches_length, switches, start_result);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_service_queryDispatcher(this: TracePlugin; service: TraceServiceConnection; send_item_length: Cardinal; send_items: BytePtr; recv_item_length: Cardinal; recv_items: BytePtr; query_result: Cardinal): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_service_query(service, send_item_length, send_items, recv_item_length, recv_items, query_result);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_service_detachDispatcher(this: TracePlugin; service: TraceServiceConnection; detach_result: Cardinal): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_service_detach(service, detach_result);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_event_errorDispatcher(this: TracePlugin; connection: TraceConnection; status: TraceStatusVector; function_: PAnsiChar): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_event_error(connection, status, function_);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_event_sweepDispatcher(this: TracePlugin; connection: TraceDatabaseConnection; sweep: TraceSweepInfo; sweep_state: Cardinal): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_event_sweep(connection, sweep, sweep_state);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TracePluginImpl_trace_func_executeDispatcher(this: TracePlugin; connection: TraceDatabaseConnection; transaction: TraceTransaction; function_: TraceFunction; started: Boolean; func_result: Cardinal): Boolean; cdecl;
begin
	try
		Result := TracePluginImpl(this).trace_func_execute(connection, transaction, function_, started, func_result);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

var
	TracePluginImpl_vTable: TracePluginVTable;

constructor TracePluginImpl.create;
begin
	vTable := TracePluginImpl_vTable;
end;

procedure TraceFactoryImpl_addRefDispatcher(this: TraceFactory); cdecl;
begin
	try
		TraceFactoryImpl(this).addRef();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceFactoryImpl_releaseDispatcher(this: TraceFactory): Integer; cdecl;
begin
	try
		Result := TraceFactoryImpl(this).release();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure TraceFactoryImpl_setOwnerDispatcher(this: TraceFactory; r: ReferenceCounted); cdecl;
begin
	try
		TraceFactoryImpl(this).setOwner(r);
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceFactoryImpl_getOwnerDispatcher(this: TraceFactory): ReferenceCounted; cdecl;
begin
	try
		Result := TraceFactoryImpl(this).getOwner();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceFactoryImpl_trace_needsDispatcher(this: TraceFactory): QWord; cdecl;
begin
	try
		Result := TraceFactoryImpl(this).trace_needs();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

function TraceFactoryImpl_trace_createDispatcher(this: TraceFactory; status: Status; init_info: TraceInitInfo): TracePlugin; cdecl;
begin
	try
		Result := TraceFactoryImpl(this).trace_create(status, init_info);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	TraceFactoryImpl_vTable: TraceFactoryVTable;

constructor TraceFactoryImpl.create;
begin
	vTable := TraceFactoryImpl_vTable;
end;

procedure UdrFunctionFactoryImpl_disposeDispatcher(this: UdrFunctionFactory); cdecl;
begin
	try
		UdrFunctionFactoryImpl(this).dispose();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure UdrFunctionFactoryImpl_setupDispatcher(this: UdrFunctionFactory; status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder); cdecl;
begin
	try
		UdrFunctionFactoryImpl(this).setup(status, context, metadata, inBuilder, outBuilder);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function UdrFunctionFactoryImpl_newItemDispatcher(this: UdrFunctionFactory; status: Status; context: ExternalContext; metadata: RoutineMetadata): ExternalFunction; cdecl;
begin
	try
		Result := UdrFunctionFactoryImpl(this).newItem(status, context, metadata);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	UdrFunctionFactoryImpl_vTable: UdrFunctionFactoryVTable;

constructor UdrFunctionFactoryImpl.create;
begin
	vTable := UdrFunctionFactoryImpl_vTable;
end;

procedure UdrProcedureFactoryImpl_disposeDispatcher(this: UdrProcedureFactory); cdecl;
begin
	try
		UdrProcedureFactoryImpl(this).dispose();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure UdrProcedureFactoryImpl_setupDispatcher(this: UdrProcedureFactory; status: Status; context: ExternalContext; metadata: RoutineMetadata; inBuilder: MetadataBuilder; outBuilder: MetadataBuilder); cdecl;
begin
	try
		UdrProcedureFactoryImpl(this).setup(status, context, metadata, inBuilder, outBuilder);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function UdrProcedureFactoryImpl_newItemDispatcher(this: UdrProcedureFactory; status: Status; context: ExternalContext; metadata: RoutineMetadata): ExternalProcedure; cdecl;
begin
	try
		Result := UdrProcedureFactoryImpl(this).newItem(status, context, metadata);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	UdrProcedureFactoryImpl_vTable: UdrProcedureFactoryVTable;

constructor UdrProcedureFactoryImpl.create;
begin
	vTable := UdrProcedureFactoryImpl_vTable;
end;

procedure UdrTriggerFactoryImpl_disposeDispatcher(this: UdrTriggerFactory); cdecl;
begin
	try
		UdrTriggerFactoryImpl(this).dispose();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure UdrTriggerFactoryImpl_setupDispatcher(this: UdrTriggerFactory; status: Status; context: ExternalContext; metadata: RoutineMetadata; fieldsBuilder: MetadataBuilder); cdecl;
begin
	try
		UdrTriggerFactoryImpl(this).setup(status, context, metadata, fieldsBuilder);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

function UdrTriggerFactoryImpl_newItemDispatcher(this: UdrTriggerFactory; status: Status; context: ExternalContext; metadata: RoutineMetadata): ExternalTrigger; cdecl;
begin
	try
		Result := UdrTriggerFactoryImpl(this).newItem(status, context, metadata);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	UdrTriggerFactoryImpl_vTable: UdrTriggerFactoryVTable;

constructor UdrTriggerFactoryImpl.create;
begin
	vTable := UdrTriggerFactoryImpl_vTable;
end;

function UdrPluginImpl_getMasterDispatcher(this: UdrPlugin): Master; cdecl;
begin
	try
		Result := UdrPluginImpl(this).getMaster();
	except
		on e: Exception do FbException.catchException(nil, e);
	end
end;

procedure UdrPluginImpl_registerFunctionDispatcher(this: UdrPlugin; status: Status; name: PAnsiChar; factory: UdrFunctionFactory); cdecl;
begin
	try
		UdrPluginImpl(this).registerFunction(status, name, factory);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure UdrPluginImpl_registerProcedureDispatcher(this: UdrPlugin; status: Status; name: PAnsiChar; factory: UdrProcedureFactory); cdecl;
begin
	try
		UdrPluginImpl(this).registerProcedure(status, name, factory);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

procedure UdrPluginImpl_registerTriggerDispatcher(this: UdrPlugin; status: Status; name: PAnsiChar; factory: UdrTriggerFactory); cdecl;
begin
	try
		UdrPluginImpl(this).registerTrigger(status, name, factory);
	except
		on e: Exception do FbException.catchException(status, e);
	end
end;

var
	UdrPluginImpl_vTable: UdrPluginVTable;

constructor UdrPluginImpl.create;
begin
	vTable := UdrPluginImpl_vTable;
end;

constructor FbException.create(status: Status);
begin
	self.status := status.clone();
end;

destructor FbException.Destroy;
begin
	status.dispose();
	inherited;
end;

function FbException.getStatus: Status;
begin
	Result := status;
end;

class procedure FbException.checkException(status: Status);
begin
	if ((status.getState() and Status.STATE_ERRORS) <> 0) then
		raise FbException.create(status);
end;

class procedure FbException.catchException(status: Status; e: Exception);
var
	statusVector: array[0..4] of NativeIntPtr;
	msg: AnsiString;
begin
	if (e.inheritsFrom(FbException)) then
		status.setErrors(FbException(e).getStatus().getErrors())
	else
	begin
		msg := e.message;

		statusVector[0] := NativeIntPtr(1);			// isc_arg_gds
		statusVector[1] := NativeIntPtr(335544382);	// isc_random
		statusVector[2] := NativeIntPtr(2);			// isc_arg_string
		statusVector[3] := NativeIntPtr(PAnsiChar(msg));
		statusVector[4] := NativeIntPtr(0);			// isc_arg_end

		status.setErrors(@statusVector);
	end
end;
initialization
	VersionedImpl_vTable := VersionedVTable.create;
	VersionedImpl_vTable.version := 0;

	ReferenceCountedImpl_vTable := ReferenceCountedVTable.create;
	ReferenceCountedImpl_vTable.version := 2;
	ReferenceCountedImpl_vTable.addRef := @ReferenceCountedImpl_addRefDispatcher;
	ReferenceCountedImpl_vTable.release := @ReferenceCountedImpl_releaseDispatcher;

	DisposableImpl_vTable := DisposableVTable.create;
	DisposableImpl_vTable.version := 1;
	DisposableImpl_vTable.dispose := @DisposableImpl_disposeDispatcher;

	StatusImpl_vTable := StatusVTable.create;
	StatusImpl_vTable.version := 10;
	StatusImpl_vTable.dispose := @StatusImpl_disposeDispatcher;
	StatusImpl_vTable.init := @StatusImpl_initDispatcher;
	StatusImpl_vTable.getState := @StatusImpl_getStateDispatcher;
	StatusImpl_vTable.setErrors2 := @StatusImpl_setErrors2Dispatcher;
	StatusImpl_vTable.setWarnings2 := @StatusImpl_setWarnings2Dispatcher;
	StatusImpl_vTable.setErrors := @StatusImpl_setErrorsDispatcher;
	StatusImpl_vTable.setWarnings := @StatusImpl_setWarningsDispatcher;
	StatusImpl_vTable.getErrors := @StatusImpl_getErrorsDispatcher;
	StatusImpl_vTable.getWarnings := @StatusImpl_getWarningsDispatcher;
	StatusImpl_vTable.clone := @StatusImpl_cloneDispatcher;

	MasterImpl_vTable := MasterVTable.create;
	MasterImpl_vTable.version := 12;
	MasterImpl_vTable.getStatus := @MasterImpl_getStatusDispatcher;
	MasterImpl_vTable.getDispatcher := @MasterImpl_getDispatcherDispatcher;
	MasterImpl_vTable.getPluginManager := @MasterImpl_getPluginManagerDispatcher;
	MasterImpl_vTable.getTimerControl := @MasterImpl_getTimerControlDispatcher;
	MasterImpl_vTable.getDtc := @MasterImpl_getDtcDispatcher;
	MasterImpl_vTable.registerAttachment := @MasterImpl_registerAttachmentDispatcher;
	MasterImpl_vTable.registerTransaction := @MasterImpl_registerTransactionDispatcher;
	MasterImpl_vTable.getMetadataBuilder := @MasterImpl_getMetadataBuilderDispatcher;
	MasterImpl_vTable.serverMode := @MasterImpl_serverModeDispatcher;
	MasterImpl_vTable.getUtilInterface := @MasterImpl_getUtilInterfaceDispatcher;
	MasterImpl_vTable.getConfigManager := @MasterImpl_getConfigManagerDispatcher;
	MasterImpl_vTable.getProcessExiting := @MasterImpl_getProcessExitingDispatcher;

	PluginBaseImpl_vTable := PluginBaseVTable.create;
	PluginBaseImpl_vTable.version := 4;
	PluginBaseImpl_vTable.addRef := @PluginBaseImpl_addRefDispatcher;
	PluginBaseImpl_vTable.release := @PluginBaseImpl_releaseDispatcher;
	PluginBaseImpl_vTable.setOwner := @PluginBaseImpl_setOwnerDispatcher;
	PluginBaseImpl_vTable.getOwner := @PluginBaseImpl_getOwnerDispatcher;

	PluginSetImpl_vTable := PluginSetVTable.create;
	PluginSetImpl_vTable.version := 7;
	PluginSetImpl_vTable.addRef := @PluginSetImpl_addRefDispatcher;
	PluginSetImpl_vTable.release := @PluginSetImpl_releaseDispatcher;
	PluginSetImpl_vTable.getName := @PluginSetImpl_getNameDispatcher;
	PluginSetImpl_vTable.getModuleName := @PluginSetImpl_getModuleNameDispatcher;
	PluginSetImpl_vTable.getPlugin := @PluginSetImpl_getPluginDispatcher;
	PluginSetImpl_vTable.next := @PluginSetImpl_nextDispatcher;
	PluginSetImpl_vTable.set_ := @PluginSetImpl_set_Dispatcher;

	ConfigEntryImpl_vTable := ConfigEntryVTable.create;
	ConfigEntryImpl_vTable.version := 7;
	ConfigEntryImpl_vTable.addRef := @ConfigEntryImpl_addRefDispatcher;
	ConfigEntryImpl_vTable.release := @ConfigEntryImpl_releaseDispatcher;
	ConfigEntryImpl_vTable.getName := @ConfigEntryImpl_getNameDispatcher;
	ConfigEntryImpl_vTable.getValue := @ConfigEntryImpl_getValueDispatcher;
	ConfigEntryImpl_vTable.getIntValue := @ConfigEntryImpl_getIntValueDispatcher;
	ConfigEntryImpl_vTable.getBoolValue := @ConfigEntryImpl_getBoolValueDispatcher;
	ConfigEntryImpl_vTable.getSubConfig := @ConfigEntryImpl_getSubConfigDispatcher;

	ConfigImpl_vTable := ConfigVTable.create;
	ConfigImpl_vTable.version := 5;
	ConfigImpl_vTable.addRef := @ConfigImpl_addRefDispatcher;
	ConfigImpl_vTable.release := @ConfigImpl_releaseDispatcher;
	ConfigImpl_vTable.find := @ConfigImpl_findDispatcher;
	ConfigImpl_vTable.findValue := @ConfigImpl_findValueDispatcher;
	ConfigImpl_vTable.findPos := @ConfigImpl_findPosDispatcher;

	FirebirdConfImpl_vTable := FirebirdConfVTable.create;
	FirebirdConfImpl_vTable.version := 6;
	FirebirdConfImpl_vTable.addRef := @FirebirdConfImpl_addRefDispatcher;
	FirebirdConfImpl_vTable.release := @FirebirdConfImpl_releaseDispatcher;
	FirebirdConfImpl_vTable.getKey := @FirebirdConfImpl_getKeyDispatcher;
	FirebirdConfImpl_vTable.asInteger := @FirebirdConfImpl_asIntegerDispatcher;
	FirebirdConfImpl_vTable.asString := @FirebirdConfImpl_asStringDispatcher;
	FirebirdConfImpl_vTable.asBoolean := @FirebirdConfImpl_asBooleanDispatcher;

	PluginConfigImpl_vTable := PluginConfigVTable.create;
	PluginConfigImpl_vTable.version := 6;
	PluginConfigImpl_vTable.addRef := @PluginConfigImpl_addRefDispatcher;
	PluginConfigImpl_vTable.release := @PluginConfigImpl_releaseDispatcher;
	PluginConfigImpl_vTable.getConfigFileName := @PluginConfigImpl_getConfigFileNameDispatcher;
	PluginConfigImpl_vTable.getDefaultConfig := @PluginConfigImpl_getDefaultConfigDispatcher;
	PluginConfigImpl_vTable.getFirebirdConf := @PluginConfigImpl_getFirebirdConfDispatcher;
	PluginConfigImpl_vTable.setReleaseDelay := @PluginConfigImpl_setReleaseDelayDispatcher;

	PluginFactoryImpl_vTable := PluginFactoryVTable.create;
	PluginFactoryImpl_vTable.version := 1;
	PluginFactoryImpl_vTable.createPlugin := @PluginFactoryImpl_createPluginDispatcher;

	PluginModuleImpl_vTable := PluginModuleVTable.create;
	PluginModuleImpl_vTable.version := 1;
	PluginModuleImpl_vTable.doClean := @PluginModuleImpl_doCleanDispatcher;

	PluginManagerImpl_vTable := PluginManagerVTable.create;
	PluginManagerImpl_vTable.version := 6;
	PluginManagerImpl_vTable.registerPluginFactory := @PluginManagerImpl_registerPluginFactoryDispatcher;
	PluginManagerImpl_vTable.registerModule := @PluginManagerImpl_registerModuleDispatcher;
	PluginManagerImpl_vTable.unregisterModule := @PluginManagerImpl_unregisterModuleDispatcher;
	PluginManagerImpl_vTable.getPlugins := @PluginManagerImpl_getPluginsDispatcher;
	PluginManagerImpl_vTable.getConfig := @PluginManagerImpl_getConfigDispatcher;
	PluginManagerImpl_vTable.releasePlugin := @PluginManagerImpl_releasePluginDispatcher;

	CryptKeyImpl_vTable := CryptKeyVTable.create;
	CryptKeyImpl_vTable.version := 4;
	CryptKeyImpl_vTable.setSymmetric := @CryptKeyImpl_setSymmetricDispatcher;
	CryptKeyImpl_vTable.setAsymmetric := @CryptKeyImpl_setAsymmetricDispatcher;
	CryptKeyImpl_vTable.getEncryptKey := @CryptKeyImpl_getEncryptKeyDispatcher;
	CryptKeyImpl_vTable.getDecryptKey := @CryptKeyImpl_getDecryptKeyDispatcher;

	ConfigManagerImpl_vTable := ConfigManagerVTable.create;
	ConfigManagerImpl_vTable.version := 6;
	ConfigManagerImpl_vTable.getDirectory := @ConfigManagerImpl_getDirectoryDispatcher;
	ConfigManagerImpl_vTable.getFirebirdConf := @ConfigManagerImpl_getFirebirdConfDispatcher;
	ConfigManagerImpl_vTable.getDatabaseConf := @ConfigManagerImpl_getDatabaseConfDispatcher;
	ConfigManagerImpl_vTable.getPluginConfig := @ConfigManagerImpl_getPluginConfigDispatcher;
	ConfigManagerImpl_vTable.getInstallDirectory := @ConfigManagerImpl_getInstallDirectoryDispatcher;
	ConfigManagerImpl_vTable.getRootDirectory := @ConfigManagerImpl_getRootDirectoryDispatcher;

	EventCallbackImpl_vTable := EventCallbackVTable.create;
	EventCallbackImpl_vTable.version := 3;
	EventCallbackImpl_vTable.addRef := @EventCallbackImpl_addRefDispatcher;
	EventCallbackImpl_vTable.release := @EventCallbackImpl_releaseDispatcher;
	EventCallbackImpl_vTable.eventCallbackFunction := @EventCallbackImpl_eventCallbackFunctionDispatcher;

	BlobImpl_vTable := BlobVTable.create;
	BlobImpl_vTable.version := 8;
	BlobImpl_vTable.addRef := @BlobImpl_addRefDispatcher;
	BlobImpl_vTable.release := @BlobImpl_releaseDispatcher;
	BlobImpl_vTable.getInfo := @BlobImpl_getInfoDispatcher;
	BlobImpl_vTable.getSegment := @BlobImpl_getSegmentDispatcher;
	BlobImpl_vTable.putSegment := @BlobImpl_putSegmentDispatcher;
	BlobImpl_vTable.cancel := @BlobImpl_cancelDispatcher;
	BlobImpl_vTable.close := @BlobImpl_closeDispatcher;
	BlobImpl_vTable.seek := @BlobImpl_seekDispatcher;

	TransactionImpl_vTable := TransactionVTable.create;
	TransactionImpl_vTable.version := 12;
	TransactionImpl_vTable.addRef := @TransactionImpl_addRefDispatcher;
	TransactionImpl_vTable.release := @TransactionImpl_releaseDispatcher;
	TransactionImpl_vTable.getInfo := @TransactionImpl_getInfoDispatcher;
	TransactionImpl_vTable.prepare := @TransactionImpl_prepareDispatcher;
	TransactionImpl_vTable.commit := @TransactionImpl_commitDispatcher;
	TransactionImpl_vTable.commitRetaining := @TransactionImpl_commitRetainingDispatcher;
	TransactionImpl_vTable.rollback := @TransactionImpl_rollbackDispatcher;
	TransactionImpl_vTable.rollbackRetaining := @TransactionImpl_rollbackRetainingDispatcher;
	TransactionImpl_vTable.disconnect := @TransactionImpl_disconnectDispatcher;
	TransactionImpl_vTable.join := @TransactionImpl_joinDispatcher;
	TransactionImpl_vTable.validate := @TransactionImpl_validateDispatcher;
	TransactionImpl_vTable.enterDtc := @TransactionImpl_enterDtcDispatcher;

	MessageMetadataImpl_vTable := MessageMetadataVTable.create;
	MessageMetadataImpl_vTable.version := 17;
	MessageMetadataImpl_vTable.addRef := @MessageMetadataImpl_addRefDispatcher;
	MessageMetadataImpl_vTable.release := @MessageMetadataImpl_releaseDispatcher;
	MessageMetadataImpl_vTable.getCount := @MessageMetadataImpl_getCountDispatcher;
	MessageMetadataImpl_vTable.getField := @MessageMetadataImpl_getFieldDispatcher;
	MessageMetadataImpl_vTable.getRelation := @MessageMetadataImpl_getRelationDispatcher;
	MessageMetadataImpl_vTable.getOwner := @MessageMetadataImpl_getOwnerDispatcher;
	MessageMetadataImpl_vTable.getAlias := @MessageMetadataImpl_getAliasDispatcher;
	MessageMetadataImpl_vTable.getType := @MessageMetadataImpl_getTypeDispatcher;
	MessageMetadataImpl_vTable.isNullable := @MessageMetadataImpl_isNullableDispatcher;
	MessageMetadataImpl_vTable.getSubType := @MessageMetadataImpl_getSubTypeDispatcher;
	MessageMetadataImpl_vTable.getLength := @MessageMetadataImpl_getLengthDispatcher;
	MessageMetadataImpl_vTable.getScale := @MessageMetadataImpl_getScaleDispatcher;
	MessageMetadataImpl_vTable.getCharSet := @MessageMetadataImpl_getCharSetDispatcher;
	MessageMetadataImpl_vTable.getOffset := @MessageMetadataImpl_getOffsetDispatcher;
	MessageMetadataImpl_vTable.getNullOffset := @MessageMetadataImpl_getNullOffsetDispatcher;
	MessageMetadataImpl_vTable.getBuilder := @MessageMetadataImpl_getBuilderDispatcher;
	MessageMetadataImpl_vTable.getMessageLength := @MessageMetadataImpl_getMessageLengthDispatcher;

	MetadataBuilderImpl_vTable := MetadataBuilderVTable.create;
	MetadataBuilderImpl_vTable.version := 12;
	MetadataBuilderImpl_vTable.addRef := @MetadataBuilderImpl_addRefDispatcher;
	MetadataBuilderImpl_vTable.release := @MetadataBuilderImpl_releaseDispatcher;
	MetadataBuilderImpl_vTable.setType := @MetadataBuilderImpl_setTypeDispatcher;
	MetadataBuilderImpl_vTable.setSubType := @MetadataBuilderImpl_setSubTypeDispatcher;
	MetadataBuilderImpl_vTable.setLength := @MetadataBuilderImpl_setLengthDispatcher;
	MetadataBuilderImpl_vTable.setCharSet := @MetadataBuilderImpl_setCharSetDispatcher;
	MetadataBuilderImpl_vTable.setScale := @MetadataBuilderImpl_setScaleDispatcher;
	MetadataBuilderImpl_vTable.truncate := @MetadataBuilderImpl_truncateDispatcher;
	MetadataBuilderImpl_vTable.moveNameToIndex := @MetadataBuilderImpl_moveNameToIndexDispatcher;
	MetadataBuilderImpl_vTable.remove := @MetadataBuilderImpl_removeDispatcher;
	MetadataBuilderImpl_vTable.addField := @MetadataBuilderImpl_addFieldDispatcher;
	MetadataBuilderImpl_vTable.getMetadata := @MetadataBuilderImpl_getMetadataDispatcher;

	ResultSetImpl_vTable := ResultSetVTable.create;
	ResultSetImpl_vTable.version := 13;
	ResultSetImpl_vTable.addRef := @ResultSetImpl_addRefDispatcher;
	ResultSetImpl_vTable.release := @ResultSetImpl_releaseDispatcher;
	ResultSetImpl_vTable.fetchNext := @ResultSetImpl_fetchNextDispatcher;
	ResultSetImpl_vTable.fetchPrior := @ResultSetImpl_fetchPriorDispatcher;
	ResultSetImpl_vTable.fetchFirst := @ResultSetImpl_fetchFirstDispatcher;
	ResultSetImpl_vTable.fetchLast := @ResultSetImpl_fetchLastDispatcher;
	ResultSetImpl_vTable.fetchAbsolute := @ResultSetImpl_fetchAbsoluteDispatcher;
	ResultSetImpl_vTable.fetchRelative := @ResultSetImpl_fetchRelativeDispatcher;
	ResultSetImpl_vTable.isEof := @ResultSetImpl_isEofDispatcher;
	ResultSetImpl_vTable.isBof := @ResultSetImpl_isBofDispatcher;
	ResultSetImpl_vTable.getMetadata := @ResultSetImpl_getMetadataDispatcher;
	ResultSetImpl_vTable.close := @ResultSetImpl_closeDispatcher;
	ResultSetImpl_vTable.setDelayedOutputFormat := @ResultSetImpl_setDelayedOutputFormatDispatcher;

	StatementImpl_vTable := StatementVTable.create;
	StatementImpl_vTable.version := 13;
	StatementImpl_vTable.addRef := @StatementImpl_addRefDispatcher;
	StatementImpl_vTable.release := @StatementImpl_releaseDispatcher;
	StatementImpl_vTable.getInfo := @StatementImpl_getInfoDispatcher;
	StatementImpl_vTable.getType := @StatementImpl_getTypeDispatcher;
	StatementImpl_vTable.getPlan := @StatementImpl_getPlanDispatcher;
	StatementImpl_vTable.getAffectedRecords := @StatementImpl_getAffectedRecordsDispatcher;
	StatementImpl_vTable.getInputMetadata := @StatementImpl_getInputMetadataDispatcher;
	StatementImpl_vTable.getOutputMetadata := @StatementImpl_getOutputMetadataDispatcher;
	StatementImpl_vTable.execute := @StatementImpl_executeDispatcher;
	StatementImpl_vTable.openCursor := @StatementImpl_openCursorDispatcher;
	StatementImpl_vTable.setCursorName := @StatementImpl_setCursorNameDispatcher;
	StatementImpl_vTable.free := @StatementImpl_freeDispatcher;
	StatementImpl_vTable.getFlags := @StatementImpl_getFlagsDispatcher;

	RequestImpl_vTable := RequestVTable.create;
	RequestImpl_vTable.version := 9;
	RequestImpl_vTable.addRef := @RequestImpl_addRefDispatcher;
	RequestImpl_vTable.release := @RequestImpl_releaseDispatcher;
	RequestImpl_vTable.receive := @RequestImpl_receiveDispatcher;
	RequestImpl_vTable.send := @RequestImpl_sendDispatcher;
	RequestImpl_vTable.getInfo := @RequestImpl_getInfoDispatcher;
	RequestImpl_vTable.start := @RequestImpl_startDispatcher;
	RequestImpl_vTable.startAndSend := @RequestImpl_startAndSendDispatcher;
	RequestImpl_vTable.unwind := @RequestImpl_unwindDispatcher;
	RequestImpl_vTable.free := @RequestImpl_freeDispatcher;

	EventsImpl_vTable := EventsVTable.create;
	EventsImpl_vTable.version := 3;
	EventsImpl_vTable.addRef := @EventsImpl_addRefDispatcher;
	EventsImpl_vTable.release := @EventsImpl_releaseDispatcher;
	EventsImpl_vTable.cancel := @EventsImpl_cancelDispatcher;

	AttachmentImpl_vTable := AttachmentVTable.create;
	AttachmentImpl_vTable.version := 20;
	AttachmentImpl_vTable.addRef := @AttachmentImpl_addRefDispatcher;
	AttachmentImpl_vTable.release := @AttachmentImpl_releaseDispatcher;
	AttachmentImpl_vTable.getInfo := @AttachmentImpl_getInfoDispatcher;
	AttachmentImpl_vTable.startTransaction := @AttachmentImpl_startTransactionDispatcher;
	AttachmentImpl_vTable.reconnectTransaction := @AttachmentImpl_reconnectTransactionDispatcher;
	AttachmentImpl_vTable.compileRequest := @AttachmentImpl_compileRequestDispatcher;
	AttachmentImpl_vTable.transactRequest := @AttachmentImpl_transactRequestDispatcher;
	AttachmentImpl_vTable.createBlob := @AttachmentImpl_createBlobDispatcher;
	AttachmentImpl_vTable.openBlob := @AttachmentImpl_openBlobDispatcher;
	AttachmentImpl_vTable.getSlice := @AttachmentImpl_getSliceDispatcher;
	AttachmentImpl_vTable.putSlice := @AttachmentImpl_putSliceDispatcher;
	AttachmentImpl_vTable.executeDyn := @AttachmentImpl_executeDynDispatcher;
	AttachmentImpl_vTable.prepare := @AttachmentImpl_prepareDispatcher;
	AttachmentImpl_vTable.execute := @AttachmentImpl_executeDispatcher;
	AttachmentImpl_vTable.openCursor := @AttachmentImpl_openCursorDispatcher;
	AttachmentImpl_vTable.queEvents := @AttachmentImpl_queEventsDispatcher;
	AttachmentImpl_vTable.cancelOperation := @AttachmentImpl_cancelOperationDispatcher;
	AttachmentImpl_vTable.ping := @AttachmentImpl_pingDispatcher;
	AttachmentImpl_vTable.detach := @AttachmentImpl_detachDispatcher;
	AttachmentImpl_vTable.dropDatabase := @AttachmentImpl_dropDatabaseDispatcher;

	ServiceImpl_vTable := ServiceVTable.create;
	ServiceImpl_vTable.version := 5;
	ServiceImpl_vTable.addRef := @ServiceImpl_addRefDispatcher;
	ServiceImpl_vTable.release := @ServiceImpl_releaseDispatcher;
	ServiceImpl_vTable.detach := @ServiceImpl_detachDispatcher;
	ServiceImpl_vTable.query := @ServiceImpl_queryDispatcher;
	ServiceImpl_vTable.start := @ServiceImpl_startDispatcher;

	ProviderImpl_vTable := ProviderVTable.create;
	ProviderImpl_vTable.version := 9;
	ProviderImpl_vTable.addRef := @ProviderImpl_addRefDispatcher;
	ProviderImpl_vTable.release := @ProviderImpl_releaseDispatcher;
	ProviderImpl_vTable.setOwner := @ProviderImpl_setOwnerDispatcher;
	ProviderImpl_vTable.getOwner := @ProviderImpl_getOwnerDispatcher;
	ProviderImpl_vTable.attachDatabase := @ProviderImpl_attachDatabaseDispatcher;
	ProviderImpl_vTable.createDatabase := @ProviderImpl_createDatabaseDispatcher;
	ProviderImpl_vTable.attachServiceManager := @ProviderImpl_attachServiceManagerDispatcher;
	ProviderImpl_vTable.shutdown := @ProviderImpl_shutdownDispatcher;
	ProviderImpl_vTable.setDbCryptCallback := @ProviderImpl_setDbCryptCallbackDispatcher;

	DtcStartImpl_vTable := DtcStartVTable.create;
	DtcStartImpl_vTable.version := 4;
	DtcStartImpl_vTable.dispose := @DtcStartImpl_disposeDispatcher;
	DtcStartImpl_vTable.addAttachment := @DtcStartImpl_addAttachmentDispatcher;
	DtcStartImpl_vTable.addWithTpb := @DtcStartImpl_addWithTpbDispatcher;
	DtcStartImpl_vTable.start := @DtcStartImpl_startDispatcher;

	DtcImpl_vTable := DtcVTable.create;
	DtcImpl_vTable.version := 2;
	DtcImpl_vTable.join := @DtcImpl_joinDispatcher;
	DtcImpl_vTable.startBuilder := @DtcImpl_startBuilderDispatcher;

	AuthImpl_vTable := AuthVTable.create;
	AuthImpl_vTable.version := 4;
	AuthImpl_vTable.addRef := @AuthImpl_addRefDispatcher;
	AuthImpl_vTable.release := @AuthImpl_releaseDispatcher;
	AuthImpl_vTable.setOwner := @AuthImpl_setOwnerDispatcher;
	AuthImpl_vTable.getOwner := @AuthImpl_getOwnerDispatcher;

	WriterImpl_vTable := WriterVTable.create;
	WriterImpl_vTable.version := 4;
	WriterImpl_vTable.reset := @WriterImpl_resetDispatcher;
	WriterImpl_vTable.add := @WriterImpl_addDispatcher;
	WriterImpl_vTable.setType := @WriterImpl_setTypeDispatcher;
	WriterImpl_vTable.setDb := @WriterImpl_setDbDispatcher;

	ServerBlockImpl_vTable := ServerBlockVTable.create;
	ServerBlockImpl_vTable.version := 4;
	ServerBlockImpl_vTable.getLogin := @ServerBlockImpl_getLoginDispatcher;
	ServerBlockImpl_vTable.getData := @ServerBlockImpl_getDataDispatcher;
	ServerBlockImpl_vTable.putData := @ServerBlockImpl_putDataDispatcher;
	ServerBlockImpl_vTable.newKey := @ServerBlockImpl_newKeyDispatcher;

	ClientBlockImpl_vTable := ClientBlockVTable.create;
	ClientBlockImpl_vTable.version := 7;
	ClientBlockImpl_vTable.addRef := @ClientBlockImpl_addRefDispatcher;
	ClientBlockImpl_vTable.release := @ClientBlockImpl_releaseDispatcher;
	ClientBlockImpl_vTable.getLogin := @ClientBlockImpl_getLoginDispatcher;
	ClientBlockImpl_vTable.getPassword := @ClientBlockImpl_getPasswordDispatcher;
	ClientBlockImpl_vTable.getData := @ClientBlockImpl_getDataDispatcher;
	ClientBlockImpl_vTable.putData := @ClientBlockImpl_putDataDispatcher;
	ClientBlockImpl_vTable.newKey := @ClientBlockImpl_newKeyDispatcher;

	ServerImpl_vTable := ServerVTable.create;
	ServerImpl_vTable.version := 5;
	ServerImpl_vTable.addRef := @ServerImpl_addRefDispatcher;
	ServerImpl_vTable.release := @ServerImpl_releaseDispatcher;
	ServerImpl_vTable.setOwner := @ServerImpl_setOwnerDispatcher;
	ServerImpl_vTable.getOwner := @ServerImpl_getOwnerDispatcher;
	ServerImpl_vTable.authenticate := @ServerImpl_authenticateDispatcher;

	ClientImpl_vTable := ClientVTable.create;
	ClientImpl_vTable.version := 5;
	ClientImpl_vTable.addRef := @ClientImpl_addRefDispatcher;
	ClientImpl_vTable.release := @ClientImpl_releaseDispatcher;
	ClientImpl_vTable.setOwner := @ClientImpl_setOwnerDispatcher;
	ClientImpl_vTable.getOwner := @ClientImpl_getOwnerDispatcher;
	ClientImpl_vTable.authenticate := @ClientImpl_authenticateDispatcher;

	UserFieldImpl_vTable := UserFieldVTable.create;
	UserFieldImpl_vTable.version := 3;
	UserFieldImpl_vTable.entered := @UserFieldImpl_enteredDispatcher;
	UserFieldImpl_vTable.specified := @UserFieldImpl_specifiedDispatcher;
	UserFieldImpl_vTable.setEntered := @UserFieldImpl_setEnteredDispatcher;

	CharUserFieldImpl_vTable := CharUserFieldVTable.create;
	CharUserFieldImpl_vTable.version := 5;
	CharUserFieldImpl_vTable.entered := @CharUserFieldImpl_enteredDispatcher;
	CharUserFieldImpl_vTable.specified := @CharUserFieldImpl_specifiedDispatcher;
	CharUserFieldImpl_vTable.setEntered := @CharUserFieldImpl_setEnteredDispatcher;
	CharUserFieldImpl_vTable.get := @CharUserFieldImpl_getDispatcher;
	CharUserFieldImpl_vTable.set_ := @CharUserFieldImpl_set_Dispatcher;

	IntUserFieldImpl_vTable := IntUserFieldVTable.create;
	IntUserFieldImpl_vTable.version := 5;
	IntUserFieldImpl_vTable.entered := @IntUserFieldImpl_enteredDispatcher;
	IntUserFieldImpl_vTable.specified := @IntUserFieldImpl_specifiedDispatcher;
	IntUserFieldImpl_vTable.setEntered := @IntUserFieldImpl_setEnteredDispatcher;
	IntUserFieldImpl_vTable.get := @IntUserFieldImpl_getDispatcher;
	IntUserFieldImpl_vTable.set_ := @IntUserFieldImpl_set_Dispatcher;

	UserImpl_vTable := UserVTable.create;
	UserImpl_vTable.version := 11;
	UserImpl_vTable.operation := @UserImpl_operationDispatcher;
	UserImpl_vTable.userName := @UserImpl_userNameDispatcher;
	UserImpl_vTable.password := @UserImpl_passwordDispatcher;
	UserImpl_vTable.firstName := @UserImpl_firstNameDispatcher;
	UserImpl_vTable.lastName := @UserImpl_lastNameDispatcher;
	UserImpl_vTable.middleName := @UserImpl_middleNameDispatcher;
	UserImpl_vTable.comment := @UserImpl_commentDispatcher;
	UserImpl_vTable.attributes := @UserImpl_attributesDispatcher;
	UserImpl_vTable.active := @UserImpl_activeDispatcher;
	UserImpl_vTable.admin := @UserImpl_adminDispatcher;
	UserImpl_vTable.clear := @UserImpl_clearDispatcher;

	ListUsersImpl_vTable := ListUsersVTable.create;
	ListUsersImpl_vTable.version := 1;
	ListUsersImpl_vTable.list := @ListUsersImpl_listDispatcher;

	LogonInfoImpl_vTable := LogonInfoVTable.create;
	LogonInfoImpl_vTable.version := 5;
	LogonInfoImpl_vTable.name := @LogonInfoImpl_nameDispatcher;
	LogonInfoImpl_vTable.role := @LogonInfoImpl_roleDispatcher;
	LogonInfoImpl_vTable.networkProtocol := @LogonInfoImpl_networkProtocolDispatcher;
	LogonInfoImpl_vTable.remoteAddress := @LogonInfoImpl_remoteAddressDispatcher;
	LogonInfoImpl_vTable.authBlock := @LogonInfoImpl_authBlockDispatcher;

	ManagementImpl_vTable := ManagementVTable.create;
	ManagementImpl_vTable.version := 8;
	ManagementImpl_vTable.addRef := @ManagementImpl_addRefDispatcher;
	ManagementImpl_vTable.release := @ManagementImpl_releaseDispatcher;
	ManagementImpl_vTable.setOwner := @ManagementImpl_setOwnerDispatcher;
	ManagementImpl_vTable.getOwner := @ManagementImpl_getOwnerDispatcher;
	ManagementImpl_vTable.start := @ManagementImpl_startDispatcher;
	ManagementImpl_vTable.execute := @ManagementImpl_executeDispatcher;
	ManagementImpl_vTable.commit := @ManagementImpl_commitDispatcher;
	ManagementImpl_vTable.rollback := @ManagementImpl_rollbackDispatcher;

	WireCryptPluginImpl_vTable := WireCryptPluginVTable.create;
	WireCryptPluginImpl_vTable.version := 8;
	WireCryptPluginImpl_vTable.addRef := @WireCryptPluginImpl_addRefDispatcher;
	WireCryptPluginImpl_vTable.release := @WireCryptPluginImpl_releaseDispatcher;
	WireCryptPluginImpl_vTable.setOwner := @WireCryptPluginImpl_setOwnerDispatcher;
	WireCryptPluginImpl_vTable.getOwner := @WireCryptPluginImpl_getOwnerDispatcher;
	WireCryptPluginImpl_vTable.getKnownTypes := @WireCryptPluginImpl_getKnownTypesDispatcher;
	WireCryptPluginImpl_vTable.setKey := @WireCryptPluginImpl_setKeyDispatcher;
	WireCryptPluginImpl_vTable.encrypt := @WireCryptPluginImpl_encryptDispatcher;
	WireCryptPluginImpl_vTable.decrypt := @WireCryptPluginImpl_decryptDispatcher;

	CryptKeyCallbackImpl_vTable := CryptKeyCallbackVTable.create;
	CryptKeyCallbackImpl_vTable.version := 1;
	CryptKeyCallbackImpl_vTable.callback := @CryptKeyCallbackImpl_callbackDispatcher;

	KeyHolderPluginImpl_vTable := KeyHolderPluginVTable.create;
	KeyHolderPluginImpl_vTable.version := 6;
	KeyHolderPluginImpl_vTable.addRef := @KeyHolderPluginImpl_addRefDispatcher;
	KeyHolderPluginImpl_vTable.release := @KeyHolderPluginImpl_releaseDispatcher;
	KeyHolderPluginImpl_vTable.setOwner := @KeyHolderPluginImpl_setOwnerDispatcher;
	KeyHolderPluginImpl_vTable.getOwner := @KeyHolderPluginImpl_getOwnerDispatcher;
	KeyHolderPluginImpl_vTable.keyCallback := @KeyHolderPluginImpl_keyCallbackDispatcher;
	KeyHolderPluginImpl_vTable.keyHandle := @KeyHolderPluginImpl_keyHandleDispatcher;

	DbCryptPluginImpl_vTable := DbCryptPluginVTable.create;
	DbCryptPluginImpl_vTable.version := 7;
	DbCryptPluginImpl_vTable.addRef := @DbCryptPluginImpl_addRefDispatcher;
	DbCryptPluginImpl_vTable.release := @DbCryptPluginImpl_releaseDispatcher;
	DbCryptPluginImpl_vTable.setOwner := @DbCryptPluginImpl_setOwnerDispatcher;
	DbCryptPluginImpl_vTable.getOwner := @DbCryptPluginImpl_getOwnerDispatcher;
	DbCryptPluginImpl_vTable.setKey := @DbCryptPluginImpl_setKeyDispatcher;
	DbCryptPluginImpl_vTable.encrypt := @DbCryptPluginImpl_encryptDispatcher;
	DbCryptPluginImpl_vTable.decrypt := @DbCryptPluginImpl_decryptDispatcher;

	ExternalContextImpl_vTable := ExternalContextVTable.create;
	ExternalContextImpl_vTable.version := 10;
	ExternalContextImpl_vTable.getMaster := @ExternalContextImpl_getMasterDispatcher;
	ExternalContextImpl_vTable.getEngine := @ExternalContextImpl_getEngineDispatcher;
	ExternalContextImpl_vTable.getAttachment := @ExternalContextImpl_getAttachmentDispatcher;
	ExternalContextImpl_vTable.getTransaction := @ExternalContextImpl_getTransactionDispatcher;
	ExternalContextImpl_vTable.getUserName := @ExternalContextImpl_getUserNameDispatcher;
	ExternalContextImpl_vTable.getDatabaseName := @ExternalContextImpl_getDatabaseNameDispatcher;
	ExternalContextImpl_vTable.getClientCharSet := @ExternalContextImpl_getClientCharSetDispatcher;
	ExternalContextImpl_vTable.obtainInfoCode := @ExternalContextImpl_obtainInfoCodeDispatcher;
	ExternalContextImpl_vTable.getInfo := @ExternalContextImpl_getInfoDispatcher;
	ExternalContextImpl_vTable.setInfo := @ExternalContextImpl_setInfoDispatcher;

	ExternalResultSetImpl_vTable := ExternalResultSetVTable.create;
	ExternalResultSetImpl_vTable.version := 2;
	ExternalResultSetImpl_vTable.dispose := @ExternalResultSetImpl_disposeDispatcher;
	ExternalResultSetImpl_vTable.fetch := @ExternalResultSetImpl_fetchDispatcher;

	ExternalFunctionImpl_vTable := ExternalFunctionVTable.create;
	ExternalFunctionImpl_vTable.version := 3;
	ExternalFunctionImpl_vTable.dispose := @ExternalFunctionImpl_disposeDispatcher;
	ExternalFunctionImpl_vTable.getCharSet := @ExternalFunctionImpl_getCharSetDispatcher;
	ExternalFunctionImpl_vTable.execute := @ExternalFunctionImpl_executeDispatcher;

	ExternalProcedureImpl_vTable := ExternalProcedureVTable.create;
	ExternalProcedureImpl_vTable.version := 3;
	ExternalProcedureImpl_vTable.dispose := @ExternalProcedureImpl_disposeDispatcher;
	ExternalProcedureImpl_vTable.getCharSet := @ExternalProcedureImpl_getCharSetDispatcher;
	ExternalProcedureImpl_vTable.open := @ExternalProcedureImpl_openDispatcher;

	ExternalTriggerImpl_vTable := ExternalTriggerVTable.create;
	ExternalTriggerImpl_vTable.version := 3;
	ExternalTriggerImpl_vTable.dispose := @ExternalTriggerImpl_disposeDispatcher;
	ExternalTriggerImpl_vTable.getCharSet := @ExternalTriggerImpl_getCharSetDispatcher;
	ExternalTriggerImpl_vTable.execute := @ExternalTriggerImpl_executeDispatcher;

	RoutineMetadataImpl_vTable := RoutineMetadataVTable.create;
	RoutineMetadataImpl_vTable.version := 9;
	RoutineMetadataImpl_vTable.getPackage := @RoutineMetadataImpl_getPackageDispatcher;
	RoutineMetadataImpl_vTable.getName := @RoutineMetadataImpl_getNameDispatcher;
	RoutineMetadataImpl_vTable.getEntryPoint := @RoutineMetadataImpl_getEntryPointDispatcher;
	RoutineMetadataImpl_vTable.getBody := @RoutineMetadataImpl_getBodyDispatcher;
	RoutineMetadataImpl_vTable.getInputMetadata := @RoutineMetadataImpl_getInputMetadataDispatcher;
	RoutineMetadataImpl_vTable.getOutputMetadata := @RoutineMetadataImpl_getOutputMetadataDispatcher;
	RoutineMetadataImpl_vTable.getTriggerMetadata := @RoutineMetadataImpl_getTriggerMetadataDispatcher;
	RoutineMetadataImpl_vTable.getTriggerTable := @RoutineMetadataImpl_getTriggerTableDispatcher;
	RoutineMetadataImpl_vTable.getTriggerType := @RoutineMetadataImpl_getTriggerTypeDispatcher;

	ExternalEngineImpl_vTable := ExternalEngineVTable.create;
	ExternalEngineImpl_vTable.version := 10;
	ExternalEngineImpl_vTable.addRef := @ExternalEngineImpl_addRefDispatcher;
	ExternalEngineImpl_vTable.release := @ExternalEngineImpl_releaseDispatcher;
	ExternalEngineImpl_vTable.setOwner := @ExternalEngineImpl_setOwnerDispatcher;
	ExternalEngineImpl_vTable.getOwner := @ExternalEngineImpl_getOwnerDispatcher;
	ExternalEngineImpl_vTable.open := @ExternalEngineImpl_openDispatcher;
	ExternalEngineImpl_vTable.openAttachment := @ExternalEngineImpl_openAttachmentDispatcher;
	ExternalEngineImpl_vTable.closeAttachment := @ExternalEngineImpl_closeAttachmentDispatcher;
	ExternalEngineImpl_vTable.makeFunction := @ExternalEngineImpl_makeFunctionDispatcher;
	ExternalEngineImpl_vTable.makeProcedure := @ExternalEngineImpl_makeProcedureDispatcher;
	ExternalEngineImpl_vTable.makeTrigger := @ExternalEngineImpl_makeTriggerDispatcher;

	TimerImpl_vTable := TimerVTable.create;
	TimerImpl_vTable.version := 3;
	TimerImpl_vTable.addRef := @TimerImpl_addRefDispatcher;
	TimerImpl_vTable.release := @TimerImpl_releaseDispatcher;
	TimerImpl_vTable.handler := @TimerImpl_handlerDispatcher;

	TimerControlImpl_vTable := TimerControlVTable.create;
	TimerControlImpl_vTable.version := 2;
	TimerControlImpl_vTable.start := @TimerControlImpl_startDispatcher;
	TimerControlImpl_vTable.stop := @TimerControlImpl_stopDispatcher;

	VersionCallbackImpl_vTable := VersionCallbackVTable.create;
	VersionCallbackImpl_vTable.version := 1;
	VersionCallbackImpl_vTable.callback := @VersionCallbackImpl_callbackDispatcher;

	UtilImpl_vTable := UtilVTable.create;
	UtilImpl_vTable.version := 12;
	UtilImpl_vTable.getFbVersion := @UtilImpl_getFbVersionDispatcher;
	UtilImpl_vTable.loadBlob := @UtilImpl_loadBlobDispatcher;
	UtilImpl_vTable.dumpBlob := @UtilImpl_dumpBlobDispatcher;
	UtilImpl_vTable.getPerfCounters := @UtilImpl_getPerfCountersDispatcher;
	UtilImpl_vTable.executeCreateDatabase := @UtilImpl_executeCreateDatabaseDispatcher;
	UtilImpl_vTable.decodeDate := @UtilImpl_decodeDateDispatcher;
	UtilImpl_vTable.decodeTime := @UtilImpl_decodeTimeDispatcher;
	UtilImpl_vTable.encodeDate := @UtilImpl_encodeDateDispatcher;
	UtilImpl_vTable.encodeTime := @UtilImpl_encodeTimeDispatcher;
	UtilImpl_vTable.formatStatus := @UtilImpl_formatStatusDispatcher;
	UtilImpl_vTable.getClientVersion := @UtilImpl_getClientVersionDispatcher;
	UtilImpl_vTable.getXpbBuilder := @UtilImpl_getXpbBuilderDispatcher;

	XpbBuilderImpl_vTable := XpbBuilderVTable.create;
	XpbBuilderImpl_vTable.version := 21;
	XpbBuilderImpl_vTable.dispose := @XpbBuilderImpl_disposeDispatcher;
	XpbBuilderImpl_vTable.clear := @XpbBuilderImpl_clearDispatcher;
	XpbBuilderImpl_vTable.removeCurrent := @XpbBuilderImpl_removeCurrentDispatcher;
	XpbBuilderImpl_vTable.insertInt := @XpbBuilderImpl_insertIntDispatcher;
	XpbBuilderImpl_vTable.insertBigInt := @XpbBuilderImpl_insertBigIntDispatcher;
	XpbBuilderImpl_vTable.insertBytes := @XpbBuilderImpl_insertBytesDispatcher;
	XpbBuilderImpl_vTable.insertString := @XpbBuilderImpl_insertStringDispatcher;
	XpbBuilderImpl_vTable.insertTag := @XpbBuilderImpl_insertTagDispatcher;
	XpbBuilderImpl_vTable.isEof := @XpbBuilderImpl_isEofDispatcher;
	XpbBuilderImpl_vTable.moveNext := @XpbBuilderImpl_moveNextDispatcher;
	XpbBuilderImpl_vTable.rewind := @XpbBuilderImpl_rewindDispatcher;
	XpbBuilderImpl_vTable.findFirst := @XpbBuilderImpl_findFirstDispatcher;
	XpbBuilderImpl_vTable.findNext := @XpbBuilderImpl_findNextDispatcher;
	XpbBuilderImpl_vTable.getTag := @XpbBuilderImpl_getTagDispatcher;
	XpbBuilderImpl_vTable.getLength := @XpbBuilderImpl_getLengthDispatcher;
	XpbBuilderImpl_vTable.getInt := @XpbBuilderImpl_getIntDispatcher;
	XpbBuilderImpl_vTable.getBigInt := @XpbBuilderImpl_getBigIntDispatcher;
	XpbBuilderImpl_vTable.getString := @XpbBuilderImpl_getStringDispatcher;
	XpbBuilderImpl_vTable.getBytes := @XpbBuilderImpl_getBytesDispatcher;
	XpbBuilderImpl_vTable.getBufferLength := @XpbBuilderImpl_getBufferLengthDispatcher;
	XpbBuilderImpl_vTable.getBuffer := @XpbBuilderImpl_getBufferDispatcher;

	TraceConnectionImpl_vTable := TraceConnectionVTable.create;
	TraceConnectionImpl_vTable.version := 9;
	TraceConnectionImpl_vTable.getKind := @TraceConnectionImpl_getKindDispatcher;
	TraceConnectionImpl_vTable.getProcessID := @TraceConnectionImpl_getProcessIDDispatcher;
	TraceConnectionImpl_vTable.getUserName := @TraceConnectionImpl_getUserNameDispatcher;
	TraceConnectionImpl_vTable.getRoleName := @TraceConnectionImpl_getRoleNameDispatcher;
	TraceConnectionImpl_vTable.getCharSet := @TraceConnectionImpl_getCharSetDispatcher;
	TraceConnectionImpl_vTable.getRemoteProtocol := @TraceConnectionImpl_getRemoteProtocolDispatcher;
	TraceConnectionImpl_vTable.getRemoteAddress := @TraceConnectionImpl_getRemoteAddressDispatcher;
	TraceConnectionImpl_vTable.getRemoteProcessID := @TraceConnectionImpl_getRemoteProcessIDDispatcher;
	TraceConnectionImpl_vTable.getRemoteProcessName := @TraceConnectionImpl_getRemoteProcessNameDispatcher;

	TraceDatabaseConnectionImpl_vTable := TraceDatabaseConnectionVTable.create;
	TraceDatabaseConnectionImpl_vTable.version := 11;
	TraceDatabaseConnectionImpl_vTable.getKind := @TraceDatabaseConnectionImpl_getKindDispatcher;
	TraceDatabaseConnectionImpl_vTable.getProcessID := @TraceDatabaseConnectionImpl_getProcessIDDispatcher;
	TraceDatabaseConnectionImpl_vTable.getUserName := @TraceDatabaseConnectionImpl_getUserNameDispatcher;
	TraceDatabaseConnectionImpl_vTable.getRoleName := @TraceDatabaseConnectionImpl_getRoleNameDispatcher;
	TraceDatabaseConnectionImpl_vTable.getCharSet := @TraceDatabaseConnectionImpl_getCharSetDispatcher;
	TraceDatabaseConnectionImpl_vTable.getRemoteProtocol := @TraceDatabaseConnectionImpl_getRemoteProtocolDispatcher;
	TraceDatabaseConnectionImpl_vTable.getRemoteAddress := @TraceDatabaseConnectionImpl_getRemoteAddressDispatcher;
	TraceDatabaseConnectionImpl_vTable.getRemoteProcessID := @TraceDatabaseConnectionImpl_getRemoteProcessIDDispatcher;
	TraceDatabaseConnectionImpl_vTable.getRemoteProcessName := @TraceDatabaseConnectionImpl_getRemoteProcessNameDispatcher;
	TraceDatabaseConnectionImpl_vTable.getConnectionID := @TraceDatabaseConnectionImpl_getConnectionIDDispatcher;
	TraceDatabaseConnectionImpl_vTable.getDatabaseName := @TraceDatabaseConnectionImpl_getDatabaseNameDispatcher;

	TraceTransactionImpl_vTable := TraceTransactionVTable.create;
	TraceTransactionImpl_vTable.version := 5;
	TraceTransactionImpl_vTable.getTransactionID := @TraceTransactionImpl_getTransactionIDDispatcher;
	TraceTransactionImpl_vTable.getReadOnly := @TraceTransactionImpl_getReadOnlyDispatcher;
	TraceTransactionImpl_vTable.getWait := @TraceTransactionImpl_getWaitDispatcher;
	TraceTransactionImpl_vTable.getIsolation := @TraceTransactionImpl_getIsolationDispatcher;
	TraceTransactionImpl_vTable.getPerf := @TraceTransactionImpl_getPerfDispatcher;

	TraceParamsImpl_vTable := TraceParamsVTable.create;
	TraceParamsImpl_vTable.version := 2;
	TraceParamsImpl_vTable.getCount := @TraceParamsImpl_getCountDispatcher;
	TraceParamsImpl_vTable.getParam := @TraceParamsImpl_getParamDispatcher;

	TraceStatementImpl_vTable := TraceStatementVTable.create;
	TraceStatementImpl_vTable.version := 2;
	TraceStatementImpl_vTable.getStmtID := @TraceStatementImpl_getStmtIDDispatcher;
	TraceStatementImpl_vTable.getPerf := @TraceStatementImpl_getPerfDispatcher;

	TraceSQLStatementImpl_vTable := TraceSQLStatementVTable.create;
	TraceSQLStatementImpl_vTable.version := 7;
	TraceSQLStatementImpl_vTable.getStmtID := @TraceSQLStatementImpl_getStmtIDDispatcher;
	TraceSQLStatementImpl_vTable.getPerf := @TraceSQLStatementImpl_getPerfDispatcher;
	TraceSQLStatementImpl_vTable.getText := @TraceSQLStatementImpl_getTextDispatcher;
	TraceSQLStatementImpl_vTable.getPlan := @TraceSQLStatementImpl_getPlanDispatcher;
	TraceSQLStatementImpl_vTable.getInputs := @TraceSQLStatementImpl_getInputsDispatcher;
	TraceSQLStatementImpl_vTable.getTextUTF8 := @TraceSQLStatementImpl_getTextUTF8Dispatcher;
	TraceSQLStatementImpl_vTable.getExplainedPlan := @TraceSQLStatementImpl_getExplainedPlanDispatcher;

	TraceBLRStatementImpl_vTable := TraceBLRStatementVTable.create;
	TraceBLRStatementImpl_vTable.version := 5;
	TraceBLRStatementImpl_vTable.getStmtID := @TraceBLRStatementImpl_getStmtIDDispatcher;
	TraceBLRStatementImpl_vTable.getPerf := @TraceBLRStatementImpl_getPerfDispatcher;
	TraceBLRStatementImpl_vTable.getData := @TraceBLRStatementImpl_getDataDispatcher;
	TraceBLRStatementImpl_vTable.getDataLength := @TraceBLRStatementImpl_getDataLengthDispatcher;
	TraceBLRStatementImpl_vTable.getText := @TraceBLRStatementImpl_getTextDispatcher;

	TraceDYNRequestImpl_vTable := TraceDYNRequestVTable.create;
	TraceDYNRequestImpl_vTable.version := 3;
	TraceDYNRequestImpl_vTable.getData := @TraceDYNRequestImpl_getDataDispatcher;
	TraceDYNRequestImpl_vTable.getDataLength := @TraceDYNRequestImpl_getDataLengthDispatcher;
	TraceDYNRequestImpl_vTable.getText := @TraceDYNRequestImpl_getTextDispatcher;

	TraceContextVariableImpl_vTable := TraceContextVariableVTable.create;
	TraceContextVariableImpl_vTable.version := 3;
	TraceContextVariableImpl_vTable.getNameSpace := @TraceContextVariableImpl_getNameSpaceDispatcher;
	TraceContextVariableImpl_vTable.getVarName := @TraceContextVariableImpl_getVarNameDispatcher;
	TraceContextVariableImpl_vTable.getVarValue := @TraceContextVariableImpl_getVarValueDispatcher;

	TraceProcedureImpl_vTable := TraceProcedureVTable.create;
	TraceProcedureImpl_vTable.version := 3;
	TraceProcedureImpl_vTable.getProcName := @TraceProcedureImpl_getProcNameDispatcher;
	TraceProcedureImpl_vTable.getInputs := @TraceProcedureImpl_getInputsDispatcher;
	TraceProcedureImpl_vTable.getPerf := @TraceProcedureImpl_getPerfDispatcher;

	TraceFunctionImpl_vTable := TraceFunctionVTable.create;
	TraceFunctionImpl_vTable.version := 4;
	TraceFunctionImpl_vTable.getFuncName := @TraceFunctionImpl_getFuncNameDispatcher;
	TraceFunctionImpl_vTable.getInputs := @TraceFunctionImpl_getInputsDispatcher;
	TraceFunctionImpl_vTable.getResult := @TraceFunctionImpl_getResultDispatcher;
	TraceFunctionImpl_vTable.getPerf := @TraceFunctionImpl_getPerfDispatcher;

	TraceTriggerImpl_vTable := TraceTriggerVTable.create;
	TraceTriggerImpl_vTable.version := 5;
	TraceTriggerImpl_vTable.getTriggerName := @TraceTriggerImpl_getTriggerNameDispatcher;
	TraceTriggerImpl_vTable.getRelationName := @TraceTriggerImpl_getRelationNameDispatcher;
	TraceTriggerImpl_vTable.getAction := @TraceTriggerImpl_getActionDispatcher;
	TraceTriggerImpl_vTable.getWhich := @TraceTriggerImpl_getWhichDispatcher;
	TraceTriggerImpl_vTable.getPerf := @TraceTriggerImpl_getPerfDispatcher;

	TraceServiceConnectionImpl_vTable := TraceServiceConnectionVTable.create;
	TraceServiceConnectionImpl_vTable.version := 12;
	TraceServiceConnectionImpl_vTable.getKind := @TraceServiceConnectionImpl_getKindDispatcher;
	TraceServiceConnectionImpl_vTable.getProcessID := @TraceServiceConnectionImpl_getProcessIDDispatcher;
	TraceServiceConnectionImpl_vTable.getUserName := @TraceServiceConnectionImpl_getUserNameDispatcher;
	TraceServiceConnectionImpl_vTable.getRoleName := @TraceServiceConnectionImpl_getRoleNameDispatcher;
	TraceServiceConnectionImpl_vTable.getCharSet := @TraceServiceConnectionImpl_getCharSetDispatcher;
	TraceServiceConnectionImpl_vTable.getRemoteProtocol := @TraceServiceConnectionImpl_getRemoteProtocolDispatcher;
	TraceServiceConnectionImpl_vTable.getRemoteAddress := @TraceServiceConnectionImpl_getRemoteAddressDispatcher;
	TraceServiceConnectionImpl_vTable.getRemoteProcessID := @TraceServiceConnectionImpl_getRemoteProcessIDDispatcher;
	TraceServiceConnectionImpl_vTable.getRemoteProcessName := @TraceServiceConnectionImpl_getRemoteProcessNameDispatcher;
	TraceServiceConnectionImpl_vTable.getServiceID := @TraceServiceConnectionImpl_getServiceIDDispatcher;
	TraceServiceConnectionImpl_vTable.getServiceMgr := @TraceServiceConnectionImpl_getServiceMgrDispatcher;
	TraceServiceConnectionImpl_vTable.getServiceName := @TraceServiceConnectionImpl_getServiceNameDispatcher;

	TraceStatusVectorImpl_vTable := TraceStatusVectorVTable.create;
	TraceStatusVectorImpl_vTable.version := 4;
	TraceStatusVectorImpl_vTable.hasError := @TraceStatusVectorImpl_hasErrorDispatcher;
	TraceStatusVectorImpl_vTable.hasWarning := @TraceStatusVectorImpl_hasWarningDispatcher;
	TraceStatusVectorImpl_vTable.getStatus := @TraceStatusVectorImpl_getStatusDispatcher;
	TraceStatusVectorImpl_vTable.getText := @TraceStatusVectorImpl_getTextDispatcher;

	TraceSweepInfoImpl_vTable := TraceSweepInfoVTable.create;
	TraceSweepInfoImpl_vTable.version := 5;
	TraceSweepInfoImpl_vTable.getOIT := @TraceSweepInfoImpl_getOITDispatcher;
	TraceSweepInfoImpl_vTable.getOST := @TraceSweepInfoImpl_getOSTDispatcher;
	TraceSweepInfoImpl_vTable.getOAT := @TraceSweepInfoImpl_getOATDispatcher;
	TraceSweepInfoImpl_vTable.getNext := @TraceSweepInfoImpl_getNextDispatcher;
	TraceSweepInfoImpl_vTable.getPerf := @TraceSweepInfoImpl_getPerfDispatcher;

	TraceLogWriterImpl_vTable := TraceLogWriterVTable.create;
	TraceLogWriterImpl_vTable.version := 3;
	TraceLogWriterImpl_vTable.addRef := @TraceLogWriterImpl_addRefDispatcher;
	TraceLogWriterImpl_vTable.release := @TraceLogWriterImpl_releaseDispatcher;
	TraceLogWriterImpl_vTable.write := @TraceLogWriterImpl_writeDispatcher;

	TraceInitInfoImpl_vTable := TraceInitInfoVTable.create;
	TraceInitInfoImpl_vTable.version := 7;
	TraceInitInfoImpl_vTable.getConfigText := @TraceInitInfoImpl_getConfigTextDispatcher;
	TraceInitInfoImpl_vTable.getTraceSessionID := @TraceInitInfoImpl_getTraceSessionIDDispatcher;
	TraceInitInfoImpl_vTable.getTraceSessionName := @TraceInitInfoImpl_getTraceSessionNameDispatcher;
	TraceInitInfoImpl_vTable.getFirebirdRootDirectory := @TraceInitInfoImpl_getFirebirdRootDirectoryDispatcher;
	TraceInitInfoImpl_vTable.getDatabaseName := @TraceInitInfoImpl_getDatabaseNameDispatcher;
	TraceInitInfoImpl_vTable.getConnection := @TraceInitInfoImpl_getConnectionDispatcher;
	TraceInitInfoImpl_vTable.getLogWriter := @TraceInitInfoImpl_getLogWriterDispatcher;

	TracePluginImpl_vTable := TracePluginVTable.create;
	TracePluginImpl_vTable.version := 23;
	TracePluginImpl_vTable.addRef := @TracePluginImpl_addRefDispatcher;
	TracePluginImpl_vTable.release := @TracePluginImpl_releaseDispatcher;
	TracePluginImpl_vTable.trace_get_error := @TracePluginImpl_trace_get_errorDispatcher;
	TracePluginImpl_vTable.trace_attach := @TracePluginImpl_trace_attachDispatcher;
	TracePluginImpl_vTable.trace_detach := @TracePluginImpl_trace_detachDispatcher;
	TracePluginImpl_vTable.trace_transaction_start := @TracePluginImpl_trace_transaction_startDispatcher;
	TracePluginImpl_vTable.trace_transaction_end := @TracePluginImpl_trace_transaction_endDispatcher;
	TracePluginImpl_vTable.trace_proc_execute := @TracePluginImpl_trace_proc_executeDispatcher;
	TracePluginImpl_vTable.trace_trigger_execute := @TracePluginImpl_trace_trigger_executeDispatcher;
	TracePluginImpl_vTable.trace_set_context := @TracePluginImpl_trace_set_contextDispatcher;
	TracePluginImpl_vTable.trace_dsql_prepare := @TracePluginImpl_trace_dsql_prepareDispatcher;
	TracePluginImpl_vTable.trace_dsql_free := @TracePluginImpl_trace_dsql_freeDispatcher;
	TracePluginImpl_vTable.trace_dsql_execute := @TracePluginImpl_trace_dsql_executeDispatcher;
	TracePluginImpl_vTable.trace_blr_compile := @TracePluginImpl_trace_blr_compileDispatcher;
	TracePluginImpl_vTable.trace_blr_execute := @TracePluginImpl_trace_blr_executeDispatcher;
	TracePluginImpl_vTable.trace_dyn_execute := @TracePluginImpl_trace_dyn_executeDispatcher;
	TracePluginImpl_vTable.trace_service_attach := @TracePluginImpl_trace_service_attachDispatcher;
	TracePluginImpl_vTable.trace_service_start := @TracePluginImpl_trace_service_startDispatcher;
	TracePluginImpl_vTable.trace_service_query := @TracePluginImpl_trace_service_queryDispatcher;
	TracePluginImpl_vTable.trace_service_detach := @TracePluginImpl_trace_service_detachDispatcher;
	TracePluginImpl_vTable.trace_event_error := @TracePluginImpl_trace_event_errorDispatcher;
	TracePluginImpl_vTable.trace_event_sweep := @TracePluginImpl_trace_event_sweepDispatcher;
	TracePluginImpl_vTable.trace_func_execute := @TracePluginImpl_trace_func_executeDispatcher;

	TraceFactoryImpl_vTable := TraceFactoryVTable.create;
	TraceFactoryImpl_vTable.version := 6;
	TraceFactoryImpl_vTable.addRef := @TraceFactoryImpl_addRefDispatcher;
	TraceFactoryImpl_vTable.release := @TraceFactoryImpl_releaseDispatcher;
	TraceFactoryImpl_vTable.setOwner := @TraceFactoryImpl_setOwnerDispatcher;
	TraceFactoryImpl_vTable.getOwner := @TraceFactoryImpl_getOwnerDispatcher;
	TraceFactoryImpl_vTable.trace_needs := @TraceFactoryImpl_trace_needsDispatcher;
	TraceFactoryImpl_vTable.trace_create := @TraceFactoryImpl_trace_createDispatcher;

	UdrFunctionFactoryImpl_vTable := UdrFunctionFactoryVTable.create;
	UdrFunctionFactoryImpl_vTable.version := 3;
	UdrFunctionFactoryImpl_vTable.dispose := @UdrFunctionFactoryImpl_disposeDispatcher;
	UdrFunctionFactoryImpl_vTable.setup := @UdrFunctionFactoryImpl_setupDispatcher;
	UdrFunctionFactoryImpl_vTable.newItem := @UdrFunctionFactoryImpl_newItemDispatcher;

	UdrProcedureFactoryImpl_vTable := UdrProcedureFactoryVTable.create;
	UdrProcedureFactoryImpl_vTable.version := 3;
	UdrProcedureFactoryImpl_vTable.dispose := @UdrProcedureFactoryImpl_disposeDispatcher;
	UdrProcedureFactoryImpl_vTable.setup := @UdrProcedureFactoryImpl_setupDispatcher;
	UdrProcedureFactoryImpl_vTable.newItem := @UdrProcedureFactoryImpl_newItemDispatcher;

	UdrTriggerFactoryImpl_vTable := UdrTriggerFactoryVTable.create;
	UdrTriggerFactoryImpl_vTable.version := 3;
	UdrTriggerFactoryImpl_vTable.dispose := @UdrTriggerFactoryImpl_disposeDispatcher;
	UdrTriggerFactoryImpl_vTable.setup := @UdrTriggerFactoryImpl_setupDispatcher;
	UdrTriggerFactoryImpl_vTable.newItem := @UdrTriggerFactoryImpl_newItemDispatcher;

	UdrPluginImpl_vTable := UdrPluginVTable.create;
	UdrPluginImpl_vTable.version := 4;
	UdrPluginImpl_vTable.getMaster := @UdrPluginImpl_getMasterDispatcher;
	UdrPluginImpl_vTable.registerFunction := @UdrPluginImpl_registerFunctionDispatcher;
	UdrPluginImpl_vTable.registerProcedure := @UdrPluginImpl_registerProcedureDispatcher;
	UdrPluginImpl_vTable.registerTrigger := @UdrPluginImpl_registerTriggerDispatcher;

finalization
	VersionedImpl_vTable.destroy;
	ReferenceCountedImpl_vTable.destroy;
	DisposableImpl_vTable.destroy;
	StatusImpl_vTable.destroy;
	MasterImpl_vTable.destroy;
	PluginBaseImpl_vTable.destroy;
	PluginSetImpl_vTable.destroy;
	ConfigEntryImpl_vTable.destroy;
	ConfigImpl_vTable.destroy;
	FirebirdConfImpl_vTable.destroy;
	PluginConfigImpl_vTable.destroy;
	PluginFactoryImpl_vTable.destroy;
	PluginModuleImpl_vTable.destroy;
	PluginManagerImpl_vTable.destroy;
	CryptKeyImpl_vTable.destroy;
	ConfigManagerImpl_vTable.destroy;
	EventCallbackImpl_vTable.destroy;
	BlobImpl_vTable.destroy;
	TransactionImpl_vTable.destroy;
	MessageMetadataImpl_vTable.destroy;
	MetadataBuilderImpl_vTable.destroy;
	ResultSetImpl_vTable.destroy;
	StatementImpl_vTable.destroy;
	RequestImpl_vTable.destroy;
	EventsImpl_vTable.destroy;
	AttachmentImpl_vTable.destroy;
	ServiceImpl_vTable.destroy;
	ProviderImpl_vTable.destroy;
	DtcStartImpl_vTable.destroy;
	DtcImpl_vTable.destroy;
	AuthImpl_vTable.destroy;
	WriterImpl_vTable.destroy;
	ServerBlockImpl_vTable.destroy;
	ClientBlockImpl_vTable.destroy;
	ServerImpl_vTable.destroy;
	ClientImpl_vTable.destroy;
	UserFieldImpl_vTable.destroy;
	CharUserFieldImpl_vTable.destroy;
	IntUserFieldImpl_vTable.destroy;
	UserImpl_vTable.destroy;
	ListUsersImpl_vTable.destroy;
	LogonInfoImpl_vTable.destroy;
	ManagementImpl_vTable.destroy;
	WireCryptPluginImpl_vTable.destroy;
	CryptKeyCallbackImpl_vTable.destroy;
	KeyHolderPluginImpl_vTable.destroy;
	DbCryptPluginImpl_vTable.destroy;
	ExternalContextImpl_vTable.destroy;
	ExternalResultSetImpl_vTable.destroy;
	ExternalFunctionImpl_vTable.destroy;
	ExternalProcedureImpl_vTable.destroy;
	ExternalTriggerImpl_vTable.destroy;
	RoutineMetadataImpl_vTable.destroy;
	ExternalEngineImpl_vTable.destroy;
	TimerImpl_vTable.destroy;
	TimerControlImpl_vTable.destroy;
	VersionCallbackImpl_vTable.destroy;
	UtilImpl_vTable.destroy;
	XpbBuilderImpl_vTable.destroy;
	TraceConnectionImpl_vTable.destroy;
	TraceDatabaseConnectionImpl_vTable.destroy;
	TraceTransactionImpl_vTable.destroy;
	TraceParamsImpl_vTable.destroy;
	TraceStatementImpl_vTable.destroy;
	TraceSQLStatementImpl_vTable.destroy;
	TraceBLRStatementImpl_vTable.destroy;
	TraceDYNRequestImpl_vTable.destroy;
	TraceContextVariableImpl_vTable.destroy;
	TraceProcedureImpl_vTable.destroy;
	TraceFunctionImpl_vTable.destroy;
	TraceTriggerImpl_vTable.destroy;
	TraceServiceConnectionImpl_vTable.destroy;
	TraceStatusVectorImpl_vTable.destroy;
	TraceSweepInfoImpl_vTable.destroy;
	TraceLogWriterImpl_vTable.destroy;
	TraceInitInfoImpl_vTable.destroy;
	TracePluginImpl_vTable.destroy;
	TraceFactoryImpl_vTable.destroy;
	UdrFunctionFactoryImpl_vTable.destroy;
	UdrProcedureFactoryImpl_vTable.destroy;
	UdrTriggerFactoryImpl_vTable.destroy;
	UdrPluginImpl_vTable.destroy;

end.
